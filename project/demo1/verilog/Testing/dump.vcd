$date
<<<<<<< HEAD
	Sun Mar 13 13:40:06 2016
=======
	Sat Mar 12 18:22:18 2016
>>>>>>> 2e640e2555e217a06b6c352cc5c5f6091e568d2d
$end
$version
	ModelSim Version 5.8b
$end
$timescale
	1ns
$end
$scope module proc_hier_bench $end
$var wire 1 ! PC [15] $end
$var wire 1 " PC [14] $end
$var wire 1 # PC [13] $end
$var wire 1 $ PC [12] $end
$var wire 1 % PC [11] $end
$var wire 1 & PC [10] $end
$var wire 1 ' PC [9] $end
$var wire 1 ( PC [8] $end
$var wire 1 ) PC [7] $end
$var wire 1 * PC [6] $end
$var wire 1 + PC [5] $end
$var wire 1 , PC [4] $end
$var wire 1 - PC [3] $end
$var wire 1 . PC [2] $end
$var wire 1 / PC [1] $end
$var wire 1 0 PC [0] $end
$var wire 1 1 Inst [15] $end
$var wire 1 2 Inst [14] $end
$var wire 1 3 Inst [13] $end
$var wire 1 4 Inst [12] $end
$var wire 1 5 Inst [11] $end
$var wire 1 6 Inst [10] $end
$var wire 1 7 Inst [9] $end
$var wire 1 8 Inst [8] $end
$var wire 1 9 Inst [7] $end
$var wire 1 : Inst [6] $end
$var wire 1 ; Inst [5] $end
$var wire 1 < Inst [4] $end
$var wire 1 = Inst [3] $end
$var wire 1 > Inst [2] $end
$var wire 1 ? Inst [1] $end
$var wire 1 @ Inst [0] $end
$var wire 1 A RegWrite $end
$var wire 1 B WriteRegister [2] $end
$var wire 1 C WriteRegister [1] $end
$var wire 1 D WriteRegister [0] $end
$var wire 1 E WriteData [15] $end
$var wire 1 F WriteData [14] $end
$var wire 1 G WriteData [13] $end
$var wire 1 H WriteData [12] $end
$var wire 1 I WriteData [11] $end
$var wire 1 J WriteData [10] $end
$var wire 1 K WriteData [9] $end
$var wire 1 L WriteData [8] $end
$var wire 1 M WriteData [7] $end
$var wire 1 N WriteData [6] $end
$var wire 1 O WriteData [5] $end
$var wire 1 P WriteData [4] $end
$var wire 1 Q WriteData [3] $end
$var wire 1 R WriteData [2] $end
$var wire 1 S WriteData [1] $end
$var wire 1 T WriteData [0] $end
$var wire 1 U MemWrite $end
$var wire 1 V MemRead $end
$var wire 1 W MemAddress [15] $end
$var wire 1 X MemAddress [14] $end
$var wire 1 Y MemAddress [13] $end
$var wire 1 Z MemAddress [12] $end
$var wire 1 [ MemAddress [11] $end
$var wire 1 \ MemAddress [10] $end
$var wire 1 ] MemAddress [9] $end
$var wire 1 ^ MemAddress [8] $end
$var wire 1 _ MemAddress [7] $end
$var wire 1 ` MemAddress [6] $end
$var wire 1 a MemAddress [5] $end
$var wire 1 b MemAddress [4] $end
$var wire 1 c MemAddress [3] $end
$var wire 1 d MemAddress [2] $end
$var wire 1 e MemAddress [1] $end
$var wire 1 f MemAddress [0] $end
$var wire 1 g MemData [15] $end
$var wire 1 h MemData [14] $end
$var wire 1 i MemData [13] $end
$var wire 1 j MemData [12] $end
$var wire 1 k MemData [11] $end
$var wire 1 l MemData [10] $end
$var wire 1 m MemData [9] $end
$var wire 1 n MemData [8] $end
$var wire 1 o MemData [7] $end
$var wire 1 p MemData [6] $end
$var wire 1 q MemData [5] $end
$var wire 1 r MemData [4] $end
$var wire 1 s MemData [3] $end
$var wire 1 t MemData [2] $end
$var wire 1 u MemData [1] $end
$var wire 1 v MemData [0] $end
$var wire 1 w Halt $end
$var integer 32 x inst_count $end
$var integer 32 y trace_file $end
$var integer 32 z sim_log_file $end
$scope module DUT $end
$var wire 1 { clk $end
$var wire 1 | err $end
$var wire 1 } rst $end
$scope module c0 $end
$var reg 1 ~ clk $end
$var reg 1 !! rst $end
$var wire 1 | err $end
$var integer 32 "! cycle_count $end
$upscope $end
$scope module p0 $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var wire 1 | err $end
$var wire 1 #! ALU_OP_Code [3] $end
$var wire 1 $! ALU_OP_Code [2] $end
$var wire 1 %! ALU_OP_Code [1] $end
$var wire 1 &! ALU_OP_Code [0] $end
$var wire 1 '! ALU_Result [15] $end
$var wire 1 (! ALU_Result [14] $end
$var wire 1 )! ALU_Result [13] $end
$var wire 1 *! ALU_Result [12] $end
$var wire 1 +! ALU_Result [11] $end
$var wire 1 ,! ALU_Result [10] $end
$var wire 1 -! ALU_Result [9] $end
$var wire 1 .! ALU_Result [8] $end
$var wire 1 /! ALU_Result [7] $end
$var wire 1 0! ALU_Result [6] $end
$var wire 1 1! ALU_Result [5] $end
$var wire 1 2! ALU_Result [4] $end
$var wire 1 3! ALU_Result [3] $end
$var wire 1 4! ALU_Result [2] $end
$var wire 1 5! ALU_Result [1] $end
$var wire 1 6! ALU_Result [0] $end
$var wire 1 7! A [15] $end
$var wire 1 8! A [14] $end
$var wire 1 9! A [13] $end
$var wire 1 :! A [12] $end
$var wire 1 ;! A [11] $end
$var wire 1 <! A [10] $end
$var wire 1 =! A [9] $end
$var wire 1 >! A [8] $end
$var wire 1 ?! A [7] $end
$var wire 1 @! A [6] $end
$var wire 1 A! A [5] $end
$var wire 1 B! A [4] $end
$var wire 1 C! A [3] $end
$var wire 1 D! A [2] $end
$var wire 1 E! A [1] $end
$var wire 1 F! A [0] $end
$var wire 1 G! B_in [15] $end
$var wire 1 H! B_in [14] $end
$var wire 1 I! B_in [13] $end
$var wire 1 J! B_in [12] $end
$var wire 1 K! B_in [11] $end
$var wire 1 L! B_in [10] $end
$var wire 1 M! B_in [9] $end
$var wire 1 N! B_in [8] $end
$var wire 1 O! B_in [7] $end
$var wire 1 P! B_in [6] $end
$var wire 1 Q! B_in [5] $end
$var wire 1 R! B_in [4] $end
$var wire 1 S! B_in [3] $end
$var wire 1 T! B_in [2] $end
$var wire 1 U! B_in [1] $end
$var wire 1 V! B_in [0] $end
$var wire 1 W! ALU_B_Src $end
$var wire 1 X! LT $end
$var wire 1 Y! EQ $end
$var wire 1 Z! Reg_Write $end
<<<<<<< HEAD
$var wire 1 [! Write_Reg [2] $end
$var wire 1 \! Write_Reg [1] $end
$var wire 1 ]! Write_Reg [0] $end
$var wire 1 ^! Write_Reg_Sel [1] $end
$var wire 1 _! Write_Reg_Sel [0] $end
=======
$var wire 1 [! Write_Reg_Sel [1] $end
$var wire 1 \! Write_Reg_Sel [0] $end
$var wire 1 ]! Write_Reg [2] $end
$var wire 1 ^! Write_Reg [1] $end
$var wire 1 _! Write_Reg [0] $end
>>>>>>> 2e640e2555e217a06b6c352cc5c5f6091e568d2d
$var wire 1 `! read1data [15] $end
$var wire 1 a! read1data [14] $end
$var wire 1 b! read1data [13] $end
$var wire 1 c! read1data [12] $end
$var wire 1 d! read1data [11] $end
$var wire 1 e! read1data [10] $end
$var wire 1 f! read1data [9] $end
$var wire 1 g! read1data [8] $end
$var wire 1 h! read1data [7] $end
$var wire 1 i! read1data [6] $end
$var wire 1 j! read1data [5] $end
$var wire 1 k! read1data [4] $end
$var wire 1 l! read1data [3] $end
$var wire 1 m! read1data [2] $end
$var wire 1 n! read1data [1] $end
$var wire 1 o! read1data [0] $end
$var wire 1 p! read2data [15] $end
$var wire 1 q! read2data [14] $end
$var wire 1 r! read2data [13] $end
$var wire 1 s! read2data [12] $end
$var wire 1 t! read2data [11] $end
$var wire 1 u! read2data [10] $end
$var wire 1 v! read2data [9] $end
$var wire 1 w! read2data [8] $end
$var wire 1 x! read2data [7] $end
$var wire 1 y! read2data [6] $end
$var wire 1 z! read2data [5] $end
$var wire 1 {! read2data [4] $end
$var wire 1 |! read2data [3] $end
$var wire 1 }! read2data [2] $end
$var wire 1 ~! read2data [1] $end
$var wire 1 !" read2data [0] $end
$var wire 1 "" memory_out [15] $end
$var wire 1 #" memory_out [14] $end
$var wire 1 $" memory_out [13] $end
$var wire 1 %" memory_out [12] $end
$var wire 1 &" memory_out [11] $end
$var wire 1 '" memory_out [10] $end
$var wire 1 (" memory_out [9] $end
$var wire 1 )" memory_out [8] $end
$var wire 1 *" memory_out [7] $end
$var wire 1 +" memory_out [6] $end
$var wire 1 ," memory_out [5] $end
$var wire 1 -" memory_out [4] $end
$var wire 1 ." memory_out [3] $end
$var wire 1 /" memory_out [2] $end
$var wire 1 0" memory_out [1] $end
$var wire 1 1" memory_out [0] $end
$var wire 1 2" Mem_Read $end
$var wire 1 3" Mem_Write $end
$var wire 1 4" PC_Code [2] $end
$var wire 1 5" PC_Code [1] $end
$var wire 1 6" PC_Code [0] $end
$var wire 1 7" PC_Write $end
$var wire 1 8" Nxt_PC [15] $end
$var wire 1 9" Nxt_PC [14] $end
$var wire 1 :" Nxt_PC [13] $end
$var wire 1 ;" Nxt_PC [12] $end
$var wire 1 <" Nxt_PC [11] $end
$var wire 1 =" Nxt_PC [10] $end
$var wire 1 >" Nxt_PC [9] $end
$var wire 1 ?" Nxt_PC [8] $end
$var wire 1 @" Nxt_PC [7] $end
$var wire 1 A" Nxt_PC [6] $end
$var wire 1 B" Nxt_PC [5] $end
$var wire 1 C" Nxt_PC [4] $end
$var wire 1 D" Nxt_PC [3] $end
$var wire 1 E" Nxt_PC [2] $end
$var wire 1 F" Nxt_PC [1] $end
$var wire 1 G" Nxt_PC [0] $end
$var wire 1 H" Curr_PC [15] $end
$var wire 1 I" Curr_PC [14] $end
$var wire 1 J" Curr_PC [13] $end
$var wire 1 K" Curr_PC [12] $end
$var wire 1 L" Curr_PC [11] $end
$var wire 1 M" Curr_PC [10] $end
$var wire 1 N" Curr_PC [9] $end
$var wire 1 O" Curr_PC [8] $end
$var wire 1 P" Curr_PC [7] $end
$var wire 1 Q" Curr_PC [6] $end
$var wire 1 R" Curr_PC [5] $end
$var wire 1 S" Curr_PC [4] $end
$var wire 1 T" Curr_PC [3] $end
$var wire 1 U" Curr_PC [2] $end
$var wire 1 V" Curr_PC [1] $end
$var wire 1 W" Curr_PC [0] $end
$var wire 1 X" Comp_Code [1] $end
$var wire 1 Y" Comp_Code [0] $end
$var wire 1 Z" PC2 [15] $end
$var wire 1 [" PC2 [14] $end
$var wire 1 \" PC2 [13] $end
$var wire 1 ]" PC2 [12] $end
$var wire 1 ^" PC2 [11] $end
$var wire 1 _" PC2 [10] $end
$var wire 1 `" PC2 [9] $end
$var wire 1 a" PC2 [8] $end
$var wire 1 b" PC2 [7] $end
$var wire 1 c" PC2 [6] $end
$var wire 1 d" PC2 [5] $end
$var wire 1 e" PC2 [4] $end
$var wire 1 f" PC2 [3] $end
$var wire 1 g" PC2 [2] $end
$var wire 1 h" PC2 [1] $end
$var wire 1 i" PC2 [0] $end
$var wire 1 j" Imm5S [15] $end
$var wire 1 k" Imm5S [14] $end
$var wire 1 l" Imm5S [13] $end
$var wire 1 m" Imm5S [12] $end
$var wire 1 n" Imm5S [11] $end
$var wire 1 o" Imm5S [10] $end
$var wire 1 p" Imm5S [9] $end
$var wire 1 q" Imm5S [8] $end
$var wire 1 r" Imm5S [7] $end
$var wire 1 s" Imm5S [6] $end
$var wire 1 t" Imm5S [5] $end
$var wire 1 u" Imm5S [4] $end
$var wire 1 v" Imm5S [3] $end
$var wire 1 w" Imm5S [2] $end
$var wire 1 x" Imm5S [1] $end
$var wire 1 y" Imm5S [0] $end
$var wire 1 z" Imm5Z [15] $end
$var wire 1 {" Imm5Z [14] $end
$var wire 1 |" Imm5Z [13] $end
$var wire 1 }" Imm5Z [12] $end
$var wire 1 ~" Imm5Z [11] $end
$var wire 1 !# Imm5Z [10] $end
$var wire 1 "# Imm5Z [9] $end
$var wire 1 ## Imm5Z [8] $end
$var wire 1 $# Imm5Z [7] $end
$var wire 1 %# Imm5Z [6] $end
$var wire 1 &# Imm5Z [5] $end
$var wire 1 '# Imm5Z [4] $end
$var wire 1 (# Imm5Z [3] $end
$var wire 1 )# Imm5Z [2] $end
$var wire 1 *# Imm5Z [1] $end
$var wire 1 +# Imm5Z [0] $end
$var wire 1 ,# Imm8S [15] $end
$var wire 1 -# Imm8S [14] $end
$var wire 1 .# Imm8S [13] $end
$var wire 1 /# Imm8S [12] $end
$var wire 1 0# Imm8S [11] $end
$var wire 1 1# Imm8S [10] $end
$var wire 1 2# Imm8S [9] $end
$var wire 1 3# Imm8S [8] $end
$var wire 1 4# Imm8S [7] $end
$var wire 1 5# Imm8S [6] $end
$var wire 1 6# Imm8S [5] $end
$var wire 1 7# Imm8S [4] $end
$var wire 1 8# Imm8S [3] $end
$var wire 1 9# Imm8S [2] $end
$var wire 1 :# Imm8S [1] $end
$var wire 1 ;# Imm8S [0] $end
$var wire 1 <# Dis11 [15] $end
$var wire 1 =# Dis11 [14] $end
$var wire 1 ># Dis11 [13] $end
$var wire 1 ?# Dis11 [12] $end
$var wire 1 @# Dis11 [11] $end
$var wire 1 A# Dis11 [10] $end
$var wire 1 B# Dis11 [9] $end
$var wire 1 C# Dis11 [8] $end
$var wire 1 D# Dis11 [7] $end
$var wire 1 E# Dis11 [6] $end
$var wire 1 F# Dis11 [5] $end
$var wire 1 G# Dis11 [4] $end
$var wire 1 H# Dis11 [3] $end
$var wire 1 I# Dis11 [2] $end
$var wire 1 J# Dis11 [1] $end
$var wire 1 K# Dis11 [0] $end
$var wire 1 L# Instruction [15] $end
$var wire 1 M# Instruction [14] $end
$var wire 1 N# Instruction [13] $end
$var wire 1 O# Instruction [12] $end
$var wire 1 P# Instruction [11] $end
$var wire 1 Q# Instruction [10] $end
$var wire 1 R# Instruction [9] $end
$var wire 1 S# Instruction [8] $end
$var wire 1 T# Instruction [7] $end
$var wire 1 U# Instruction [6] $end
$var wire 1 V# Instruction [5] $end
$var wire 1 W# Instruction [4] $end
$var wire 1 X# Instruction [3] $end
$var wire 1 Y# Instruction [2] $end
$var wire 1 Z# Instruction [1] $end
$var wire 1 [# Instruction [0] $end
$var wire 1 \# writeback [15] $end
$var wire 1 ]# writeback [14] $end
$var wire 1 ^# writeback [13] $end
$var wire 1 _# writeback [12] $end
$var wire 1 `# writeback [11] $end
$var wire 1 a# writeback [10] $end
$var wire 1 b# writeback [9] $end
$var wire 1 c# writeback [8] $end
$var wire 1 d# writeback [7] $end
$var wire 1 e# writeback [6] $end
$var wire 1 f# writeback [5] $end
$var wire 1 g# writeback [4] $end
$var wire 1 h# writeback [3] $end
$var wire 1 i# writeback [2] $end
$var wire 1 j# writeback [1] $end
$var wire 1 k# writeback [0] $end
$var wire 1 l# Write_Back_Sel $end
$var wire 1 m# createDump $end
$var wire 1 n# Imm_Sign $end
$var wire 1 o# halted $end
<<<<<<< HEAD
$scope module processor_control $end
$var wire 1 L# OP_Code [4] $end
$var wire 1 M# OP_Code [3] $end
$var wire 1 N# OP_Code [2] $end
$var wire 1 O# OP_Code [1] $end
$var wire 1 P# OP_Code [0] $end
$var wire 1 Z# OP_Min [1] $end
$var wire 1 [# OP_Min [0] $end
$var reg 1 p# PC_Write $end
$var reg 3 q# PC_Code [2:0] $end
$var reg 2 r# Comp_Code [1:0] $end
$var reg 1 s# Write_Back_Sel $end
$var reg 1 t# Mem_Write $end
$var reg 1 u# Mem_Read $end
$var reg 4 v# ALU_OP_Code [3:0] $end
$var reg 1 w# ALU_B_Src $end
$var reg 1 x# Reg_Write $end
$var reg 2 y# Write_Reg_Sel [1:0] $end
$var reg 1 z# createDump $end
$var reg 1 {# Imm_Sign $end
$var reg 1 |# halted $end
=======
$var wire 1 p# ZF $end
$scope module processor_control $end
$var wire 1 W# OP_Code [4] $end
$var wire 1 X# OP_Code [3] $end
$var wire 1 Y# OP_Code [2] $end
$var wire 1 Z# OP_Code [1] $end
$var wire 1 [# OP_Code [0] $end
$var wire 1 Z# OP_Min [1] $end
$var wire 1 [# OP_Min [0] $end
$var reg 1 q# PC_Write $end
$var reg 3 r# PC_Code [2:0] $end
$var reg 2 s# Comp_Code [1:0] $end
$var reg 1 t# Write_Back_Sel $end
$var reg 1 u# Mem_Write $end
$var reg 1 v# Mem_Read $end
$var reg 4 w# ALU_OP_Code [3:0] $end
$var reg 1 x# ALU_B_Src $end
$var reg 1 y# Reg_Write $end
$var reg 2 z# Write_Reg_Sel [1:0] $end
$var reg 1 {# createDump $end
$var reg 1 |# Imm_Sign $end
$var reg 1 }# halted $end
>>>>>>> 2e640e2555e217a06b6c352cc5c5f6091e568d2d
$upscope $end
$scope module pc_logic $end
$var wire 1 H" Curr_PC [15] $end
$var wire 1 I" Curr_PC [14] $end
$var wire 1 J" Curr_PC [13] $end
$var wire 1 K" Curr_PC [12] $end
$var wire 1 L" Curr_PC [11] $end
$var wire 1 M" Curr_PC [10] $end
$var wire 1 N" Curr_PC [9] $end
$var wire 1 O" Curr_PC [8] $end
$var wire 1 P" Curr_PC [7] $end
$var wire 1 Q" Curr_PC [6] $end
$var wire 1 R" Curr_PC [5] $end
$var wire 1 S" Curr_PC [4] $end
$var wire 1 T" Curr_PC [3] $end
$var wire 1 U" Curr_PC [2] $end
$var wire 1 V" Curr_PC [1] $end
$var wire 1 W" Curr_PC [0] $end
$var wire 1 ,# Im8 [15] $end
$var wire 1 -# Im8 [14] $end
$var wire 1 .# Im8 [13] $end
$var wire 1 /# Im8 [12] $end
$var wire 1 0# Im8 [11] $end
$var wire 1 1# Im8 [10] $end
$var wire 1 2# Im8 [9] $end
$var wire 1 3# Im8 [8] $end
$var wire 1 4# Im8 [7] $end
$var wire 1 5# Im8 [6] $end
$var wire 1 6# Im8 [5] $end
$var wire 1 7# Im8 [4] $end
$var wire 1 8# Im8 [3] $end
$var wire 1 9# Im8 [2] $end
$var wire 1 :# Im8 [1] $end
$var wire 1 ;# Im8 [0] $end
$var wire 1 <# Dis [15] $end
$var wire 1 =# Dis [14] $end
$var wire 1 ># Dis [13] $end
$var wire 1 ?# Dis [12] $end
$var wire 1 @# Dis [11] $end
$var wire 1 A# Dis [10] $end
$var wire 1 B# Dis [9] $end
$var wire 1 C# Dis [8] $end
$var wire 1 D# Dis [7] $end
$var wire 1 E# Dis [6] $end
$var wire 1 F# Dis [5] $end
$var wire 1 G# Dis [4] $end
$var wire 1 H# Dis [3] $end
$var wire 1 I# Dis [2] $end
$var wire 1 J# Dis [1] $end
$var wire 1 K# Dis [0] $end
$var wire 1 `! Rs [15] $end
$var wire 1 a! Rs [14] $end
$var wire 1 b! Rs [13] $end
$var wire 1 c! Rs [12] $end
$var wire 1 d! Rs [11] $end
$var wire 1 e! Rs [10] $end
$var wire 1 f! Rs [9] $end
$var wire 1 g! Rs [8] $end
$var wire 1 h! Rs [7] $end
$var wire 1 i! Rs [6] $end
$var wire 1 j! Rs [5] $end
$var wire 1 k! Rs [4] $end
$var wire 1 l! Rs [3] $end
$var wire 1 m! Rs [2] $end
$var wire 1 n! Rs [1] $end
$var wire 1 o! Rs [0] $end
$var wire 1 4" PC_Code [2] $end
$var wire 1 5" PC_Code [1] $end
$var wire 1 6" PC_Code [0] $end
$var wire 1 X" Comp_Code [1] $end
$var wire 1 Y" Comp_Code [0] $end
$var wire 1 Y! EQ $end
$var wire 1 X! LT $end
$var wire 1 Z" PC2 [15] $end
$var wire 1 [" PC2 [14] $end
$var wire 1 \" PC2 [13] $end
$var wire 1 ]" PC2 [12] $end
$var wire 1 ^" PC2 [11] $end
$var wire 1 _" PC2 [10] $end
$var wire 1 `" PC2 [9] $end
$var wire 1 a" PC2 [8] $end
$var wire 1 b" PC2 [7] $end
$var wire 1 c" PC2 [6] $end
$var wire 1 d" PC2 [5] $end
$var wire 1 e" PC2 [4] $end
$var wire 1 f" PC2 [3] $end
$var wire 1 g" PC2 [2] $end
$var wire 1 h" PC2 [1] $end
$var wire 1 i" PC2 [0] $end
$var wire 1 8" Nxt_PC [15] $end
$var wire 1 9" Nxt_PC [14] $end
$var wire 1 :" Nxt_PC [13] $end
$var wire 1 ;" Nxt_PC [12] $end
$var wire 1 <" Nxt_PC [11] $end
$var wire 1 =" Nxt_PC [10] $end
$var wire 1 >" Nxt_PC [9] $end
$var wire 1 ?" Nxt_PC [8] $end
$var wire 1 @" Nxt_PC [7] $end
$var wire 1 A" Nxt_PC [6] $end
$var wire 1 B" Nxt_PC [5] $end
$var wire 1 C" Nxt_PC [4] $end
$var wire 1 D" Nxt_PC [3] $end
$var wire 1 E" Nxt_PC [2] $end
$var wire 1 F" Nxt_PC [1] $end
$var wire 1 G" Nxt_PC [0] $end
<<<<<<< HEAD
$var reg 16 }# A_in [15:0] $end
$var reg 16 ~# B_in [15:0] $end
$var reg 1 !$ branch $end
$var wire 1 "$ result [15] $end
$var wire 1 #$ result [14] $end
$var wire 1 $$ result [13] $end
$var wire 1 %$ result [12] $end
$var wire 1 &$ result [11] $end
$var wire 1 '$ result [10] $end
$var wire 1 ($ result [9] $end
$var wire 1 )$ result [8] $end
$var wire 1 *$ result [7] $end
$var wire 1 +$ result [6] $end
$var wire 1 ,$ result [5] $end
$var wire 1 -$ result [4] $end
$var wire 1 .$ result [3] $end
$var wire 1 /$ result [2] $end
$var wire 1 0$ result [1] $end
$var wire 1 1$ result [0] $end
$var reg 16 2$ case_out [15:0] $end
$scope module adder $end
$var wire 1 3$ A [15] $end
$var wire 1 4$ A [14] $end
$var wire 1 5$ A [13] $end
$var wire 1 6$ A [12] $end
$var wire 1 7$ A [11] $end
$var wire 1 8$ A [10] $end
$var wire 1 9$ A [9] $end
$var wire 1 :$ A [8] $end
$var wire 1 ;$ A [7] $end
$var wire 1 <$ A [6] $end
$var wire 1 =$ A [5] $end
$var wire 1 >$ A [4] $end
$var wire 1 ?$ A [3] $end
$var wire 1 @$ A [2] $end
$var wire 1 A$ A [1] $end
$var wire 1 B$ A [0] $end
$var wire 1 C$ B [15] $end
$var wire 1 D$ B [14] $end
$var wire 1 E$ B [13] $end
$var wire 1 F$ B [12] $end
$var wire 1 G$ B [11] $end
$var wire 1 H$ B [10] $end
$var wire 1 I$ B [9] $end
$var wire 1 J$ B [8] $end
$var wire 1 K$ B [7] $end
$var wire 1 L$ B [6] $end
$var wire 1 M$ B [5] $end
$var wire 1 N$ B [4] $end
$var wire 1 O$ B [3] $end
$var wire 1 P$ B [2] $end
$var wire 1 Q$ B [1] $end
$var wire 1 R$ B [0] $end
$var wire 1 S$ Ci $end
$var wire 1 "$ S [15] $end
$var wire 1 #$ S [14] $end
$var wire 1 $$ S [13] $end
$var wire 1 %$ S [12] $end
$var wire 1 &$ S [11] $end
$var wire 1 '$ S [10] $end
$var wire 1 ($ S [9] $end
$var wire 1 )$ S [8] $end
$var wire 1 *$ S [7] $end
$var wire 1 +$ S [6] $end
$var wire 1 ,$ S [5] $end
$var wire 1 -$ S [4] $end
$var wire 1 .$ S [3] $end
$var wire 1 /$ S [2] $end
$var wire 1 0$ S [1] $end
$var wire 1 1$ S [0] $end
$var wire 1 T$ Co $end
$var wire 1 U$ prop [3] $end
$var wire 1 V$ prop [2] $end
$var wire 1 W$ prop [1] $end
$var wire 1 X$ prop [0] $end
$var wire 1 Y$ gen [3] $end
$var wire 1 Z$ gen [2] $end
$var wire 1 [$ gen [1] $end
$var wire 1 \$ gen [0] $end
$var wire 1 ]$ C1 $end
$var wire 1 ^$ C2 $end
$var wire 1 _$ C3 $end
$var wire 1 `$ C4 $end
$scope module mod0 $end
$var wire 1 ?$ A [3] $end
$var wire 1 @$ A [2] $end
$var wire 1 A$ A [1] $end
$var wire 1 B$ A [0] $end
$var wire 1 O$ B [3] $end
$var wire 1 P$ B [2] $end
$var wire 1 Q$ B [1] $end
$var wire 1 R$ B [0] $end
$var wire 1 S$ Ci $end
$var wire 1 .$ S [3] $end
$var wire 1 /$ S [2] $end
$var wire 1 0$ S [1] $end
$var wire 1 1$ S [0] $end
$var wire 1 X$ P $end
$var wire 1 \$ G $end
$var wire 1 a$ prop [3] $end
$var wire 1 b$ prop [2] $end
$var wire 1 c$ prop [1] $end
$var wire 1 d$ prop [0] $end
$var wire 1 e$ gen [3] $end
$var wire 1 f$ gen [2] $end
$var wire 1 g$ gen [1] $end
$var wire 1 h$ gen [0] $end
$var wire 1 i$ C1 $end
$var wire 1 j$ C2 $end
$var wire 1 k$ C3 $end
$scope module FA_mod0 $end
$var wire 1 B$ A $end
$var wire 1 R$ B $end
$var wire 1 S$ Ci $end
$var wire 1 d$ P $end
$var wire 1 h$ G $end
$var wire 1 1$ S $end
$upscope $end
$scope module FA_mod1 $end
$var wire 1 A$ A $end
$var wire 1 Q$ B $end
$var wire 1 i$ Ci $end
$var wire 1 c$ P $end
$var wire 1 g$ G $end
$var wire 1 0$ S $end
$upscope $end
$scope module FA_mod2 $end
$var wire 1 @$ A $end
$var wire 1 P$ B $end
$var wire 1 j$ Ci $end
$var wire 1 b$ P $end
$var wire 1 f$ G $end
$var wire 1 /$ S $end
$upscope $end
$scope module FA_mod3 $end
$var wire 1 ?$ A $end
$var wire 1 O$ B $end
$var wire 1 k$ Ci $end
$var wire 1 a$ P $end
$var wire 1 e$ G $end
$var wire 1 .$ S $end
$upscope $end
$upscope $end
$scope module mod1 $end
$var wire 1 ;$ A [3] $end
$var wire 1 <$ A [2] $end
$var wire 1 =$ A [1] $end
$var wire 1 >$ A [0] $end
$var wire 1 K$ B [3] $end
$var wire 1 L$ B [2] $end
$var wire 1 M$ B [1] $end
$var wire 1 N$ B [0] $end
$var wire 1 ]$ Ci $end
$var wire 1 *$ S [3] $end
$var wire 1 +$ S [2] $end
$var wire 1 ,$ S [1] $end
$var wire 1 -$ S [0] $end
$var wire 1 W$ P $end
$var wire 1 [$ G $end
$var wire 1 l$ prop [3] $end
$var wire 1 m$ prop [2] $end
$var wire 1 n$ prop [1] $end
$var wire 1 o$ prop [0] $end
$var wire 1 p$ gen [3] $end
$var wire 1 q$ gen [2] $end
$var wire 1 r$ gen [1] $end
$var wire 1 s$ gen [0] $end
$var wire 1 t$ C1 $end
$var wire 1 u$ C2 $end
$var wire 1 v$ C3 $end
$scope module FA_mod0 $end
$var wire 1 >$ A $end
$var wire 1 N$ B $end
$var wire 1 ]$ Ci $end
$var wire 1 o$ P $end
$var wire 1 s$ G $end
$var wire 1 -$ S $end
$upscope $end
$scope module FA_mod1 $end
$var wire 1 =$ A $end
$var wire 1 M$ B $end
$var wire 1 t$ Ci $end
$var wire 1 n$ P $end
$var wire 1 r$ G $end
$var wire 1 ,$ S $end
$upscope $end
$scope module FA_mod2 $end
$var wire 1 <$ A $end
$var wire 1 L$ B $end
$var wire 1 u$ Ci $end
$var wire 1 m$ P $end
$var wire 1 q$ G $end
$var wire 1 +$ S $end
$upscope $end
$scope module FA_mod3 $end
$var wire 1 ;$ A $end
$var wire 1 K$ B $end
$var wire 1 v$ Ci $end
$var wire 1 l$ P $end
$var wire 1 p$ G $end
$var wire 1 *$ S $end
$upscope $end
$upscope $end
$scope module mod2 $end
$var wire 1 7$ A [3] $end
$var wire 1 8$ A [2] $end
$var wire 1 9$ A [1] $end
$var wire 1 :$ A [0] $end
$var wire 1 G$ B [3] $end
$var wire 1 H$ B [2] $end
$var wire 1 I$ B [1] $end
$var wire 1 J$ B [0] $end
$var wire 1 ^$ Ci $end
$var wire 1 &$ S [3] $end
$var wire 1 '$ S [2] $end
$var wire 1 ($ S [1] $end
$var wire 1 )$ S [0] $end
$var wire 1 V$ P $end
$var wire 1 Z$ G $end
$var wire 1 w$ prop [3] $end
$var wire 1 x$ prop [2] $end
$var wire 1 y$ prop [1] $end
$var wire 1 z$ prop [0] $end
$var wire 1 {$ gen [3] $end
$var wire 1 |$ gen [2] $end
$var wire 1 }$ gen [1] $end
$var wire 1 ~$ gen [0] $end
$var wire 1 !% C1 $end
$var wire 1 "% C2 $end
$var wire 1 #% C3 $end
$scope module FA_mod0 $end
$var wire 1 :$ A $end
$var wire 1 J$ B $end
$var wire 1 ^$ Ci $end
$var wire 1 z$ P $end
$var wire 1 ~$ G $end
$var wire 1 )$ S $end
$upscope $end
$scope module FA_mod1 $end
$var wire 1 9$ A $end
$var wire 1 I$ B $end
$var wire 1 !% Ci $end
$var wire 1 y$ P $end
$var wire 1 }$ G $end
$var wire 1 ($ S $end
$upscope $end
$scope module FA_mod2 $end
$var wire 1 8$ A $end
$var wire 1 H$ B $end
$var wire 1 "% Ci $end
$var wire 1 x$ P $end
$var wire 1 |$ G $end
$var wire 1 '$ S $end
$upscope $end
$scope module FA_mod3 $end
$var wire 1 7$ A $end
$var wire 1 G$ B $end
$var wire 1 #% Ci $end
$var wire 1 w$ P $end
$var wire 1 {$ G $end
$var wire 1 &$ S $end
$upscope $end
$upscope $end
$scope module mod3 $end
$var wire 1 3$ A [3] $end
$var wire 1 4$ A [2] $end
$var wire 1 5$ A [1] $end
$var wire 1 6$ A [0] $end
$var wire 1 C$ B [3] $end
$var wire 1 D$ B [2] $end
$var wire 1 E$ B [1] $end
$var wire 1 F$ B [0] $end
$var wire 1 _$ Ci $end
$var wire 1 "$ S [3] $end
$var wire 1 #$ S [2] $end
$var wire 1 $$ S [1] $end
$var wire 1 %$ S [0] $end
$var wire 1 U$ P $end
$var wire 1 Y$ G $end
$var wire 1 $% prop [3] $end
$var wire 1 %% prop [2] $end
$var wire 1 &% prop [1] $end
$var wire 1 '% prop [0] $end
$var wire 1 (% gen [3] $end
$var wire 1 )% gen [2] $end
$var wire 1 *% gen [1] $end
$var wire 1 +% gen [0] $end
$var wire 1 ,% C1 $end
$var wire 1 -% C2 $end
$var wire 1 .% C3 $end
$scope module FA_mod0 $end
$var wire 1 6$ A $end
$var wire 1 F$ B $end
$var wire 1 _$ Ci $end
$var wire 1 '% P $end
$var wire 1 +% G $end
$var wire 1 %$ S $end
$upscope $end
$scope module FA_mod1 $end
$var wire 1 5$ A $end
$var wire 1 E$ B $end
$var wire 1 ,% Ci $end
$var wire 1 &% P $end
$var wire 1 *% G $end
$var wire 1 $$ S $end
$upscope $end
$scope module FA_mod2 $end
$var wire 1 4$ A $end
$var wire 1 D$ B $end
$var wire 1 -% Ci $end
$var wire 1 %% P $end
$var wire 1 )% G $end
$var wire 1 #$ S $end
$upscope $end
$scope module FA_mod3 $end
$var wire 1 3$ A $end
$var wire 1 C$ B $end
$var wire 1 .% Ci $end
$var wire 1 $% P $end
$var wire 1 (% G $end
$var wire 1 "$ S $end
=======
$var reg 16 ~# A_in [15:0] $end
$var reg 16 !$ B_in [15:0] $end
$var reg 1 "$ branch $end
$var wire 1 #$ result [15] $end
$var wire 1 $$ result [14] $end
$var wire 1 %$ result [13] $end
$var wire 1 &$ result [12] $end
$var wire 1 '$ result [11] $end
$var wire 1 ($ result [10] $end
$var wire 1 )$ result [9] $end
$var wire 1 *$ result [8] $end
$var wire 1 +$ result [7] $end
$var wire 1 ,$ result [6] $end
$var wire 1 -$ result [5] $end
$var wire 1 .$ result [4] $end
$var wire 1 /$ result [3] $end
$var wire 1 0$ result [2] $end
$var wire 1 1$ result [1] $end
$var wire 1 2$ result [0] $end
$var reg 16 3$ case_out [15:0] $end
$scope module adder $end
$var wire 1 4$ A [15] $end
$var wire 1 5$ A [14] $end
$var wire 1 6$ A [13] $end
$var wire 1 7$ A [12] $end
$var wire 1 8$ A [11] $end
$var wire 1 9$ A [10] $end
$var wire 1 :$ A [9] $end
$var wire 1 ;$ A [8] $end
$var wire 1 <$ A [7] $end
$var wire 1 =$ A [6] $end
$var wire 1 >$ A [5] $end
$var wire 1 ?$ A [4] $end
$var wire 1 @$ A [3] $end
$var wire 1 A$ A [2] $end
$var wire 1 B$ A [1] $end
$var wire 1 C$ A [0] $end
$var wire 1 D$ B [15] $end
$var wire 1 E$ B [14] $end
$var wire 1 F$ B [13] $end
$var wire 1 G$ B [12] $end
$var wire 1 H$ B [11] $end
$var wire 1 I$ B [10] $end
$var wire 1 J$ B [9] $end
$var wire 1 K$ B [8] $end
$var wire 1 L$ B [7] $end
$var wire 1 M$ B [6] $end
$var wire 1 N$ B [5] $end
$var wire 1 O$ B [4] $end
$var wire 1 P$ B [3] $end
$var wire 1 Q$ B [2] $end
$var wire 1 R$ B [1] $end
$var wire 1 S$ B [0] $end
$var wire 1 T$ Cin $end
$var wire 1 #$ S [15] $end
$var wire 1 $$ S [14] $end
$var wire 1 %$ S [13] $end
$var wire 1 &$ S [12] $end
$var wire 1 '$ S [11] $end
$var wire 1 ($ S [10] $end
$var wire 1 )$ S [9] $end
$var wire 1 *$ S [8] $end
$var wire 1 +$ S [7] $end
$var wire 1 ,$ S [6] $end
$var wire 1 -$ S [5] $end
$var wire 1 .$ S [4] $end
$var wire 1 /$ S [3] $end
$var wire 1 0$ S [2] $end
$var wire 1 1$ S [1] $end
$var wire 1 2$ S [0] $end
$var wire 1 U$ Cout $end
$var wire 1 V$ g0 $end
$var wire 1 W$ g1 $end
$var wire 1 X$ g2 $end
$var wire 1 Y$ g3 $end
$var wire 1 Z$ p0 $end
$var wire 1 [$ p1 $end
$var wire 1 \$ p2 $end
$var wire 1 ]$ p3 $end
$var wire 1 ^$ c1 $end
$var wire 1 _$ c2 $end
$var wire 1 `$ c3 $end
$scope module claMod1 $end
$var wire 1 @$ A [3] $end
$var wire 1 A$ A [2] $end
$var wire 1 B$ A [1] $end
$var wire 1 C$ A [0] $end
$var wire 1 P$ B [3] $end
$var wire 1 Q$ B [2] $end
$var wire 1 R$ B [1] $end
$var wire 1 S$ B [0] $end
$var wire 1 T$ Cin $end
$var wire 1 /$ S [3] $end
$var wire 1 0$ S [2] $end
$var wire 1 1$ S [1] $end
$var wire 1 2$ S [0] $end
$var wire 1 V$ G $end
$var wire 1 Z$ P $end
$var wire 1 a$ g0 $end
$var wire 1 b$ g1 $end
$var wire 1 c$ g2 $end
$var wire 1 d$ g3 $end
$var wire 1 e$ p1 $end
$var wire 1 f$ p2 $end
$var wire 1 g$ p3 $end
$var wire 1 h$ c2 $end
$var wire 1 i$ c3 $end
$var wire 1 j$ p0 $end
$var wire 1 k$ c1 $end
$scope module fa1 $end
$var wire 1 C$ A $end
$var wire 1 S$ B $end
$var wire 1 T$ Cin $end
$var wire 1 2$ S $end
$var wire 1 l$ Cout $end
$var wire 1 m$ abSum $end
$var wire 1 n$ abSumAndCin $end
$var wire 1 o$ abSumAndCinInv $end
$var wire 1 p$ abCarry $end
$var wire 1 q$ abCarryIn $end
$var wire 1 r$ carryAnd $end
$var wire 1 s$ abCarryInv $end
$scope module xorMod1 $end
$var wire 1 C$ in1 $end
$var wire 1 S$ in2 $end
$var wire 1 m$ out $end
$upscope $end
$scope module xorMod2 $end
$var wire 1 m$ in1 $end
$var wire 1 T$ in2 $end
$var wire 1 2$ out $end
$upscope $end
$scope module nandMod1 $end
$var wire 1 m$ in1 $end
$var wire 1 T$ in2 $end
$var wire 1 n$ out $end
$upscope $end
$scope module notMod1 $end
$var wire 1 n$ in1 $end
$var wire 1 o$ out $end
$upscope $end
$scope module nandMod2 $end
$var wire 1 C$ in1 $end
$var wire 1 S$ in2 $end
$var wire 1 p$ out $end
$upscope $end
$scope module notMod2 $end
$var wire 1 p$ in1 $end
$var wire 1 s$ out $end
$upscope $end
$scope module norMod1 $end
$var wire 1 o$ in1 $end
$var wire 1 s$ in2 $end
$var wire 1 r$ out $end
$upscope $end
$scope module notMod3 $end
$var wire 1 r$ in1 $end
$var wire 1 l$ out $end
$upscope $end
$upscope $end
$scope module fa2 $end
$var wire 1 B$ A $end
$var wire 1 R$ B $end
$var wire 1 k$ Cin $end
$var wire 1 1$ S $end
$var wire 1 t$ Cout $end
$var wire 1 u$ abSum $end
$var wire 1 v$ abSumAndCin $end
$var wire 1 w$ abSumAndCinInv $end
$var wire 1 x$ abCarry $end
$var wire 1 y$ abCarryIn $end
$var wire 1 z$ carryAnd $end
$var wire 1 {$ abCarryInv $end
$scope module xorMod1 $end
$var wire 1 B$ in1 $end
$var wire 1 R$ in2 $end
$var wire 1 u$ out $end
$upscope $end
$scope module xorMod2 $end
$var wire 1 u$ in1 $end
$var wire 1 k$ in2 $end
$var wire 1 1$ out $end
$upscope $end
$scope module nandMod1 $end
$var wire 1 u$ in1 $end
$var wire 1 k$ in2 $end
$var wire 1 v$ out $end
$upscope $end
$scope module notMod1 $end
$var wire 1 v$ in1 $end
$var wire 1 w$ out $end
$upscope $end
$scope module nandMod2 $end
$var wire 1 B$ in1 $end
$var wire 1 R$ in2 $end
$var wire 1 x$ out $end
$upscope $end
$scope module notMod2 $end
$var wire 1 x$ in1 $end
$var wire 1 {$ out $end
$upscope $end
$scope module norMod1 $end
$var wire 1 w$ in1 $end
$var wire 1 {$ in2 $end
$var wire 1 z$ out $end
$upscope $end
$scope module notMod3 $end
$var wire 1 z$ in1 $end
$var wire 1 t$ out $end
$upscope $end
$upscope $end
$scope module fa3 $end
$var wire 1 A$ A $end
$var wire 1 Q$ B $end
$var wire 1 h$ Cin $end
$var wire 1 0$ S $end
$var wire 1 |$ Cout $end
$var wire 1 }$ abSum $end
$var wire 1 ~$ abSumAndCin $end
$var wire 1 !% abSumAndCinInv $end
$var wire 1 "% abCarry $end
$var wire 1 #% abCarryIn $end
$var wire 1 $% carryAnd $end
$var wire 1 %% abCarryInv $end
$scope module xorMod1 $end
$var wire 1 A$ in1 $end
$var wire 1 Q$ in2 $end
$var wire 1 }$ out $end
$upscope $end
$scope module xorMod2 $end
$var wire 1 }$ in1 $end
$var wire 1 h$ in2 $end
$var wire 1 0$ out $end
$upscope $end
$scope module nandMod1 $end
$var wire 1 }$ in1 $end
$var wire 1 h$ in2 $end
$var wire 1 ~$ out $end
$upscope $end
$scope module notMod1 $end
$var wire 1 ~$ in1 $end
$var wire 1 !% out $end
$upscope $end
$scope module nandMod2 $end
$var wire 1 A$ in1 $end
$var wire 1 Q$ in2 $end
$var wire 1 "% out $end
$upscope $end
$scope module notMod2 $end
$var wire 1 "% in1 $end
$var wire 1 %% out $end
$upscope $end
$scope module norMod1 $end
$var wire 1 !% in1 $end
$var wire 1 %% in2 $end
$var wire 1 $% out $end
$upscope $end
$scope module notMod3 $end
$var wire 1 $% in1 $end
$var wire 1 |$ out $end
$upscope $end
$upscope $end
$scope module fa4 $end
$var wire 1 @$ A $end
$var wire 1 P$ B $end
$var wire 1 i$ Cin $end
$var wire 1 /$ S $end
$var wire 1 &% Cout $end
$var wire 1 '% abSum $end
$var wire 1 (% abSumAndCin $end
$var wire 1 )% abSumAndCinInv $end
$var wire 1 *% abCarry $end
$var wire 1 +% abCarryIn $end
$var wire 1 ,% carryAnd $end
$var wire 1 -% abCarryInv $end
$scope module xorMod1 $end
$var wire 1 @$ in1 $end
$var wire 1 P$ in2 $end
$var wire 1 '% out $end
$upscope $end
$scope module xorMod2 $end
$var wire 1 '% in1 $end
$var wire 1 i$ in2 $end
$var wire 1 /$ out $end
$upscope $end
$scope module nandMod1 $end
$var wire 1 '% in1 $end
$var wire 1 i$ in2 $end
$var wire 1 (% out $end
$upscope $end
$scope module notMod1 $end
$var wire 1 (% in1 $end
$var wire 1 )% out $end
$upscope $end
$scope module nandMod2 $end
$var wire 1 @$ in1 $end
$var wire 1 P$ in2 $end
$var wire 1 *% out $end
$upscope $end
$scope module notMod2 $end
$var wire 1 *% in1 $end
$var wire 1 -% out $end
$upscope $end
$scope module norMod1 $end
$var wire 1 )% in1 $end
$var wire 1 -% in2 $end
$var wire 1 ,% out $end
$upscope $end
$scope module notMod3 $end
$var wire 1 ,% in1 $end
$var wire 1 &% out $end
$upscope $end
$upscope $end
$upscope $end
$scope module claMod2 $end
$var wire 1 <$ A [3] $end
$var wire 1 =$ A [2] $end
$var wire 1 >$ A [1] $end
$var wire 1 ?$ A [0] $end
$var wire 1 L$ B [3] $end
$var wire 1 M$ B [2] $end
$var wire 1 N$ B [1] $end
$var wire 1 O$ B [0] $end
$var wire 1 ^$ Cin $end
$var wire 1 +$ S [3] $end
$var wire 1 ,$ S [2] $end
$var wire 1 -$ S [1] $end
$var wire 1 .$ S [0] $end
$var wire 1 W$ G $end
$var wire 1 [$ P $end
$var wire 1 .% g0 $end
$var wire 1 /% g1 $end
$var wire 1 0% g2 $end
$var wire 1 1% g3 $end
$var wire 1 2% p1 $end
$var wire 1 3% p2 $end
$var wire 1 4% p3 $end
$var wire 1 5% c2 $end
$var wire 1 6% c3 $end
$var wire 1 7% p0 $end
$var wire 1 8% c1 $end
$scope module fa1 $end
$var wire 1 ?$ A $end
$var wire 1 O$ B $end
$var wire 1 ^$ Cin $end
$var wire 1 .$ S $end
$var wire 1 9% Cout $end
$var wire 1 :% abSum $end
$var wire 1 ;% abSumAndCin $end
$var wire 1 <% abSumAndCinInv $end
$var wire 1 =% abCarry $end
$var wire 1 >% abCarryIn $end
$var wire 1 ?% carryAnd $end
$var wire 1 @% abCarryInv $end
$scope module xorMod1 $end
$var wire 1 ?$ in1 $end
$var wire 1 O$ in2 $end
$var wire 1 :% out $end
$upscope $end
$scope module xorMod2 $end
$var wire 1 :% in1 $end
$var wire 1 ^$ in2 $end
$var wire 1 .$ out $end
$upscope $end
$scope module nandMod1 $end
$var wire 1 :% in1 $end
$var wire 1 ^$ in2 $end
$var wire 1 ;% out $end
$upscope $end
$scope module notMod1 $end
$var wire 1 ;% in1 $end
$var wire 1 <% out $end
$upscope $end
$scope module nandMod2 $end
$var wire 1 ?$ in1 $end
$var wire 1 O$ in2 $end
$var wire 1 =% out $end
$upscope $end
$scope module notMod2 $end
$var wire 1 =% in1 $end
$var wire 1 @% out $end
$upscope $end
$scope module norMod1 $end
$var wire 1 <% in1 $end
$var wire 1 @% in2 $end
$var wire 1 ?% out $end
$upscope $end
$scope module notMod3 $end
$var wire 1 ?% in1 $end
$var wire 1 9% out $end
$upscope $end
$upscope $end
$scope module fa2 $end
$var wire 1 >$ A $end
$var wire 1 N$ B $end
$var wire 1 8% Cin $end
$var wire 1 -$ S $end
$var wire 1 A% Cout $end
$var wire 1 B% abSum $end
$var wire 1 C% abSumAndCin $end
$var wire 1 D% abSumAndCinInv $end
$var wire 1 E% abCarry $end
$var wire 1 F% abCarryIn $end
$var wire 1 G% carryAnd $end
$var wire 1 H% abCarryInv $end
$scope module xorMod1 $end
$var wire 1 >$ in1 $end
$var wire 1 N$ in2 $end
$var wire 1 B% out $end
$upscope $end
$scope module xorMod2 $end
$var wire 1 B% in1 $end
$var wire 1 8% in2 $end
$var wire 1 -$ out $end
$upscope $end
$scope module nandMod1 $end
$var wire 1 B% in1 $end
$var wire 1 8% in2 $end
$var wire 1 C% out $end
$upscope $end
$scope module notMod1 $end
$var wire 1 C% in1 $end
$var wire 1 D% out $end
$upscope $end
$scope module nandMod2 $end
$var wire 1 >$ in1 $end
$var wire 1 N$ in2 $end
$var wire 1 E% out $end
$upscope $end
$scope module notMod2 $end
$var wire 1 E% in1 $end
$var wire 1 H% out $end
$upscope $end
$scope module norMod1 $end
$var wire 1 D% in1 $end
$var wire 1 H% in2 $end
$var wire 1 G% out $end
$upscope $end
$scope module notMod3 $end
$var wire 1 G% in1 $end
$var wire 1 A% out $end
$upscope $end
$upscope $end
$scope module fa3 $end
$var wire 1 =$ A $end
$var wire 1 M$ B $end
$var wire 1 5% Cin $end
$var wire 1 ,$ S $end
$var wire 1 I% Cout $end
$var wire 1 J% abSum $end
$var wire 1 K% abSumAndCin $end
$var wire 1 L% abSumAndCinInv $end
$var wire 1 M% abCarry $end
$var wire 1 N% abCarryIn $end
$var wire 1 O% carryAnd $end
$var wire 1 P% abCarryInv $end
$scope module xorMod1 $end
$var wire 1 =$ in1 $end
$var wire 1 M$ in2 $end
$var wire 1 J% out $end
$upscope $end
$scope module xorMod2 $end
$var wire 1 J% in1 $end
$var wire 1 5% in2 $end
$var wire 1 ,$ out $end
$upscope $end
$scope module nandMod1 $end
$var wire 1 J% in1 $end
$var wire 1 5% in2 $end
$var wire 1 K% out $end
$upscope $end
$scope module notMod1 $end
$var wire 1 K% in1 $end
$var wire 1 L% out $end
$upscope $end
$scope module nandMod2 $end
$var wire 1 =$ in1 $end
$var wire 1 M$ in2 $end
$var wire 1 M% out $end
$upscope $end
$scope module notMod2 $end
$var wire 1 M% in1 $end
$var wire 1 P% out $end
$upscope $end
$scope module norMod1 $end
$var wire 1 L% in1 $end
$var wire 1 P% in2 $end
$var wire 1 O% out $end
$upscope $end
$scope module notMod3 $end
$var wire 1 O% in1 $end
$var wire 1 I% out $end
$upscope $end
$upscope $end
$scope module fa4 $end
$var wire 1 <$ A $end
$var wire 1 L$ B $end
$var wire 1 6% Cin $end
$var wire 1 +$ S $end
$var wire 1 Q% Cout $end
$var wire 1 R% abSum $end
$var wire 1 S% abSumAndCin $end
$var wire 1 T% abSumAndCinInv $end
$var wire 1 U% abCarry $end
$var wire 1 V% abCarryIn $end
$var wire 1 W% carryAnd $end
$var wire 1 X% abCarryInv $end
$scope module xorMod1 $end
$var wire 1 <$ in1 $end
$var wire 1 L$ in2 $end
$var wire 1 R% out $end
$upscope $end
$scope module xorMod2 $end
$var wire 1 R% in1 $end
$var wire 1 6% in2 $end
$var wire 1 +$ out $end
$upscope $end
$scope module nandMod1 $end
$var wire 1 R% in1 $end
$var wire 1 6% in2 $end
$var wire 1 S% out $end
$upscope $end
$scope module notMod1 $end
$var wire 1 S% in1 $end
$var wire 1 T% out $end
$upscope $end
$scope module nandMod2 $end
$var wire 1 <$ in1 $end
$var wire 1 L$ in2 $end
$var wire 1 U% out $end
$upscope $end
$scope module notMod2 $end
$var wire 1 U% in1 $end
$var wire 1 X% out $end
$upscope $end
$scope module norMod1 $end
$var wire 1 T% in1 $end
$var wire 1 X% in2 $end
$var wire 1 W% out $end
$upscope $end
$scope module notMod3 $end
$var wire 1 W% in1 $end
$var wire 1 Q% out $end
$upscope $end
$upscope $end
$upscope $end
$scope module claMod3 $end
$var wire 1 8$ A [3] $end
$var wire 1 9$ A [2] $end
$var wire 1 :$ A [1] $end
$var wire 1 ;$ A [0] $end
$var wire 1 H$ B [3] $end
$var wire 1 I$ B [2] $end
$var wire 1 J$ B [1] $end
$var wire 1 K$ B [0] $end
$var wire 1 _$ Cin $end
$var wire 1 '$ S [3] $end
$var wire 1 ($ S [2] $end
$var wire 1 )$ S [1] $end
$var wire 1 *$ S [0] $end
$var wire 1 X$ G $end
$var wire 1 \$ P $end
$var wire 1 Y% g0 $end
$var wire 1 Z% g1 $end
$var wire 1 [% g2 $end
$var wire 1 \% g3 $end
$var wire 1 ]% p1 $end
$var wire 1 ^% p2 $end
$var wire 1 _% p3 $end
$var wire 1 `% c2 $end
$var wire 1 a% c3 $end
$var wire 1 b% p0 $end
$var wire 1 c% c1 $end
$scope module fa1 $end
$var wire 1 ;$ A $end
$var wire 1 K$ B $end
$var wire 1 _$ Cin $end
$var wire 1 *$ S $end
$var wire 1 d% Cout $end
$var wire 1 e% abSum $end
$var wire 1 f% abSumAndCin $end
$var wire 1 g% abSumAndCinInv $end
$var wire 1 h% abCarry $end
$var wire 1 i% abCarryIn $end
$var wire 1 j% carryAnd $end
$var wire 1 k% abCarryInv $end
$scope module xorMod1 $end
$var wire 1 ;$ in1 $end
$var wire 1 K$ in2 $end
$var wire 1 e% out $end
$upscope $end
$scope module xorMod2 $end
$var wire 1 e% in1 $end
$var wire 1 _$ in2 $end
$var wire 1 *$ out $end
$upscope $end
$scope module nandMod1 $end
$var wire 1 e% in1 $end
$var wire 1 _$ in2 $end
$var wire 1 f% out $end
$upscope $end
$scope module notMod1 $end
$var wire 1 f% in1 $end
$var wire 1 g% out $end
$upscope $end
$scope module nandMod2 $end
$var wire 1 ;$ in1 $end
$var wire 1 K$ in2 $end
$var wire 1 h% out $end
$upscope $end
$scope module notMod2 $end
$var wire 1 h% in1 $end
$var wire 1 k% out $end
$upscope $end
$scope module norMod1 $end
$var wire 1 g% in1 $end
$var wire 1 k% in2 $end
$var wire 1 j% out $end
$upscope $end
$scope module notMod3 $end
$var wire 1 j% in1 $end
$var wire 1 d% out $end
$upscope $end
$upscope $end
$scope module fa2 $end
$var wire 1 :$ A $end
$var wire 1 J$ B $end
$var wire 1 c% Cin $end
$var wire 1 )$ S $end
$var wire 1 l% Cout $end
$var wire 1 m% abSum $end
$var wire 1 n% abSumAndCin $end
$var wire 1 o% abSumAndCinInv $end
$var wire 1 p% abCarry $end
$var wire 1 q% abCarryIn $end
$var wire 1 r% carryAnd $end
$var wire 1 s% abCarryInv $end
$scope module xorMod1 $end
$var wire 1 :$ in1 $end
$var wire 1 J$ in2 $end
$var wire 1 m% out $end
$upscope $end
$scope module xorMod2 $end
$var wire 1 m% in1 $end
$var wire 1 c% in2 $end
$var wire 1 )$ out $end
$upscope $end
$scope module nandMod1 $end
$var wire 1 m% in1 $end
$var wire 1 c% in2 $end
$var wire 1 n% out $end
$upscope $end
$scope module notMod1 $end
$var wire 1 n% in1 $end
$var wire 1 o% out $end
$upscope $end
$scope module nandMod2 $end
$var wire 1 :$ in1 $end
$var wire 1 J$ in2 $end
$var wire 1 p% out $end
$upscope $end
$scope module notMod2 $end
$var wire 1 p% in1 $end
$var wire 1 s% out $end
$upscope $end
$scope module norMod1 $end
$var wire 1 o% in1 $end
$var wire 1 s% in2 $end
$var wire 1 r% out $end
$upscope $end
$scope module notMod3 $end
$var wire 1 r% in1 $end
$var wire 1 l% out $end
$upscope $end
$upscope $end
$scope module fa3 $end
$var wire 1 9$ A $end
$var wire 1 I$ B $end
$var wire 1 `% Cin $end
$var wire 1 ($ S $end
$var wire 1 t% Cout $end
$var wire 1 u% abSum $end
$var wire 1 v% abSumAndCin $end
$var wire 1 w% abSumAndCinInv $end
$var wire 1 x% abCarry $end
$var wire 1 y% abCarryIn $end
$var wire 1 z% carryAnd $end
$var wire 1 {% abCarryInv $end
$scope module xorMod1 $end
$var wire 1 9$ in1 $end
$var wire 1 I$ in2 $end
$var wire 1 u% out $end
$upscope $end
$scope module xorMod2 $end
$var wire 1 u% in1 $end
$var wire 1 `% in2 $end
$var wire 1 ($ out $end
$upscope $end
$scope module nandMod1 $end
$var wire 1 u% in1 $end
$var wire 1 `% in2 $end
$var wire 1 v% out $end
$upscope $end
$scope module notMod1 $end
$var wire 1 v% in1 $end
$var wire 1 w% out $end
$upscope $end
$scope module nandMod2 $end
$var wire 1 9$ in1 $end
$var wire 1 I$ in2 $end
$var wire 1 x% out $end
$upscope $end
$scope module notMod2 $end
$var wire 1 x% in1 $end
$var wire 1 {% out $end
$upscope $end
$scope module norMod1 $end
$var wire 1 w% in1 $end
$var wire 1 {% in2 $end
$var wire 1 z% out $end
$upscope $end
$scope module notMod3 $end
$var wire 1 z% in1 $end
$var wire 1 t% out $end
$upscope $end
$upscope $end
$scope module fa4 $end
$var wire 1 8$ A $end
$var wire 1 H$ B $end
$var wire 1 a% Cin $end
$var wire 1 '$ S $end
$var wire 1 |% Cout $end
$var wire 1 }% abSum $end
$var wire 1 ~% abSumAndCin $end
$var wire 1 !& abSumAndCinInv $end
$var wire 1 "& abCarry $end
$var wire 1 #& abCarryIn $end
$var wire 1 $& carryAnd $end
$var wire 1 %& abCarryInv $end
$scope module xorMod1 $end
$var wire 1 8$ in1 $end
$var wire 1 H$ in2 $end
$var wire 1 }% out $end
$upscope $end
$scope module xorMod2 $end
$var wire 1 }% in1 $end
$var wire 1 a% in2 $end
$var wire 1 '$ out $end
$upscope $end
$scope module nandMod1 $end
$var wire 1 }% in1 $end
$var wire 1 a% in2 $end
$var wire 1 ~% out $end
$upscope $end
$scope module notMod1 $end
$var wire 1 ~% in1 $end
$var wire 1 !& out $end
$upscope $end
$scope module nandMod2 $end
$var wire 1 8$ in1 $end
$var wire 1 H$ in2 $end
$var wire 1 "& out $end
$upscope $end
$scope module notMod2 $end
$var wire 1 "& in1 $end
$var wire 1 %& out $end
$upscope $end
$scope module norMod1 $end
$var wire 1 !& in1 $end
$var wire 1 %& in2 $end
$var wire 1 $& out $end
$upscope $end
$scope module notMod3 $end
$var wire 1 $& in1 $end
$var wire 1 |% out $end
$upscope $end
$upscope $end
$upscope $end
$scope module claMod4 $end
$var wire 1 4$ A [3] $end
$var wire 1 5$ A [2] $end
$var wire 1 6$ A [1] $end
$var wire 1 7$ A [0] $end
$var wire 1 D$ B [3] $end
$var wire 1 E$ B [2] $end
$var wire 1 F$ B [1] $end
$var wire 1 G$ B [0] $end
$var wire 1 `$ Cin $end
$var wire 1 #$ S [3] $end
$var wire 1 $$ S [2] $end
$var wire 1 %$ S [1] $end
$var wire 1 &$ S [0] $end
$var wire 1 Y$ G $end
$var wire 1 ]$ P $end
$var wire 1 && g0 $end
$var wire 1 '& g1 $end
$var wire 1 (& g2 $end
$var wire 1 )& g3 $end
$var wire 1 *& p1 $end
$var wire 1 +& p2 $end
$var wire 1 ,& p3 $end
$var wire 1 -& c2 $end
$var wire 1 .& c3 $end
$var wire 1 /& p0 $end
$var wire 1 0& c1 $end
$scope module fa1 $end
$var wire 1 7$ A $end
$var wire 1 G$ B $end
$var wire 1 `$ Cin $end
$var wire 1 &$ S $end
$var wire 1 1& Cout $end
$var wire 1 2& abSum $end
$var wire 1 3& abSumAndCin $end
$var wire 1 4& abSumAndCinInv $end
$var wire 1 5& abCarry $end
$var wire 1 6& abCarryIn $end
$var wire 1 7& carryAnd $end
$var wire 1 8& abCarryInv $end
$scope module xorMod1 $end
$var wire 1 7$ in1 $end
$var wire 1 G$ in2 $end
$var wire 1 2& out $end
$upscope $end
$scope module xorMod2 $end
$var wire 1 2& in1 $end
$var wire 1 `$ in2 $end
$var wire 1 &$ out $end
$upscope $end
$scope module nandMod1 $end
$var wire 1 2& in1 $end
$var wire 1 `$ in2 $end
$var wire 1 3& out $end
$upscope $end
$scope module notMod1 $end
$var wire 1 3& in1 $end
$var wire 1 4& out $end
$upscope $end
$scope module nandMod2 $end
$var wire 1 7$ in1 $end
$var wire 1 G$ in2 $end
$var wire 1 5& out $end
$upscope $end
$scope module notMod2 $end
$var wire 1 5& in1 $end
$var wire 1 8& out $end
$upscope $end
$scope module norMod1 $end
$var wire 1 4& in1 $end
$var wire 1 8& in2 $end
$var wire 1 7& out $end
$upscope $end
$scope module notMod3 $end
$var wire 1 7& in1 $end
$var wire 1 1& out $end
$upscope $end
$upscope $end
$scope module fa2 $end
$var wire 1 6$ A $end
$var wire 1 F$ B $end
$var wire 1 0& Cin $end
$var wire 1 %$ S $end
$var wire 1 9& Cout $end
$var wire 1 :& abSum $end
$var wire 1 ;& abSumAndCin $end
$var wire 1 <& abSumAndCinInv $end
$var wire 1 =& abCarry $end
$var wire 1 >& abCarryIn $end
$var wire 1 ?& carryAnd $end
$var wire 1 @& abCarryInv $end
$scope module xorMod1 $end
$var wire 1 6$ in1 $end
$var wire 1 F$ in2 $end
$var wire 1 :& out $end
$upscope $end
$scope module xorMod2 $end
$var wire 1 :& in1 $end
$var wire 1 0& in2 $end
$var wire 1 %$ out $end
$upscope $end
$scope module nandMod1 $end
$var wire 1 :& in1 $end
$var wire 1 0& in2 $end
$var wire 1 ;& out $end
$upscope $end
$scope module notMod1 $end
$var wire 1 ;& in1 $end
$var wire 1 <& out $end
$upscope $end
$scope module nandMod2 $end
$var wire 1 6$ in1 $end
$var wire 1 F$ in2 $end
$var wire 1 =& out $end
$upscope $end
$scope module notMod2 $end
$var wire 1 =& in1 $end
$var wire 1 @& out $end
$upscope $end
$scope module norMod1 $end
$var wire 1 <& in1 $end
$var wire 1 @& in2 $end
$var wire 1 ?& out $end
$upscope $end
$scope module notMod3 $end
$var wire 1 ?& in1 $end
$var wire 1 9& out $end
$upscope $end
$upscope $end
$scope module fa3 $end
$var wire 1 5$ A $end
$var wire 1 E$ B $end
$var wire 1 -& Cin $end
$var wire 1 $$ S $end
$var wire 1 A& Cout $end
$var wire 1 B& abSum $end
$var wire 1 C& abSumAndCin $end
$var wire 1 D& abSumAndCinInv $end
$var wire 1 E& abCarry $end
$var wire 1 F& abCarryIn $end
$var wire 1 G& carryAnd $end
$var wire 1 H& abCarryInv $end
$scope module xorMod1 $end
$var wire 1 5$ in1 $end
$var wire 1 E$ in2 $end
$var wire 1 B& out $end
$upscope $end
$scope module xorMod2 $end
$var wire 1 B& in1 $end
$var wire 1 -& in2 $end
$var wire 1 $$ out $end
$upscope $end
$scope module nandMod1 $end
$var wire 1 B& in1 $end
$var wire 1 -& in2 $end
$var wire 1 C& out $end
$upscope $end
$scope module notMod1 $end
$var wire 1 C& in1 $end
$var wire 1 D& out $end
$upscope $end
$scope module nandMod2 $end
$var wire 1 5$ in1 $end
$var wire 1 E$ in2 $end
$var wire 1 E& out $end
$upscope $end
$scope module notMod2 $end
$var wire 1 E& in1 $end
$var wire 1 H& out $end
$upscope $end
$scope module norMod1 $end
$var wire 1 D& in1 $end
$var wire 1 H& in2 $end
$var wire 1 G& out $end
$upscope $end
$scope module notMod3 $end
$var wire 1 G& in1 $end
$var wire 1 A& out $end
$upscope $end
$upscope $end
$scope module fa4 $end
$var wire 1 4$ A $end
$var wire 1 D$ B $end
$var wire 1 .& Cin $end
$var wire 1 #$ S $end
$var wire 1 I& Cout $end
$var wire 1 J& abSum $end
$var wire 1 K& abSumAndCin $end
$var wire 1 L& abSumAndCinInv $end
$var wire 1 M& abCarry $end
$var wire 1 N& abCarryIn $end
$var wire 1 O& carryAnd $end
$var wire 1 P& abCarryInv $end
$scope module xorMod1 $end
$var wire 1 4$ in1 $end
$var wire 1 D$ in2 $end
$var wire 1 J& out $end
$upscope $end
$scope module xorMod2 $end
$var wire 1 J& in1 $end
$var wire 1 .& in2 $end
$var wire 1 #$ out $end
$upscope $end
$scope module nandMod1 $end
$var wire 1 J& in1 $end
$var wire 1 .& in2 $end
$var wire 1 K& out $end
$upscope $end
$scope module notMod1 $end
$var wire 1 K& in1 $end
$var wire 1 L& out $end
$upscope $end
$scope module nandMod2 $end
$var wire 1 4$ in1 $end
$var wire 1 D$ in2 $end
$var wire 1 M& out $end
$upscope $end
$scope module notMod2 $end
$var wire 1 M& in1 $end
$var wire 1 P& out $end
$upscope $end
$scope module norMod1 $end
$var wire 1 L& in1 $end
$var wire 1 P& in2 $end
$var wire 1 O& out $end
$upscope $end
$scope module notMod3 $end
$var wire 1 O& in1 $end
$var wire 1 I& out $end
$upscope $end
>>>>>>> 2e640e2555e217a06b6c352cc5c5f6091e568d2d
$upscope $end
$upscope $end
$upscope $end
$scope module pc2 $end
$var wire 1 H" Curr_PC [15] $end
$var wire 1 I" Curr_PC [14] $end
$var wire 1 J" Curr_PC [13] $end
$var wire 1 K" Curr_PC [12] $end
$var wire 1 L" Curr_PC [11] $end
$var wire 1 M" Curr_PC [10] $end
$var wire 1 N" Curr_PC [9] $end
$var wire 1 O" Curr_PC [8] $end
$var wire 1 P" Curr_PC [7] $end
$var wire 1 Q" Curr_PC [6] $end
$var wire 1 R" Curr_PC [5] $end
$var wire 1 S" Curr_PC [4] $end
$var wire 1 T" Curr_PC [3] $end
$var wire 1 U" Curr_PC [2] $end
$var wire 1 V" Curr_PC [1] $end
$var wire 1 W" Curr_PC [0] $end
$var wire 1 Z" Inc_PC [15] $end
$var wire 1 [" Inc_PC [14] $end
$var wire 1 \" Inc_PC [13] $end
$var wire 1 ]" Inc_PC [12] $end
$var wire 1 ^" Inc_PC [11] $end
$var wire 1 _" Inc_PC [10] $end
$var wire 1 `" Inc_PC [9] $end
$var wire 1 a" Inc_PC [8] $end
$var wire 1 b" Inc_PC [7] $end
$var wire 1 c" Inc_PC [6] $end
$var wire 1 d" Inc_PC [5] $end
$var wire 1 e" Inc_PC [4] $end
$var wire 1 f" Inc_PC [3] $end
$var wire 1 g" Inc_PC [2] $end
$var wire 1 h" Inc_PC [1] $end
$var wire 1 i" Inc_PC [0] $end
$scope module Adder $end
$var wire 1 H" A [15] $end
$var wire 1 I" A [14] $end
$var wire 1 J" A [13] $end
$var wire 1 K" A [12] $end
$var wire 1 L" A [11] $end
$var wire 1 M" A [10] $end
$var wire 1 N" A [9] $end
$var wire 1 O" A [8] $end
$var wire 1 P" A [7] $end
$var wire 1 Q" A [6] $end
$var wire 1 R" A [5] $end
$var wire 1 S" A [4] $end
$var wire 1 T" A [3] $end
$var wire 1 U" A [2] $end
$var wire 1 V" A [1] $end
$var wire 1 W" A [0] $end
<<<<<<< HEAD
$var wire 1 /% B [15] $end
$var wire 1 0% B [14] $end
$var wire 1 1% B [13] $end
$var wire 1 2% B [12] $end
$var wire 1 3% B [11] $end
$var wire 1 4% B [10] $end
$var wire 1 5% B [9] $end
$var wire 1 6% B [8] $end
$var wire 1 7% B [7] $end
$var wire 1 8% B [6] $end
$var wire 1 9% B [5] $end
$var wire 1 :% B [4] $end
$var wire 1 ;% B [3] $end
$var wire 1 <% B [2] $end
$var wire 1 =% B [1] $end
$var wire 1 >% B [0] $end
$var wire 1 ?% Ci $end
=======
$var wire 1 Q& B [15] $end
$var wire 1 R& B [14] $end
$var wire 1 S& B [13] $end
$var wire 1 T& B [12] $end
$var wire 1 U& B [11] $end
$var wire 1 V& B [10] $end
$var wire 1 W& B [9] $end
$var wire 1 X& B [8] $end
$var wire 1 Y& B [7] $end
$var wire 1 Z& B [6] $end
$var wire 1 [& B [5] $end
$var wire 1 \& B [4] $end
$var wire 1 ]& B [3] $end
$var wire 1 ^& B [2] $end
$var wire 1 _& B [1] $end
$var wire 1 `& B [0] $end
$var wire 1 a& Cin $end
>>>>>>> 2e640e2555e217a06b6c352cc5c5f6091e568d2d
$var wire 1 Z" S [15] $end
$var wire 1 [" S [14] $end
$var wire 1 \" S [13] $end
$var wire 1 ]" S [12] $end
$var wire 1 ^" S [11] $end
$var wire 1 _" S [10] $end
$var wire 1 `" S [9] $end
$var wire 1 a" S [8] $end
$var wire 1 b" S [7] $end
$var wire 1 c" S [6] $end
$var wire 1 d" S [5] $end
$var wire 1 e" S [4] $end
$var wire 1 f" S [3] $end
$var wire 1 g" S [2] $end
$var wire 1 h" S [1] $end
$var wire 1 i" S [0] $end
<<<<<<< HEAD
$var wire 1 @% Co $end
$var wire 1 A% prop [3] $end
$var wire 1 B% prop [2] $end
$var wire 1 C% prop [1] $end
$var wire 1 D% prop [0] $end
$var wire 1 E% gen [3] $end
$var wire 1 F% gen [2] $end
$var wire 1 G% gen [1] $end
$var wire 1 H% gen [0] $end
$var wire 1 I% C1 $end
$var wire 1 J% C2 $end
$var wire 1 K% C3 $end
$var wire 1 L% C4 $end
$scope module mod0 $end
=======
$var wire 1 b& Cout $end
$var wire 1 c& g0 $end
$var wire 1 d& g1 $end
$var wire 1 e& g2 $end
$var wire 1 f& g3 $end
$var wire 1 g& p0 $end
$var wire 1 h& p1 $end
$var wire 1 i& p2 $end
$var wire 1 j& p3 $end
$var wire 1 k& c1 $end
$var wire 1 l& c2 $end
$var wire 1 m& c3 $end
$scope module claMod1 $end
>>>>>>> 2e640e2555e217a06b6c352cc5c5f6091e568d2d
$var wire 1 T" A [3] $end
$var wire 1 U" A [2] $end
$var wire 1 V" A [1] $end
$var wire 1 W" A [0] $end
<<<<<<< HEAD
$var wire 1 ;% B [3] $end
$var wire 1 <% B [2] $end
$var wire 1 =% B [1] $end
$var wire 1 >% B [0] $end
$var wire 1 ?% Ci $end
=======
$var wire 1 ]& B [3] $end
$var wire 1 ^& B [2] $end
$var wire 1 _& B [1] $end
$var wire 1 `& B [0] $end
$var wire 1 a& Cin $end
>>>>>>> 2e640e2555e217a06b6c352cc5c5f6091e568d2d
$var wire 1 f" S [3] $end
$var wire 1 g" S [2] $end
$var wire 1 h" S [1] $end
$var wire 1 i" S [0] $end
<<<<<<< HEAD
$var wire 1 D% P $end
$var wire 1 H% G $end
$var wire 1 M% prop [3] $end
$var wire 1 N% prop [2] $end
$var wire 1 O% prop [1] $end
$var wire 1 P% prop [0] $end
$var wire 1 Q% gen [3] $end
$var wire 1 R% gen [2] $end
$var wire 1 S% gen [1] $end
$var wire 1 T% gen [0] $end
$var wire 1 U% C1 $end
$var wire 1 V% C2 $end
$var wire 1 W% C3 $end
$scope module FA_mod0 $end
$var wire 1 W" A $end
$var wire 1 >% B $end
$var wire 1 ?% Ci $end
$var wire 1 P% P $end
$var wire 1 T% G $end
$var wire 1 i" S $end
$upscope $end
$scope module FA_mod1 $end
$var wire 1 V" A $end
$var wire 1 =% B $end
$var wire 1 U% Ci $end
$var wire 1 O% P $end
$var wire 1 S% G $end
$var wire 1 h" S $end
$upscope $end
$scope module FA_mod2 $end
$var wire 1 U" A $end
$var wire 1 <% B $end
$var wire 1 V% Ci $end
$var wire 1 N% P $end
$var wire 1 R% G $end
$var wire 1 g" S $end
$upscope $end
$scope module FA_mod3 $end
$var wire 1 T" A $end
$var wire 1 ;% B $end
$var wire 1 W% Ci $end
$var wire 1 M% P $end
$var wire 1 Q% G $end
$var wire 1 f" S $end
$upscope $end
$upscope $end
$scope module mod1 $end
=======
$var wire 1 c& G $end
$var wire 1 g& P $end
$var wire 1 n& g0 $end
$var wire 1 o& g1 $end
$var wire 1 p& g2 $end
$var wire 1 q& g3 $end
$var wire 1 r& p1 $end
$var wire 1 s& p2 $end
$var wire 1 t& p3 $end
$var wire 1 u& c2 $end
$var wire 1 v& c3 $end
$var wire 1 w& p0 $end
$var wire 1 x& c1 $end
$scope module fa1 $end
$var wire 1 W" A $end
$var wire 1 `& B $end
$var wire 1 a& Cin $end
$var wire 1 i" S $end
$var wire 1 y& Cout $end
$var wire 1 z& abSum $end
$var wire 1 {& abSumAndCin $end
$var wire 1 |& abSumAndCinInv $end
$var wire 1 }& abCarry $end
$var wire 1 ~& abCarryIn $end
$var wire 1 !' carryAnd $end
$var wire 1 "' abCarryInv $end
$scope module xorMod1 $end
$var wire 1 W" in1 $end
$var wire 1 `& in2 $end
$var wire 1 z& out $end
$upscope $end
$scope module xorMod2 $end
$var wire 1 z& in1 $end
$var wire 1 a& in2 $end
$var wire 1 i" out $end
$upscope $end
$scope module nandMod1 $end
$var wire 1 z& in1 $end
$var wire 1 a& in2 $end
$var wire 1 {& out $end
$upscope $end
$scope module notMod1 $end
$var wire 1 {& in1 $end
$var wire 1 |& out $end
$upscope $end
$scope module nandMod2 $end
$var wire 1 W" in1 $end
$var wire 1 `& in2 $end
$var wire 1 }& out $end
$upscope $end
$scope module notMod2 $end
$var wire 1 }& in1 $end
$var wire 1 "' out $end
$upscope $end
$scope module norMod1 $end
$var wire 1 |& in1 $end
$var wire 1 "' in2 $end
$var wire 1 !' out $end
$upscope $end
$scope module notMod3 $end
$var wire 1 !' in1 $end
$var wire 1 y& out $end
$upscope $end
$upscope $end
$scope module fa2 $end
$var wire 1 V" A $end
$var wire 1 _& B $end
$var wire 1 x& Cin $end
$var wire 1 h" S $end
$var wire 1 #' Cout $end
$var wire 1 $' abSum $end
$var wire 1 %' abSumAndCin $end
$var wire 1 &' abSumAndCinInv $end
$var wire 1 '' abCarry $end
$var wire 1 (' abCarryIn $end
$var wire 1 )' carryAnd $end
$var wire 1 *' abCarryInv $end
$scope module xorMod1 $end
$var wire 1 V" in1 $end
$var wire 1 _& in2 $end
$var wire 1 $' out $end
$upscope $end
$scope module xorMod2 $end
$var wire 1 $' in1 $end
$var wire 1 x& in2 $end
$var wire 1 h" out $end
$upscope $end
$scope module nandMod1 $end
$var wire 1 $' in1 $end
$var wire 1 x& in2 $end
$var wire 1 %' out $end
$upscope $end
$scope module notMod1 $end
$var wire 1 %' in1 $end
$var wire 1 &' out $end
$upscope $end
$scope module nandMod2 $end
$var wire 1 V" in1 $end
$var wire 1 _& in2 $end
$var wire 1 '' out $end
$upscope $end
$scope module notMod2 $end
$var wire 1 '' in1 $end
$var wire 1 *' out $end
$upscope $end
$scope module norMod1 $end
$var wire 1 &' in1 $end
$var wire 1 *' in2 $end
$var wire 1 )' out $end
$upscope $end
$scope module notMod3 $end
$var wire 1 )' in1 $end
$var wire 1 #' out $end
$upscope $end
$upscope $end
$scope module fa3 $end
$var wire 1 U" A $end
$var wire 1 ^& B $end
$var wire 1 u& Cin $end
$var wire 1 g" S $end
$var wire 1 +' Cout $end
$var wire 1 ,' abSum $end
$var wire 1 -' abSumAndCin $end
$var wire 1 .' abSumAndCinInv $end
$var wire 1 /' abCarry $end
$var wire 1 0' abCarryIn $end
$var wire 1 1' carryAnd $end
$var wire 1 2' abCarryInv $end
$scope module xorMod1 $end
$var wire 1 U" in1 $end
$var wire 1 ^& in2 $end
$var wire 1 ,' out $end
$upscope $end
$scope module xorMod2 $end
$var wire 1 ,' in1 $end
$var wire 1 u& in2 $end
$var wire 1 g" out $end
$upscope $end
$scope module nandMod1 $end
$var wire 1 ,' in1 $end
$var wire 1 u& in2 $end
$var wire 1 -' out $end
$upscope $end
$scope module notMod1 $end
$var wire 1 -' in1 $end
$var wire 1 .' out $end
$upscope $end
$scope module nandMod2 $end
$var wire 1 U" in1 $end
$var wire 1 ^& in2 $end
$var wire 1 /' out $end
$upscope $end
$scope module notMod2 $end
$var wire 1 /' in1 $end
$var wire 1 2' out $end
$upscope $end
$scope module norMod1 $end
$var wire 1 .' in1 $end
$var wire 1 2' in2 $end
$var wire 1 1' out $end
$upscope $end
$scope module notMod3 $end
$var wire 1 1' in1 $end
$var wire 1 +' out $end
$upscope $end
$upscope $end
$scope module fa4 $end
$var wire 1 T" A $end
$var wire 1 ]& B $end
$var wire 1 v& Cin $end
$var wire 1 f" S $end
$var wire 1 3' Cout $end
$var wire 1 4' abSum $end
$var wire 1 5' abSumAndCin $end
$var wire 1 6' abSumAndCinInv $end
$var wire 1 7' abCarry $end
$var wire 1 8' abCarryIn $end
$var wire 1 9' carryAnd $end
$var wire 1 :' abCarryInv $end
$scope module xorMod1 $end
$var wire 1 T" in1 $end
$var wire 1 ]& in2 $end
$var wire 1 4' out $end
$upscope $end
$scope module xorMod2 $end
$var wire 1 4' in1 $end
$var wire 1 v& in2 $end
$var wire 1 f" out $end
$upscope $end
$scope module nandMod1 $end
$var wire 1 4' in1 $end
$var wire 1 v& in2 $end
$var wire 1 5' out $end
$upscope $end
$scope module notMod1 $end
$var wire 1 5' in1 $end
$var wire 1 6' out $end
$upscope $end
$scope module nandMod2 $end
$var wire 1 T" in1 $end
$var wire 1 ]& in2 $end
$var wire 1 7' out $end
$upscope $end
$scope module notMod2 $end
$var wire 1 7' in1 $end
$var wire 1 :' out $end
$upscope $end
$scope module norMod1 $end
$var wire 1 6' in1 $end
$var wire 1 :' in2 $end
$var wire 1 9' out $end
$upscope $end
$scope module notMod3 $end
$var wire 1 9' in1 $end
$var wire 1 3' out $end
$upscope $end
$upscope $end
$upscope $end
$scope module claMod2 $end
>>>>>>> 2e640e2555e217a06b6c352cc5c5f6091e568d2d
$var wire 1 P" A [3] $end
$var wire 1 Q" A [2] $end
$var wire 1 R" A [1] $end
$var wire 1 S" A [0] $end
<<<<<<< HEAD
$var wire 1 7% B [3] $end
$var wire 1 8% B [2] $end
$var wire 1 9% B [1] $end
$var wire 1 :% B [0] $end
$var wire 1 I% Ci $end
=======
$var wire 1 Y& B [3] $end
$var wire 1 Z& B [2] $end
$var wire 1 [& B [1] $end
$var wire 1 \& B [0] $end
$var wire 1 k& Cin $end
>>>>>>> 2e640e2555e217a06b6c352cc5c5f6091e568d2d
$var wire 1 b" S [3] $end
$var wire 1 c" S [2] $end
$var wire 1 d" S [1] $end
$var wire 1 e" S [0] $end
<<<<<<< HEAD
$var wire 1 C% P $end
$var wire 1 G% G $end
$var wire 1 X% prop [3] $end
$var wire 1 Y% prop [2] $end
$var wire 1 Z% prop [1] $end
$var wire 1 [% prop [0] $end
$var wire 1 \% gen [3] $end
$var wire 1 ]% gen [2] $end
$var wire 1 ^% gen [1] $end
$var wire 1 _% gen [0] $end
$var wire 1 `% C1 $end
$var wire 1 a% C2 $end
$var wire 1 b% C3 $end
$scope module FA_mod0 $end
$var wire 1 S" A $end
$var wire 1 :% B $end
$var wire 1 I% Ci $end
$var wire 1 [% P $end
$var wire 1 _% G $end
$var wire 1 e" S $end
$upscope $end
$scope module FA_mod1 $end
$var wire 1 R" A $end
$var wire 1 9% B $end
$var wire 1 `% Ci $end
$var wire 1 Z% P $end
$var wire 1 ^% G $end
$var wire 1 d" S $end
$upscope $end
$scope module FA_mod2 $end
$var wire 1 Q" A $end
$var wire 1 8% B $end
$var wire 1 a% Ci $end
$var wire 1 Y% P $end
$var wire 1 ]% G $end
$var wire 1 c" S $end
$upscope $end
$scope module FA_mod3 $end
$var wire 1 P" A $end
$var wire 1 7% B $end
$var wire 1 b% Ci $end
$var wire 1 X% P $end
$var wire 1 \% G $end
$var wire 1 b" S $end
$upscope $end
$upscope $end
$scope module mod2 $end
=======
$var wire 1 d& G $end
$var wire 1 h& P $end
$var wire 1 ;' g0 $end
$var wire 1 <' g1 $end
$var wire 1 =' g2 $end
$var wire 1 >' g3 $end
$var wire 1 ?' p1 $end
$var wire 1 @' p2 $end
$var wire 1 A' p3 $end
$var wire 1 B' c2 $end
$var wire 1 C' c3 $end
$var wire 1 D' p0 $end
$var wire 1 E' c1 $end
$scope module fa1 $end
$var wire 1 S" A $end
$var wire 1 \& B $end
$var wire 1 k& Cin $end
$var wire 1 e" S $end
$var wire 1 F' Cout $end
$var wire 1 G' abSum $end
$var wire 1 H' abSumAndCin $end
$var wire 1 I' abSumAndCinInv $end
$var wire 1 J' abCarry $end
$var wire 1 K' abCarryIn $end
$var wire 1 L' carryAnd $end
$var wire 1 M' abCarryInv $end
$scope module xorMod1 $end
$var wire 1 S" in1 $end
$var wire 1 \& in2 $end
$var wire 1 G' out $end
$upscope $end
$scope module xorMod2 $end
$var wire 1 G' in1 $end
$var wire 1 k& in2 $end
$var wire 1 e" out $end
$upscope $end
$scope module nandMod1 $end
$var wire 1 G' in1 $end
$var wire 1 k& in2 $end
$var wire 1 H' out $end
$upscope $end
$scope module notMod1 $end
$var wire 1 H' in1 $end
$var wire 1 I' out $end
$upscope $end
$scope module nandMod2 $end
$var wire 1 S" in1 $end
$var wire 1 \& in2 $end
$var wire 1 J' out $end
$upscope $end
$scope module notMod2 $end
$var wire 1 J' in1 $end
$var wire 1 M' out $end
$upscope $end
$scope module norMod1 $end
$var wire 1 I' in1 $end
$var wire 1 M' in2 $end
$var wire 1 L' out $end
$upscope $end
$scope module notMod3 $end
$var wire 1 L' in1 $end
$var wire 1 F' out $end
$upscope $end
$upscope $end
$scope module fa2 $end
$var wire 1 R" A $end
$var wire 1 [& B $end
$var wire 1 E' Cin $end
$var wire 1 d" S $end
$var wire 1 N' Cout $end
$var wire 1 O' abSum $end
$var wire 1 P' abSumAndCin $end
$var wire 1 Q' abSumAndCinInv $end
$var wire 1 R' abCarry $end
$var wire 1 S' abCarryIn $end
$var wire 1 T' carryAnd $end
$var wire 1 U' abCarryInv $end
$scope module xorMod1 $end
$var wire 1 R" in1 $end
$var wire 1 [& in2 $end
$var wire 1 O' out $end
$upscope $end
$scope module xorMod2 $end
$var wire 1 O' in1 $end
$var wire 1 E' in2 $end
$var wire 1 d" out $end
$upscope $end
$scope module nandMod1 $end
$var wire 1 O' in1 $end
$var wire 1 E' in2 $end
$var wire 1 P' out $end
$upscope $end
$scope module notMod1 $end
$var wire 1 P' in1 $end
$var wire 1 Q' out $end
$upscope $end
$scope module nandMod2 $end
$var wire 1 R" in1 $end
$var wire 1 [& in2 $end
$var wire 1 R' out $end
$upscope $end
$scope module notMod2 $end
$var wire 1 R' in1 $end
$var wire 1 U' out $end
$upscope $end
$scope module norMod1 $end
$var wire 1 Q' in1 $end
$var wire 1 U' in2 $end
$var wire 1 T' out $end
$upscope $end
$scope module notMod3 $end
$var wire 1 T' in1 $end
$var wire 1 N' out $end
$upscope $end
$upscope $end
$scope module fa3 $end
$var wire 1 Q" A $end
$var wire 1 Z& B $end
$var wire 1 B' Cin $end
$var wire 1 c" S $end
$var wire 1 V' Cout $end
$var wire 1 W' abSum $end
$var wire 1 X' abSumAndCin $end
$var wire 1 Y' abSumAndCinInv $end
$var wire 1 Z' abCarry $end
$var wire 1 [' abCarryIn $end
$var wire 1 \' carryAnd $end
$var wire 1 ]' abCarryInv $end
$scope module xorMod1 $end
$var wire 1 Q" in1 $end
$var wire 1 Z& in2 $end
$var wire 1 W' out $end
$upscope $end
$scope module xorMod2 $end
$var wire 1 W' in1 $end
$var wire 1 B' in2 $end
$var wire 1 c" out $end
$upscope $end
$scope module nandMod1 $end
$var wire 1 W' in1 $end
$var wire 1 B' in2 $end
$var wire 1 X' out $end
$upscope $end
$scope module notMod1 $end
$var wire 1 X' in1 $end
$var wire 1 Y' out $end
$upscope $end
$scope module nandMod2 $end
$var wire 1 Q" in1 $end
$var wire 1 Z& in2 $end
$var wire 1 Z' out $end
$upscope $end
$scope module notMod2 $end
$var wire 1 Z' in1 $end
$var wire 1 ]' out $end
$upscope $end
$scope module norMod1 $end
$var wire 1 Y' in1 $end
$var wire 1 ]' in2 $end
$var wire 1 \' out $end
$upscope $end
$scope module notMod3 $end
$var wire 1 \' in1 $end
$var wire 1 V' out $end
$upscope $end
$upscope $end
$scope module fa4 $end
$var wire 1 P" A $end
$var wire 1 Y& B $end
$var wire 1 C' Cin $end
$var wire 1 b" S $end
$var wire 1 ^' Cout $end
$var wire 1 _' abSum $end
$var wire 1 `' abSumAndCin $end
$var wire 1 a' abSumAndCinInv $end
$var wire 1 b' abCarry $end
$var wire 1 c' abCarryIn $end
$var wire 1 d' carryAnd $end
$var wire 1 e' abCarryInv $end
$scope module xorMod1 $end
$var wire 1 P" in1 $end
$var wire 1 Y& in2 $end
$var wire 1 _' out $end
$upscope $end
$scope module xorMod2 $end
$var wire 1 _' in1 $end
$var wire 1 C' in2 $end
$var wire 1 b" out $end
$upscope $end
$scope module nandMod1 $end
$var wire 1 _' in1 $end
$var wire 1 C' in2 $end
$var wire 1 `' out $end
$upscope $end
$scope module notMod1 $end
$var wire 1 `' in1 $end
$var wire 1 a' out $end
$upscope $end
$scope module nandMod2 $end
$var wire 1 P" in1 $end
$var wire 1 Y& in2 $end
$var wire 1 b' out $end
$upscope $end
$scope module notMod2 $end
$var wire 1 b' in1 $end
$var wire 1 e' out $end
$upscope $end
$scope module norMod1 $end
$var wire 1 a' in1 $end
$var wire 1 e' in2 $end
$var wire 1 d' out $end
$upscope $end
$scope module notMod3 $end
$var wire 1 d' in1 $end
$var wire 1 ^' out $end
$upscope $end
$upscope $end
$upscope $end
$scope module claMod3 $end
>>>>>>> 2e640e2555e217a06b6c352cc5c5f6091e568d2d
$var wire 1 L" A [3] $end
$var wire 1 M" A [2] $end
$var wire 1 N" A [1] $end
$var wire 1 O" A [0] $end
<<<<<<< HEAD
$var wire 1 3% B [3] $end
$var wire 1 4% B [2] $end
$var wire 1 5% B [1] $end
$var wire 1 6% B [0] $end
$var wire 1 J% Ci $end
=======
$var wire 1 U& B [3] $end
$var wire 1 V& B [2] $end
$var wire 1 W& B [1] $end
$var wire 1 X& B [0] $end
$var wire 1 l& Cin $end
>>>>>>> 2e640e2555e217a06b6c352cc5c5f6091e568d2d
$var wire 1 ^" S [3] $end
$var wire 1 _" S [2] $end
$var wire 1 `" S [1] $end
$var wire 1 a" S [0] $end
<<<<<<< HEAD
$var wire 1 B% P $end
$var wire 1 F% G $end
$var wire 1 c% prop [3] $end
$var wire 1 d% prop [2] $end
$var wire 1 e% prop [1] $end
$var wire 1 f% prop [0] $end
$var wire 1 g% gen [3] $end
$var wire 1 h% gen [2] $end
$var wire 1 i% gen [1] $end
$var wire 1 j% gen [0] $end
$var wire 1 k% C1 $end
$var wire 1 l% C2 $end
$var wire 1 m% C3 $end
$scope module FA_mod0 $end
$var wire 1 O" A $end
$var wire 1 6% B $end
$var wire 1 J% Ci $end
$var wire 1 f% P $end
$var wire 1 j% G $end
$var wire 1 a" S $end
$upscope $end
$scope module FA_mod1 $end
$var wire 1 N" A $end
$var wire 1 5% B $end
$var wire 1 k% Ci $end
$var wire 1 e% P $end
$var wire 1 i% G $end
$var wire 1 `" S $end
$upscope $end
$scope module FA_mod2 $end
$var wire 1 M" A $end
$var wire 1 4% B $end
$var wire 1 l% Ci $end
$var wire 1 d% P $end
$var wire 1 h% G $end
$var wire 1 _" S $end
$upscope $end
$scope module FA_mod3 $end
$var wire 1 L" A $end
$var wire 1 3% B $end
$var wire 1 m% Ci $end
$var wire 1 c% P $end
$var wire 1 g% G $end
$var wire 1 ^" S $end
$upscope $end
$upscope $end
$scope module mod3 $end
=======
$var wire 1 e& G $end
$var wire 1 i& P $end
$var wire 1 f' g0 $end
$var wire 1 g' g1 $end
$var wire 1 h' g2 $end
$var wire 1 i' g3 $end
$var wire 1 j' p1 $end
$var wire 1 k' p2 $end
$var wire 1 l' p3 $end
$var wire 1 m' c2 $end
$var wire 1 n' c3 $end
$var wire 1 o' p0 $end
$var wire 1 p' c1 $end
$scope module fa1 $end
$var wire 1 O" A $end
$var wire 1 X& B $end
$var wire 1 l& Cin $end
$var wire 1 a" S $end
$var wire 1 q' Cout $end
$var wire 1 r' abSum $end
$var wire 1 s' abSumAndCin $end
$var wire 1 t' abSumAndCinInv $end
$var wire 1 u' abCarry $end
$var wire 1 v' abCarryIn $end
$var wire 1 w' carryAnd $end
$var wire 1 x' abCarryInv $end
$scope module xorMod1 $end
$var wire 1 O" in1 $end
$var wire 1 X& in2 $end
$var wire 1 r' out $end
$upscope $end
$scope module xorMod2 $end
$var wire 1 r' in1 $end
$var wire 1 l& in2 $end
$var wire 1 a" out $end
$upscope $end
$scope module nandMod1 $end
$var wire 1 r' in1 $end
$var wire 1 l& in2 $end
$var wire 1 s' out $end
$upscope $end
$scope module notMod1 $end
$var wire 1 s' in1 $end
$var wire 1 t' out $end
$upscope $end
$scope module nandMod2 $end
$var wire 1 O" in1 $end
$var wire 1 X& in2 $end
$var wire 1 u' out $end
$upscope $end
$scope module notMod2 $end
$var wire 1 u' in1 $end
$var wire 1 x' out $end
$upscope $end
$scope module norMod1 $end
$var wire 1 t' in1 $end
$var wire 1 x' in2 $end
$var wire 1 w' out $end
$upscope $end
$scope module notMod3 $end
$var wire 1 w' in1 $end
$var wire 1 q' out $end
$upscope $end
$upscope $end
$scope module fa2 $end
$var wire 1 N" A $end
$var wire 1 W& B $end
$var wire 1 p' Cin $end
$var wire 1 `" S $end
$var wire 1 y' Cout $end
$var wire 1 z' abSum $end
$var wire 1 {' abSumAndCin $end
$var wire 1 |' abSumAndCinInv $end
$var wire 1 }' abCarry $end
$var wire 1 ~' abCarryIn $end
$var wire 1 !( carryAnd $end
$var wire 1 "( abCarryInv $end
$scope module xorMod1 $end
$var wire 1 N" in1 $end
$var wire 1 W& in2 $end
$var wire 1 z' out $end
$upscope $end
$scope module xorMod2 $end
$var wire 1 z' in1 $end
$var wire 1 p' in2 $end
$var wire 1 `" out $end
$upscope $end
$scope module nandMod1 $end
$var wire 1 z' in1 $end
$var wire 1 p' in2 $end
$var wire 1 {' out $end
$upscope $end
$scope module notMod1 $end
$var wire 1 {' in1 $end
$var wire 1 |' out $end
$upscope $end
$scope module nandMod2 $end
$var wire 1 N" in1 $end
$var wire 1 W& in2 $end
$var wire 1 }' out $end
$upscope $end
$scope module notMod2 $end
$var wire 1 }' in1 $end
$var wire 1 "( out $end
$upscope $end
$scope module norMod1 $end
$var wire 1 |' in1 $end
$var wire 1 "( in2 $end
$var wire 1 !( out $end
$upscope $end
$scope module notMod3 $end
$var wire 1 !( in1 $end
$var wire 1 y' out $end
$upscope $end
$upscope $end
$scope module fa3 $end
$var wire 1 M" A $end
$var wire 1 V& B $end
$var wire 1 m' Cin $end
$var wire 1 _" S $end
$var wire 1 #( Cout $end
$var wire 1 $( abSum $end
$var wire 1 %( abSumAndCin $end
$var wire 1 &( abSumAndCinInv $end
$var wire 1 '( abCarry $end
$var wire 1 (( abCarryIn $end
$var wire 1 )( carryAnd $end
$var wire 1 *( abCarryInv $end
$scope module xorMod1 $end
$var wire 1 M" in1 $end
$var wire 1 V& in2 $end
$var wire 1 $( out $end
$upscope $end
$scope module xorMod2 $end
$var wire 1 $( in1 $end
$var wire 1 m' in2 $end
$var wire 1 _" out $end
$upscope $end
$scope module nandMod1 $end
$var wire 1 $( in1 $end
$var wire 1 m' in2 $end
$var wire 1 %( out $end
$upscope $end
$scope module notMod1 $end
$var wire 1 %( in1 $end
$var wire 1 &( out $end
$upscope $end
$scope module nandMod2 $end
$var wire 1 M" in1 $end
$var wire 1 V& in2 $end
$var wire 1 '( out $end
$upscope $end
$scope module notMod2 $end
$var wire 1 '( in1 $end
$var wire 1 *( out $end
$upscope $end
$scope module norMod1 $end
$var wire 1 &( in1 $end
$var wire 1 *( in2 $end
$var wire 1 )( out $end
$upscope $end
$scope module notMod3 $end
$var wire 1 )( in1 $end
$var wire 1 #( out $end
$upscope $end
$upscope $end
$scope module fa4 $end
$var wire 1 L" A $end
$var wire 1 U& B $end
$var wire 1 n' Cin $end
$var wire 1 ^" S $end
$var wire 1 +( Cout $end
$var wire 1 ,( abSum $end
$var wire 1 -( abSumAndCin $end
$var wire 1 .( abSumAndCinInv $end
$var wire 1 /( abCarry $end
$var wire 1 0( abCarryIn $end
$var wire 1 1( carryAnd $end
$var wire 1 2( abCarryInv $end
$scope module xorMod1 $end
$var wire 1 L" in1 $end
$var wire 1 U& in2 $end
$var wire 1 ,( out $end
$upscope $end
$scope module xorMod2 $end
$var wire 1 ,( in1 $end
$var wire 1 n' in2 $end
$var wire 1 ^" out $end
$upscope $end
$scope module nandMod1 $end
$var wire 1 ,( in1 $end
$var wire 1 n' in2 $end
$var wire 1 -( out $end
$upscope $end
$scope module notMod1 $end
$var wire 1 -( in1 $end
$var wire 1 .( out $end
$upscope $end
$scope module nandMod2 $end
$var wire 1 L" in1 $end
$var wire 1 U& in2 $end
$var wire 1 /( out $end
$upscope $end
$scope module notMod2 $end
$var wire 1 /( in1 $end
$var wire 1 2( out $end
$upscope $end
$scope module norMod1 $end
$var wire 1 .( in1 $end
$var wire 1 2( in2 $end
$var wire 1 1( out $end
$upscope $end
$scope module notMod3 $end
$var wire 1 1( in1 $end
$var wire 1 +( out $end
$upscope $end
$upscope $end
$upscope $end
$scope module claMod4 $end
>>>>>>> 2e640e2555e217a06b6c352cc5c5f6091e568d2d
$var wire 1 H" A [3] $end
$var wire 1 I" A [2] $end
$var wire 1 J" A [1] $end
$var wire 1 K" A [0] $end
<<<<<<< HEAD
$var wire 1 /% B [3] $end
$var wire 1 0% B [2] $end
$var wire 1 1% B [1] $end
$var wire 1 2% B [0] $end
$var wire 1 K% Ci $end
=======
$var wire 1 Q& B [3] $end
$var wire 1 R& B [2] $end
$var wire 1 S& B [1] $end
$var wire 1 T& B [0] $end
$var wire 1 m& Cin $end
>>>>>>> 2e640e2555e217a06b6c352cc5c5f6091e568d2d
$var wire 1 Z" S [3] $end
$var wire 1 [" S [2] $end
$var wire 1 \" S [1] $end
$var wire 1 ]" S [0] $end
<<<<<<< HEAD
$var wire 1 A% P $end
$var wire 1 E% G $end
$var wire 1 n% prop [3] $end
$var wire 1 o% prop [2] $end
$var wire 1 p% prop [1] $end
$var wire 1 q% prop [0] $end
$var wire 1 r% gen [3] $end
$var wire 1 s% gen [2] $end
$var wire 1 t% gen [1] $end
$var wire 1 u% gen [0] $end
$var wire 1 v% C1 $end
$var wire 1 w% C2 $end
$var wire 1 x% C3 $end
$scope module FA_mod0 $end
$var wire 1 K" A $end
$var wire 1 2% B $end
$var wire 1 K% Ci $end
$var wire 1 q% P $end
$var wire 1 u% G $end
$var wire 1 ]" S $end
$upscope $end
$scope module FA_mod1 $end
$var wire 1 J" A $end
$var wire 1 1% B $end
$var wire 1 v% Ci $end
$var wire 1 p% P $end
$var wire 1 t% G $end
$var wire 1 \" S $end
$upscope $end
$scope module FA_mod2 $end
$var wire 1 I" A $end
$var wire 1 0% B $end
$var wire 1 w% Ci $end
$var wire 1 o% P $end
$var wire 1 s% G $end
$var wire 1 [" S $end
$upscope $end
$scope module FA_mod3 $end
$var wire 1 H" A $end
$var wire 1 /% B $end
$var wire 1 x% Ci $end
$var wire 1 n% P $end
$var wire 1 r% G $end
$var wire 1 Z" S $end
=======
$var wire 1 f& G $end
$var wire 1 j& P $end
$var wire 1 3( g0 $end
$var wire 1 4( g1 $end
$var wire 1 5( g2 $end
$var wire 1 6( g3 $end
$var wire 1 7( p1 $end
$var wire 1 8( p2 $end
$var wire 1 9( p3 $end
$var wire 1 :( c2 $end
$var wire 1 ;( c3 $end
$var wire 1 <( p0 $end
$var wire 1 =( c1 $end
$scope module fa1 $end
$var wire 1 K" A $end
$var wire 1 T& B $end
$var wire 1 m& Cin $end
$var wire 1 ]" S $end
$var wire 1 >( Cout $end
$var wire 1 ?( abSum $end
$var wire 1 @( abSumAndCin $end
$var wire 1 A( abSumAndCinInv $end
$var wire 1 B( abCarry $end
$var wire 1 C( abCarryIn $end
$var wire 1 D( carryAnd $end
$var wire 1 E( abCarryInv $end
$scope module xorMod1 $end
$var wire 1 K" in1 $end
$var wire 1 T& in2 $end
$var wire 1 ?( out $end
$upscope $end
$scope module xorMod2 $end
$var wire 1 ?( in1 $end
$var wire 1 m& in2 $end
$var wire 1 ]" out $end
$upscope $end
$scope module nandMod1 $end
$var wire 1 ?( in1 $end
$var wire 1 m& in2 $end
$var wire 1 @( out $end
$upscope $end
$scope module notMod1 $end
$var wire 1 @( in1 $end
$var wire 1 A( out $end
$upscope $end
$scope module nandMod2 $end
$var wire 1 K" in1 $end
$var wire 1 T& in2 $end
$var wire 1 B( out $end
$upscope $end
$scope module notMod2 $end
$var wire 1 B( in1 $end
$var wire 1 E( out $end
$upscope $end
$scope module norMod1 $end
$var wire 1 A( in1 $end
$var wire 1 E( in2 $end
$var wire 1 D( out $end
$upscope $end
$scope module notMod3 $end
$var wire 1 D( in1 $end
$var wire 1 >( out $end
$upscope $end
$upscope $end
$scope module fa2 $end
$var wire 1 J" A $end
$var wire 1 S& B $end
$var wire 1 =( Cin $end
$var wire 1 \" S $end
$var wire 1 F( Cout $end
$var wire 1 G( abSum $end
$var wire 1 H( abSumAndCin $end
$var wire 1 I( abSumAndCinInv $end
$var wire 1 J( abCarry $end
$var wire 1 K( abCarryIn $end
$var wire 1 L( carryAnd $end
$var wire 1 M( abCarryInv $end
$scope module xorMod1 $end
$var wire 1 J" in1 $end
$var wire 1 S& in2 $end
$var wire 1 G( out $end
$upscope $end
$scope module xorMod2 $end
$var wire 1 G( in1 $end
$var wire 1 =( in2 $end
$var wire 1 \" out $end
$upscope $end
$scope module nandMod1 $end
$var wire 1 G( in1 $end
$var wire 1 =( in2 $end
$var wire 1 H( out $end
$upscope $end
$scope module notMod1 $end
$var wire 1 H( in1 $end
$var wire 1 I( out $end
$upscope $end
$scope module nandMod2 $end
$var wire 1 J" in1 $end
$var wire 1 S& in2 $end
$var wire 1 J( out $end
$upscope $end
$scope module notMod2 $end
$var wire 1 J( in1 $end
$var wire 1 M( out $end
$upscope $end
$scope module norMod1 $end
$var wire 1 I( in1 $end
$var wire 1 M( in2 $end
$var wire 1 L( out $end
$upscope $end
$scope module notMod3 $end
$var wire 1 L( in1 $end
$var wire 1 F( out $end
$upscope $end
$upscope $end
$scope module fa3 $end
$var wire 1 I" A $end
$var wire 1 R& B $end
$var wire 1 :( Cin $end
$var wire 1 [" S $end
$var wire 1 N( Cout $end
$var wire 1 O( abSum $end
$var wire 1 P( abSumAndCin $end
$var wire 1 Q( abSumAndCinInv $end
$var wire 1 R( abCarry $end
$var wire 1 S( abCarryIn $end
$var wire 1 T( carryAnd $end
$var wire 1 U( abCarryInv $end
$scope module xorMod1 $end
$var wire 1 I" in1 $end
$var wire 1 R& in2 $end
$var wire 1 O( out $end
$upscope $end
$scope module xorMod2 $end
$var wire 1 O( in1 $end
$var wire 1 :( in2 $end
$var wire 1 [" out $end
$upscope $end
$scope module nandMod1 $end
$var wire 1 O( in1 $end
$var wire 1 :( in2 $end
$var wire 1 P( out $end
$upscope $end
$scope module notMod1 $end
$var wire 1 P( in1 $end
$var wire 1 Q( out $end
$upscope $end
$scope module nandMod2 $end
$var wire 1 I" in1 $end
$var wire 1 R& in2 $end
$var wire 1 R( out $end
$upscope $end
$scope module notMod2 $end
$var wire 1 R( in1 $end
$var wire 1 U( out $end
$upscope $end
$scope module norMod1 $end
$var wire 1 Q( in1 $end
$var wire 1 U( in2 $end
$var wire 1 T( out $end
$upscope $end
$scope module notMod3 $end
$var wire 1 T( in1 $end
$var wire 1 N( out $end
$upscope $end
$upscope $end
$scope module fa4 $end
$var wire 1 H" A $end
$var wire 1 Q& B $end
$var wire 1 ;( Cin $end
$var wire 1 Z" S $end
$var wire 1 V( Cout $end
$var wire 1 W( abSum $end
$var wire 1 X( abSumAndCin $end
$var wire 1 Y( abSumAndCinInv $end
$var wire 1 Z( abCarry $end
$var wire 1 [( abCarryIn $end
$var wire 1 \( carryAnd $end
$var wire 1 ]( abCarryInv $end
$scope module xorMod1 $end
$var wire 1 H" in1 $end
$var wire 1 Q& in2 $end
$var wire 1 W( out $end
$upscope $end
$scope module xorMod2 $end
$var wire 1 W( in1 $end
$var wire 1 ;( in2 $end
$var wire 1 Z" out $end
$upscope $end
$scope module nandMod1 $end
$var wire 1 W( in1 $end
$var wire 1 ;( in2 $end
$var wire 1 X( out $end
$upscope $end
$scope module notMod1 $end
$var wire 1 X( in1 $end
$var wire 1 Y( out $end
$upscope $end
$scope module nandMod2 $end
$var wire 1 H" in1 $end
$var wire 1 Q& in2 $end
$var wire 1 Z( out $end
$upscope $end
$scope module notMod2 $end
$var wire 1 Z( in1 $end
$var wire 1 ]( out $end
$upscope $end
$scope module norMod1 $end
$var wire 1 Y( in1 $end
$var wire 1 ]( in2 $end
$var wire 1 \( out $end
$upscope $end
$scope module notMod3 $end
$var wire 1 \( in1 $end
$var wire 1 V( out $end
$upscope $end
>>>>>>> 2e640e2555e217a06b6c352cc5c5f6091e568d2d
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope module pc $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var wire 1 8" New_PC [15] $end
$var wire 1 9" New_PC [14] $end
$var wire 1 :" New_PC [13] $end
$var wire 1 ;" New_PC [12] $end
$var wire 1 <" New_PC [11] $end
$var wire 1 =" New_PC [10] $end
$var wire 1 >" New_PC [9] $end
$var wire 1 ?" New_PC [8] $end
$var wire 1 @" New_PC [7] $end
$var wire 1 A" New_PC [6] $end
$var wire 1 B" New_PC [5] $end
$var wire 1 C" New_PC [4] $end
$var wire 1 D" New_PC [3] $end
$var wire 1 E" New_PC [2] $end
$var wire 1 F" New_PC [1] $end
$var wire 1 G" New_PC [0] $end
$var wire 1 7" Write $end
$var wire 1 H" Curr_PC [15] $end
$var wire 1 I" Curr_PC [14] $end
$var wire 1 J" Curr_PC [13] $end
$var wire 1 K" Curr_PC [12] $end
$var wire 1 L" Curr_PC [11] $end
$var wire 1 M" Curr_PC [10] $end
$var wire 1 N" Curr_PC [9] $end
$var wire 1 O" Curr_PC [8] $end
$var wire 1 P" Curr_PC [7] $end
$var wire 1 Q" Curr_PC [6] $end
$var wire 1 R" Curr_PC [5] $end
$var wire 1 S" Curr_PC [4] $end
$var wire 1 T" Curr_PC [3] $end
$var wire 1 U" Curr_PC [2] $end
$var wire 1 V" Curr_PC [1] $end
$var wire 1 W" Curr_PC [0] $end
<<<<<<< HEAD
$var wire 1 y% q [15] $end
$var wire 1 z% q [14] $end
$var wire 1 {% q [13] $end
$var wire 1 |% q [12] $end
$var wire 1 }% q [11] $end
$var wire 1 ~% q [10] $end
$var wire 1 !& q [9] $end
$var wire 1 "& q [8] $end
$var wire 1 #& q [7] $end
$var wire 1 $& q [6] $end
$var wire 1 %& q [5] $end
$var wire 1 && q [4] $end
$var wire 1 '& q [3] $end
$var wire 1 (& q [2] $end
$var wire 1 )& q [1] $end
$var wire 1 *& q [0] $end
$var wire 1 +& d [15] $end
$var wire 1 ,& d [14] $end
$var wire 1 -& d [13] $end
$var wire 1 .& d [12] $end
$var wire 1 /& d [11] $end
$var wire 1 0& d [10] $end
$var wire 1 1& d [9] $end
$var wire 1 2& d [8] $end
$var wire 1 3& d [7] $end
$var wire 1 4& d [6] $end
$var wire 1 5& d [5] $end
$var wire 1 6& d [4] $end
$var wire 1 7& d [3] $end
$var wire 1 8& d [2] $end
$var wire 1 9& d [1] $end
$var wire 1 :& d [0] $end
$scope module PC[15] $end
$var wire 1 y% q $end
$var wire 1 +& d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 ;& state $end
$upscope $end
$scope module PC[14] $end
$var wire 1 z% q $end
$var wire 1 ,& d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 <& state $end
$upscope $end
$scope module PC[13] $end
$var wire 1 {% q $end
$var wire 1 -& d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 =& state $end
$upscope $end
$scope module PC[12] $end
$var wire 1 |% q $end
$var wire 1 .& d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 >& state $end
$upscope $end
$scope module PC[11] $end
$var wire 1 }% q $end
$var wire 1 /& d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 ?& state $end
$upscope $end
$scope module PC[10] $end
$var wire 1 ~% q $end
$var wire 1 0& d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 @& state $end
$upscope $end
$scope module PC[9] $end
$var wire 1 !& q $end
$var wire 1 1& d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 A& state $end
$upscope $end
$scope module PC[8] $end
$var wire 1 "& q $end
$var wire 1 2& d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 B& state $end
$upscope $end
$scope module PC[7] $end
$var wire 1 #& q $end
$var wire 1 3& d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 C& state $end
$upscope $end
$scope module PC[6] $end
$var wire 1 $& q $end
$var wire 1 4& d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 D& state $end
$upscope $end
$scope module PC[5] $end
$var wire 1 %& q $end
$var wire 1 5& d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 E& state $end
$upscope $end
$scope module PC[4] $end
$var wire 1 && q $end
$var wire 1 6& d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 F& state $end
$upscope $end
$scope module PC[3] $end
$var wire 1 '& q $end
$var wire 1 7& d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 G& state $end
$upscope $end
$scope module PC[2] $end
$var wire 1 (& q $end
$var wire 1 8& d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 H& state $end
$upscope $end
$scope module PC[1] $end
$var wire 1 )& q $end
$var wire 1 9& d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 I& state $end
$upscope $end
$scope module PC[0] $end
$var wire 1 *& q $end
$var wire 1 :& d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 J& state $end
=======
$var wire 1 ^( q [15] $end
$var wire 1 _( q [14] $end
$var wire 1 `( q [13] $end
$var wire 1 a( q [12] $end
$var wire 1 b( q [11] $end
$var wire 1 c( q [10] $end
$var wire 1 d( q [9] $end
$var wire 1 e( q [8] $end
$var wire 1 f( q [7] $end
$var wire 1 g( q [6] $end
$var wire 1 h( q [5] $end
$var wire 1 i( q [4] $end
$var wire 1 j( q [3] $end
$var wire 1 k( q [2] $end
$var wire 1 l( q [1] $end
$var wire 1 m( q [0] $end
$var wire 1 n( d [15] $end
$var wire 1 o( d [14] $end
$var wire 1 p( d [13] $end
$var wire 1 q( d [12] $end
$var wire 1 r( d [11] $end
$var wire 1 s( d [10] $end
$var wire 1 t( d [9] $end
$var wire 1 u( d [8] $end
$var wire 1 v( d [7] $end
$var wire 1 w( d [6] $end
$var wire 1 x( d [5] $end
$var wire 1 y( d [4] $end
$var wire 1 z( d [3] $end
$var wire 1 {( d [2] $end
$var wire 1 |( d [1] $end
$var wire 1 }( d [0] $end
$scope module PC[15] $end
$var wire 1 ^( q $end
$var wire 1 n( d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 ~( state $end
$upscope $end
$scope module PC[14] $end
$var wire 1 _( q $end
$var wire 1 o( d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 !) state $end
$upscope $end
$scope module PC[13] $end
$var wire 1 `( q $end
$var wire 1 p( d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 ") state $end
$upscope $end
$scope module PC[12] $end
$var wire 1 a( q $end
$var wire 1 q( d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 #) state $end
$upscope $end
$scope module PC[11] $end
$var wire 1 b( q $end
$var wire 1 r( d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 $) state $end
$upscope $end
$scope module PC[10] $end
$var wire 1 c( q $end
$var wire 1 s( d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 %) state $end
$upscope $end
$scope module PC[9] $end
$var wire 1 d( q $end
$var wire 1 t( d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 &) state $end
$upscope $end
$scope module PC[8] $end
$var wire 1 e( q $end
$var wire 1 u( d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 ') state $end
$upscope $end
$scope module PC[7] $end
$var wire 1 f( q $end
$var wire 1 v( d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 () state $end
$upscope $end
$scope module PC[6] $end
$var wire 1 g( q $end
$var wire 1 w( d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 )) state $end
$upscope $end
$scope module PC[5] $end
$var wire 1 h( q $end
$var wire 1 x( d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 *) state $end
$upscope $end
$scope module PC[4] $end
$var wire 1 i( q $end
$var wire 1 y( d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 +) state $end
$upscope $end
$scope module PC[3] $end
$var wire 1 j( q $end
$var wire 1 z( d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 ,) state $end
$upscope $end
$scope module PC[2] $end
$var wire 1 k( q $end
$var wire 1 {( d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 -) state $end
$upscope $end
$scope module PC[1] $end
$var wire 1 l( q $end
$var wire 1 |( d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 .) state $end
$upscope $end
$scope module PC[0] $end
$var wire 1 m( q $end
$var wire 1 }( d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 /) state $end
>>>>>>> 2e640e2555e217a06b6c352cc5c5f6091e568d2d
$upscope $end
$upscope $end
$scope module extender $end
$var wire 1 Q# Extend [10] $end
$var wire 1 R# Extend [9] $end
$var wire 1 S# Extend [8] $end
$var wire 1 T# Extend [7] $end
$var wire 1 U# Extend [6] $end
$var wire 1 V# Extend [5] $end
$var wire 1 W# Extend [4] $end
$var wire 1 X# Extend [3] $end
$var wire 1 Y# Extend [2] $end
$var wire 1 Z# Extend [1] $end
$var wire 1 [# Extend [0] $end
$var wire 1 j" Imm5S [15] $end
$var wire 1 k" Imm5S [14] $end
$var wire 1 l" Imm5S [13] $end
$var wire 1 m" Imm5S [12] $end
$var wire 1 n" Imm5S [11] $end
$var wire 1 o" Imm5S [10] $end
$var wire 1 p" Imm5S [9] $end
$var wire 1 q" Imm5S [8] $end
$var wire 1 r" Imm5S [7] $end
$var wire 1 s" Imm5S [6] $end
$var wire 1 t" Imm5S [5] $end
$var wire 1 u" Imm5S [4] $end
$var wire 1 v" Imm5S [3] $end
$var wire 1 w" Imm5S [2] $end
$var wire 1 x" Imm5S [1] $end
$var wire 1 y" Imm5S [0] $end
$var wire 1 z" Imm5Z [15] $end
$var wire 1 {" Imm5Z [14] $end
$var wire 1 |" Imm5Z [13] $end
$var wire 1 }" Imm5Z [12] $end
$var wire 1 ~" Imm5Z [11] $end
$var wire 1 !# Imm5Z [10] $end
$var wire 1 "# Imm5Z [9] $end
$var wire 1 ## Imm5Z [8] $end
$var wire 1 $# Imm5Z [7] $end
$var wire 1 %# Imm5Z [6] $end
$var wire 1 &# Imm5Z [5] $end
$var wire 1 '# Imm5Z [4] $end
$var wire 1 (# Imm5Z [3] $end
$var wire 1 )# Imm5Z [2] $end
$var wire 1 *# Imm5Z [1] $end
$var wire 1 +# Imm5Z [0] $end
$var wire 1 ,# Imm8S [15] $end
$var wire 1 -# Imm8S [14] $end
$var wire 1 .# Imm8S [13] $end
$var wire 1 /# Imm8S [12] $end
$var wire 1 0# Imm8S [11] $end
$var wire 1 1# Imm8S [10] $end
$var wire 1 2# Imm8S [9] $end
$var wire 1 3# Imm8S [8] $end
$var wire 1 4# Imm8S [7] $end
$var wire 1 5# Imm8S [6] $end
$var wire 1 6# Imm8S [5] $end
$var wire 1 7# Imm8S [4] $end
$var wire 1 8# Imm8S [3] $end
$var wire 1 9# Imm8S [2] $end
$var wire 1 :# Imm8S [1] $end
$var wire 1 ;# Imm8S [0] $end
$var wire 1 <# Dis11 [15] $end
$var wire 1 =# Dis11 [14] $end
$var wire 1 ># Dis11 [13] $end
$var wire 1 ?# Dis11 [12] $end
$var wire 1 @# Dis11 [11] $end
$var wire 1 A# Dis11 [10] $end
$var wire 1 B# Dis11 [9] $end
$var wire 1 C# Dis11 [8] $end
$var wire 1 D# Dis11 [7] $end
$var wire 1 E# Dis11 [6] $end
$var wire 1 F# Dis11 [5] $end
$var wire 1 G# Dis11 [4] $end
$var wire 1 H# Dis11 [3] $end
$var wire 1 I# Dis11 [2] $end
$var wire 1 J# Dis11 [1] $end
$var wire 1 K# Dis11 [0] $end
<<<<<<< HEAD
$scope module Sign5_Ext $end
=======
$scope module choiceA $end
>>>>>>> 2e640e2555e217a06b6c352cc5c5f6091e568d2d
$var wire 1 W# In [4] $end
$var wire 1 X# In [3] $end
$var wire 1 Y# In [2] $end
$var wire 1 Z# In [1] $end
$var wire 1 [# In [0] $end
$var wire 1 j" Out [15] $end
$var wire 1 k" Out [14] $end
$var wire 1 l" Out [13] $end
$var wire 1 m" Out [12] $end
$var wire 1 n" Out [11] $end
$var wire 1 o" Out [10] $end
$var wire 1 p" Out [9] $end
$var wire 1 q" Out [8] $end
$var wire 1 r" Out [7] $end
$var wire 1 s" Out [6] $end
$var wire 1 t" Out [5] $end
$var wire 1 u" Out [4] $end
$var wire 1 v" Out [3] $end
$var wire 1 w" Out [2] $end
$var wire 1 x" Out [1] $end
$var wire 1 y" Out [0] $end
$upscope $end
<<<<<<< HEAD
$scope module Zero5_Ext $end
=======
$scope module choiceB $end
>>>>>>> 2e640e2555e217a06b6c352cc5c5f6091e568d2d
$var wire 1 W# In [4] $end
$var wire 1 X# In [3] $end
$var wire 1 Y# In [2] $end
$var wire 1 Z# In [1] $end
$var wire 1 [# In [0] $end
$var wire 1 z" Out [15] $end
$var wire 1 {" Out [14] $end
$var wire 1 |" Out [13] $end
$var wire 1 }" Out [12] $end
$var wire 1 ~" Out [11] $end
$var wire 1 !# Out [10] $end
$var wire 1 "# Out [9] $end
$var wire 1 ## Out [8] $end
$var wire 1 $# Out [7] $end
$var wire 1 %# Out [6] $end
$var wire 1 &# Out [5] $end
$var wire 1 '# Out [4] $end
$var wire 1 (# Out [3] $end
$var wire 1 )# Out [2] $end
$var wire 1 *# Out [1] $end
$var wire 1 +# Out [0] $end
$upscope $end
<<<<<<< HEAD
$scope module Sign8_Ext $end
=======
$scope module choiceC $end
>>>>>>> 2e640e2555e217a06b6c352cc5c5f6091e568d2d
$var wire 1 T# In [7] $end
$var wire 1 U# In [6] $end
$var wire 1 V# In [5] $end
$var wire 1 W# In [4] $end
$var wire 1 X# In [3] $end
$var wire 1 Y# In [2] $end
$var wire 1 Z# In [1] $end
$var wire 1 [# In [0] $end
$var wire 1 ,# Out [15] $end
$var wire 1 -# Out [14] $end
$var wire 1 .# Out [13] $end
$var wire 1 /# Out [12] $end
$var wire 1 0# Out [11] $end
$var wire 1 1# Out [10] $end
$var wire 1 2# Out [9] $end
$var wire 1 3# Out [8] $end
$var wire 1 4# Out [7] $end
$var wire 1 5# Out [6] $end
$var wire 1 6# Out [5] $end
$var wire 1 7# Out [4] $end
$var wire 1 8# Out [3] $end
$var wire 1 9# Out [2] $end
$var wire 1 :# Out [1] $end
$var wire 1 ;# Out [0] $end
$upscope $end
<<<<<<< HEAD
$scope module Sign11_Ext $end
=======
$scope module choiceD $end
>>>>>>> 2e640e2555e217a06b6c352cc5c5f6091e568d2d
$var wire 1 Q# In [10] $end
$var wire 1 R# In [9] $end
$var wire 1 S# In [8] $end
$var wire 1 T# In [7] $end
$var wire 1 U# In [6] $end
$var wire 1 V# In [5] $end
$var wire 1 W# In [4] $end
$var wire 1 X# In [3] $end
$var wire 1 Y# In [2] $end
$var wire 1 Z# In [1] $end
$var wire 1 [# In [0] $end
$var wire 1 <# Out [15] $end
$var wire 1 =# Out [14] $end
$var wire 1 ># Out [13] $end
$var wire 1 ?# Out [12] $end
$var wire 1 @# Out [11] $end
$var wire 1 A# Out [10] $end
$var wire 1 B# Out [9] $end
$var wire 1 C# Out [8] $end
$var wire 1 D# Out [7] $end
$var wire 1 E# Out [6] $end
$var wire 1 F# Out [5] $end
$var wire 1 G# Out [4] $end
$var wire 1 H# Out [3] $end
$var wire 1 I# Out [2] $end
$var wire 1 J# Out [1] $end
$var wire 1 K# Out [0] $end
$upscope $end
$upscope $end
$scope module instruction_memory $end
$var wire 1 L# data_out [15] $end
$var wire 1 M# data_out [14] $end
$var wire 1 N# data_out [13] $end
$var wire 1 O# data_out [12] $end
$var wire 1 P# data_out [11] $end
$var wire 1 Q# data_out [10] $end
$var wire 1 R# data_out [9] $end
$var wire 1 S# data_out [8] $end
$var wire 1 T# data_out [7] $end
$var wire 1 U# data_out [6] $end
$var wire 1 V# data_out [5] $end
$var wire 1 W# data_out [4] $end
$var wire 1 X# data_out [3] $end
$var wire 1 Y# data_out [2] $end
$var wire 1 Z# data_out [1] $end
$var wire 1 [# data_out [0] $end
<<<<<<< HEAD
$var wire 1 K& data_in [15] $end
$var wire 1 L& data_in [14] $end
$var wire 1 M& data_in [13] $end
$var wire 1 N& data_in [12] $end
$var wire 1 O& data_in [11] $end
$var wire 1 P& data_in [10] $end
$var wire 1 Q& data_in [9] $end
$var wire 1 R& data_in [8] $end
$var wire 1 S& data_in [7] $end
$var wire 1 T& data_in [6] $end
$var wire 1 U& data_in [5] $end
$var wire 1 V& data_in [4] $end
$var wire 1 W& data_in [3] $end
$var wire 1 X& data_in [2] $end
$var wire 1 Y& data_in [1] $end
$var wire 1 Z& data_in [0] $end
=======
$var wire 1 0) data_in [15] $end
$var wire 1 1) data_in [14] $end
$var wire 1 2) data_in [13] $end
$var wire 1 3) data_in [12] $end
$var wire 1 4) data_in [11] $end
$var wire 1 5) data_in [10] $end
$var wire 1 6) data_in [9] $end
$var wire 1 7) data_in [8] $end
$var wire 1 8) data_in [7] $end
$var wire 1 9) data_in [6] $end
$var wire 1 :) data_in [5] $end
$var wire 1 ;) data_in [4] $end
$var wire 1 <) data_in [3] $end
$var wire 1 =) data_in [2] $end
$var wire 1 >) data_in [1] $end
$var wire 1 ?) data_in [0] $end
>>>>>>> 2e640e2555e217a06b6c352cc5c5f6091e568d2d
$var wire 1 H" addr [15] $end
$var wire 1 I" addr [14] $end
$var wire 1 J" addr [13] $end
$var wire 1 K" addr [12] $end
$var wire 1 L" addr [11] $end
$var wire 1 M" addr [10] $end
$var wire 1 N" addr [9] $end
$var wire 1 O" addr [8] $end
$var wire 1 P" addr [7] $end
$var wire 1 Q" addr [6] $end
$var wire 1 R" addr [5] $end
$var wire 1 S" addr [4] $end
$var wire 1 T" addr [3] $end
$var wire 1 U" addr [2] $end
$var wire 1 V" addr [1] $end
$var wire 1 W" addr [0] $end
<<<<<<< HEAD
$var wire 1 [& enable $end
$var wire 1 \& wr $end
$var wire 1 m# createdump $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 ]& loaded $end
$var reg 17 ^& largest [16:0] $end
$var integer 32 _& mcd $end
$var integer 32 `& i $end
=======
$var wire 1 @) enable $end
$var wire 1 A) wr $end
$var wire 1 m# createdump $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 B) loaded $end
$var reg 17 C) largest [16:0] $end
$var integer 32 D) mcd $end
$var integer 32 E) i $end
>>>>>>> 2e640e2555e217a06b6c352cc5c5f6091e568d2d
$upscope $end
$scope module register_file_input $end
$var wire 1 Q# Poss_Des [8] $end
$var wire 1 R# Poss_Des [7] $end
$var wire 1 S# Poss_Des [6] $end
$var wire 1 T# Poss_Des [5] $end
$var wire 1 U# Poss_Des [4] $end
$var wire 1 V# Poss_Des [3] $end
$var wire 1 W# Poss_Des [2] $end
$var wire 1 X# Poss_Des [1] $end
$var wire 1 Y# Poss_Des [0] $end
<<<<<<< HEAD
$var wire 1 ^! Write_Reg_Sel [1] $end
$var wire 1 _! Write_Reg_Sel [0] $end
$var wire 1 [! Write_Reg [2] $end
$var wire 1 \! Write_Reg [1] $end
$var wire 1 ]! Write_Reg [0] $end
$var reg 3 a& case_out [2:0] $end
$upscope $end
$scope module register_file $end
$var parameter 32 b& width $end
=======
$var wire 1 l# Write_Back_Sel $end
$var wire 1 ]! Write_Reg [2] $end
$var wire 1 ^! Write_Reg [1] $end
$var wire 1 _! Write_Reg [0] $end
$var reg 3 F) case_out [2:0] $end
$upscope $end
$scope module register_file $end
$var parameter 32 G) width $end
>>>>>>> 2e640e2555e217a06b6c352cc5c5f6091e568d2d
$var wire 1 { clk $end
$var wire 1 } rst $end
$var wire 1 Q# read1regsel [2] $end
$var wire 1 R# read1regsel [1] $end
$var wire 1 S# read1regsel [0] $end
$var wire 1 T# read2regsel [2] $end
$var wire 1 U# read2regsel [1] $end
$var wire 1 V# read2regsel [0] $end
<<<<<<< HEAD
$var wire 1 [! writeregsel [2] $end
$var wire 1 \! writeregsel [1] $end
$var wire 1 ]! writeregsel [0] $end
=======
$var wire 1 ]! writeregsel [2] $end
$var wire 1 ^! writeregsel [1] $end
$var wire 1 _! writeregsel [0] $end
>>>>>>> 2e640e2555e217a06b6c352cc5c5f6091e568d2d
$var wire 1 \# writedata [15] $end
$var wire 1 ]# writedata [14] $end
$var wire 1 ^# writedata [13] $end
$var wire 1 _# writedata [12] $end
$var wire 1 `# writedata [11] $end
$var wire 1 a# writedata [10] $end
$var wire 1 b# writedata [9] $end
$var wire 1 c# writedata [8] $end
$var wire 1 d# writedata [7] $end
$var wire 1 e# writedata [6] $end
$var wire 1 f# writedata [5] $end
$var wire 1 g# writedata [4] $end
$var wire 1 h# writedata [3] $end
$var wire 1 i# writedata [2] $end
$var wire 1 j# writedata [1] $end
$var wire 1 k# writedata [0] $end
$var wire 1 Z! write $end
$var wire 1 `! read1data [15] $end
$var wire 1 a! read1data [14] $end
$var wire 1 b! read1data [13] $end
$var wire 1 c! read1data [12] $end
$var wire 1 d! read1data [11] $end
$var wire 1 e! read1data [10] $end
$var wire 1 f! read1data [9] $end
$var wire 1 g! read1data [8] $end
$var wire 1 h! read1data [7] $end
$var wire 1 i! read1data [6] $end
$var wire 1 j! read1data [5] $end
$var wire 1 k! read1data [4] $end
$var wire 1 l! read1data [3] $end
$var wire 1 m! read1data [2] $end
$var wire 1 n! read1data [1] $end
$var wire 1 o! read1data [0] $end
$var wire 1 p! read2data [15] $end
$var wire 1 q! read2data [14] $end
$var wire 1 r! read2data [13] $end
$var wire 1 s! read2data [12] $end
$var wire 1 t! read2data [11] $end
$var wire 1 u! read2data [10] $end
$var wire 1 v! read2data [9] $end
$var wire 1 w! read2data [8] $end
$var wire 1 x! read2data [7] $end
$var wire 1 y! read2data [6] $end
$var wire 1 z! read2data [5] $end
$var wire 1 {! read2data [4] $end
$var wire 1 |! read2data [3] $end
$var wire 1 }! read2data [2] $end
$var wire 1 ~! read2data [1] $end
$var wire 1 !" read2data [0] $end
$var wire 1 | err $end
<<<<<<< HEAD
$var wire 1 c& wri [7] $end
$var wire 1 d& wri [6] $end
$var wire 1 e& wri [5] $end
$var wire 1 f& wri [4] $end
$var wire 1 g& wri [3] $end
$var wire 1 h& wri [2] $end
$var wire 1 i& wri [1] $end
$var wire 1 j& wri [0] $end
$var wire 1 k& regOut $end
$scope module Reg0 $end
$var parameter 32 l& Data_Width $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var wire 1 j& write $end
=======
$var wire 1 H) wri [7] $end
$var wire 1 I) wri [6] $end
$var wire 1 J) wri [5] $end
$var wire 1 K) wri [4] $end
$var wire 1 L) wri [3] $end
$var wire 1 M) wri [2] $end
$var wire 1 N) wri [1] $end
$var wire 1 O) wri [0] $end
$var wire 1 P) regOut $end
$scope module Reg0 $end
$var parameter 32 Q) Data_Width $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var wire 1 O) write $end
>>>>>>> 2e640e2555e217a06b6c352cc5c5f6091e568d2d
$var wire 1 \# wdata [15] $end
$var wire 1 ]# wdata [14] $end
$var wire 1 ^# wdata [13] $end
$var wire 1 _# wdata [12] $end
$var wire 1 `# wdata [11] $end
$var wire 1 a# wdata [10] $end
$var wire 1 b# wdata [9] $end
$var wire 1 c# wdata [8] $end
$var wire 1 d# wdata [7] $end
$var wire 1 e# wdata [6] $end
$var wire 1 f# wdata [5] $end
$var wire 1 g# wdata [4] $end
$var wire 1 h# wdata [3] $end
$var wire 1 i# wdata [2] $end
$var wire 1 j# wdata [1] $end
$var wire 1 k# wdata [0] $end
<<<<<<< HEAD
$var wire 1 m& rdata [15] $end
$var wire 1 n& rdata [14] $end
$var wire 1 o& rdata [13] $end
$var wire 1 p& rdata [12] $end
$var wire 1 q& rdata [11] $end
$var wire 1 r& rdata [10] $end
$var wire 1 s& rdata [9] $end
$var wire 1 t& rdata [8] $end
$var wire 1 u& rdata [7] $end
$var wire 1 v& rdata [6] $end
$var wire 1 w& rdata [5] $end
$var wire 1 x& rdata [4] $end
$var wire 1 y& rdata [3] $end
$var wire 1 z& rdata [2] $end
$var wire 1 {& rdata [1] $end
$var wire 1 k& rdata [0] $end
$var wire 1 |& in [15] $end
$var wire 1 }& in [14] $end
$var wire 1 ~& in [13] $end
$var wire 1 !' in [12] $end
$var wire 1 "' in [11] $end
$var wire 1 #' in [10] $end
$var wire 1 $' in [9] $end
$var wire 1 %' in [8] $end
$var wire 1 &' in [7] $end
$var wire 1 '' in [6] $end
$var wire 1 (' in [5] $end
$var wire 1 )' in [4] $end
$var wire 1 *' in [3] $end
$var wire 1 +' in [2] $end
$var wire 1 ,' in [1] $end
$var wire 1 -' in [0] $end
$scope module bit[15] $end
$var wire 1 m& q $end
$var wire 1 |& d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 .' state $end
$upscope $end
$scope module bit[14] $end
$var wire 1 n& q $end
$var wire 1 }& d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 /' state $end
$upscope $end
$scope module bit[13] $end
$var wire 1 o& q $end
$var wire 1 ~& d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 0' state $end
$upscope $end
$scope module bit[12] $end
$var wire 1 p& q $end
$var wire 1 !' d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 1' state $end
$upscope $end
$scope module bit[11] $end
$var wire 1 q& q $end
$var wire 1 "' d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 2' state $end
$upscope $end
$scope module bit[10] $end
$var wire 1 r& q $end
$var wire 1 #' d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 3' state $end
$upscope $end
$scope module bit[9] $end
$var wire 1 s& q $end
$var wire 1 $' d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 4' state $end
$upscope $end
$scope module bit[8] $end
$var wire 1 t& q $end
$var wire 1 %' d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 5' state $end
$upscope $end
$scope module bit[7] $end
$var wire 1 u& q $end
$var wire 1 &' d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 6' state $end
$upscope $end
$scope module bit[6] $end
$var wire 1 v& q $end
$var wire 1 '' d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 7' state $end
$upscope $end
$scope module bit[5] $end
$var wire 1 w& q $end
$var wire 1 (' d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 8' state $end
$upscope $end
$scope module bit[4] $end
$var wire 1 x& q $end
$var wire 1 )' d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 9' state $end
$upscope $end
$scope module bit[3] $end
$var wire 1 y& q $end
$var wire 1 *' d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 :' state $end
$upscope $end
$scope module bit[2] $end
$var wire 1 z& q $end
$var wire 1 +' d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 ;' state $end
$upscope $end
$scope module bit[1] $end
$var wire 1 {& q $end
$var wire 1 ,' d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 <' state $end
$upscope $end
$scope module bit[0] $end
$var wire 1 k& q $end
$var wire 1 -' d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 =' state $end
$upscope $end
$upscope $end
$scope module Reg1 $end
$var parameter 32 >' Data_Width $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var wire 1 i& write $end
=======
$var wire 1 R) rdata [15] $end
$var wire 1 S) rdata [14] $end
$var wire 1 T) rdata [13] $end
$var wire 1 U) rdata [12] $end
$var wire 1 V) rdata [11] $end
$var wire 1 W) rdata [10] $end
$var wire 1 X) rdata [9] $end
$var wire 1 Y) rdata [8] $end
$var wire 1 Z) rdata [7] $end
$var wire 1 [) rdata [6] $end
$var wire 1 \) rdata [5] $end
$var wire 1 ]) rdata [4] $end
$var wire 1 ^) rdata [3] $end
$var wire 1 _) rdata [2] $end
$var wire 1 `) rdata [1] $end
$var wire 1 P) rdata [0] $end
$var wire 1 a) in [15] $end
$var wire 1 b) in [14] $end
$var wire 1 c) in [13] $end
$var wire 1 d) in [12] $end
$var wire 1 e) in [11] $end
$var wire 1 f) in [10] $end
$var wire 1 g) in [9] $end
$var wire 1 h) in [8] $end
$var wire 1 i) in [7] $end
$var wire 1 j) in [6] $end
$var wire 1 k) in [5] $end
$var wire 1 l) in [4] $end
$var wire 1 m) in [3] $end
$var wire 1 n) in [2] $end
$var wire 1 o) in [1] $end
$var wire 1 p) in [0] $end
$scope module bit[15] $end
$var wire 1 R) q $end
$var wire 1 a) d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 q) state $end
$upscope $end
$scope module bit[14] $end
$var wire 1 S) q $end
$var wire 1 b) d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 r) state $end
$upscope $end
$scope module bit[13] $end
$var wire 1 T) q $end
$var wire 1 c) d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 s) state $end
$upscope $end
$scope module bit[12] $end
$var wire 1 U) q $end
$var wire 1 d) d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 t) state $end
$upscope $end
$scope module bit[11] $end
$var wire 1 V) q $end
$var wire 1 e) d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 u) state $end
$upscope $end
$scope module bit[10] $end
$var wire 1 W) q $end
$var wire 1 f) d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 v) state $end
$upscope $end
$scope module bit[9] $end
$var wire 1 X) q $end
$var wire 1 g) d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 w) state $end
$upscope $end
$scope module bit[8] $end
$var wire 1 Y) q $end
$var wire 1 h) d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 x) state $end
$upscope $end
$scope module bit[7] $end
$var wire 1 Z) q $end
$var wire 1 i) d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 y) state $end
$upscope $end
$scope module bit[6] $end
$var wire 1 [) q $end
$var wire 1 j) d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 z) state $end
$upscope $end
$scope module bit[5] $end
$var wire 1 \) q $end
$var wire 1 k) d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 {) state $end
$upscope $end
$scope module bit[4] $end
$var wire 1 ]) q $end
$var wire 1 l) d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 |) state $end
$upscope $end
$scope module bit[3] $end
$var wire 1 ^) q $end
$var wire 1 m) d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 }) state $end
$upscope $end
$scope module bit[2] $end
$var wire 1 _) q $end
$var wire 1 n) d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 ~) state $end
$upscope $end
$scope module bit[1] $end
$var wire 1 `) q $end
$var wire 1 o) d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 !* state $end
$upscope $end
$scope module bit[0] $end
$var wire 1 P) q $end
$var wire 1 p) d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 "* state $end
$upscope $end
$upscope $end
$scope module Reg1 $end
$var parameter 32 #* Data_Width $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var wire 1 N) write $end
>>>>>>> 2e640e2555e217a06b6c352cc5c5f6091e568d2d
$var wire 1 \# wdata [15] $end
$var wire 1 ]# wdata [14] $end
$var wire 1 ^# wdata [13] $end
$var wire 1 _# wdata [12] $end
$var wire 1 `# wdata [11] $end
$var wire 1 a# wdata [10] $end
$var wire 1 b# wdata [9] $end
$var wire 1 c# wdata [8] $end
$var wire 1 d# wdata [7] $end
$var wire 1 e# wdata [6] $end
$var wire 1 f# wdata [5] $end
$var wire 1 g# wdata [4] $end
$var wire 1 h# wdata [3] $end
$var wire 1 i# wdata [2] $end
$var wire 1 j# wdata [1] $end
$var wire 1 k# wdata [0] $end
<<<<<<< HEAD
$var wire 1 ?' rdata [15] $end
$var wire 1 @' rdata [14] $end
$var wire 1 A' rdata [13] $end
$var wire 1 B' rdata [12] $end
$var wire 1 C' rdata [11] $end
$var wire 1 D' rdata [10] $end
$var wire 1 E' rdata [9] $end
$var wire 1 F' rdata [8] $end
$var wire 1 G' rdata [7] $end
$var wire 1 H' rdata [6] $end
$var wire 1 I' rdata [5] $end
$var wire 1 J' rdata [4] $end
$var wire 1 K' rdata [3] $end
$var wire 1 L' rdata [2] $end
$var wire 1 M' rdata [1] $end
$var wire 1 N' rdata [0] $end
$var wire 1 O' in [15] $end
$var wire 1 P' in [14] $end
$var wire 1 Q' in [13] $end
$var wire 1 R' in [12] $end
$var wire 1 S' in [11] $end
$var wire 1 T' in [10] $end
$var wire 1 U' in [9] $end
$var wire 1 V' in [8] $end
$var wire 1 W' in [7] $end
$var wire 1 X' in [6] $end
$var wire 1 Y' in [5] $end
$var wire 1 Z' in [4] $end
$var wire 1 [' in [3] $end
$var wire 1 \' in [2] $end
$var wire 1 ]' in [1] $end
$var wire 1 ^' in [0] $end
$scope module bit[15] $end
$var wire 1 ?' q $end
$var wire 1 O' d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 _' state $end
$upscope $end
$scope module bit[14] $end
$var wire 1 @' q $end
$var wire 1 P' d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 `' state $end
$upscope $end
$scope module bit[13] $end
$var wire 1 A' q $end
$var wire 1 Q' d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 a' state $end
$upscope $end
$scope module bit[12] $end
$var wire 1 B' q $end
$var wire 1 R' d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 b' state $end
$upscope $end
$scope module bit[11] $end
$var wire 1 C' q $end
$var wire 1 S' d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 c' state $end
$upscope $end
$scope module bit[10] $end
$var wire 1 D' q $end
$var wire 1 T' d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 d' state $end
$upscope $end
$scope module bit[9] $end
$var wire 1 E' q $end
$var wire 1 U' d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 e' state $end
$upscope $end
$scope module bit[8] $end
$var wire 1 F' q $end
$var wire 1 V' d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 f' state $end
$upscope $end
$scope module bit[7] $end
$var wire 1 G' q $end
$var wire 1 W' d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 g' state $end
$upscope $end
$scope module bit[6] $end
$var wire 1 H' q $end
$var wire 1 X' d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 h' state $end
$upscope $end
$scope module bit[5] $end
$var wire 1 I' q $end
$var wire 1 Y' d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 i' state $end
$upscope $end
$scope module bit[4] $end
$var wire 1 J' q $end
$var wire 1 Z' d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 j' state $end
$upscope $end
$scope module bit[3] $end
$var wire 1 K' q $end
$var wire 1 [' d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 k' state $end
$upscope $end
$scope module bit[2] $end
$var wire 1 L' q $end
$var wire 1 \' d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 l' state $end
$upscope $end
$scope module bit[1] $end
$var wire 1 M' q $end
$var wire 1 ]' d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 m' state $end
$upscope $end
$scope module bit[0] $end
$var wire 1 N' q $end
$var wire 1 ^' d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 n' state $end
$upscope $end
$upscope $end
$scope module Reg2 $end
$var parameter 32 o' Data_Width $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var wire 1 h& write $end
=======
$var wire 1 $* rdata [15] $end
$var wire 1 %* rdata [14] $end
$var wire 1 &* rdata [13] $end
$var wire 1 '* rdata [12] $end
$var wire 1 (* rdata [11] $end
$var wire 1 )* rdata [10] $end
$var wire 1 ** rdata [9] $end
$var wire 1 +* rdata [8] $end
$var wire 1 ,* rdata [7] $end
$var wire 1 -* rdata [6] $end
$var wire 1 .* rdata [5] $end
$var wire 1 /* rdata [4] $end
$var wire 1 0* rdata [3] $end
$var wire 1 1* rdata [2] $end
$var wire 1 2* rdata [1] $end
$var wire 1 3* rdata [0] $end
$var wire 1 4* in [15] $end
$var wire 1 5* in [14] $end
$var wire 1 6* in [13] $end
$var wire 1 7* in [12] $end
$var wire 1 8* in [11] $end
$var wire 1 9* in [10] $end
$var wire 1 :* in [9] $end
$var wire 1 ;* in [8] $end
$var wire 1 <* in [7] $end
$var wire 1 =* in [6] $end
$var wire 1 >* in [5] $end
$var wire 1 ?* in [4] $end
$var wire 1 @* in [3] $end
$var wire 1 A* in [2] $end
$var wire 1 B* in [1] $end
$var wire 1 C* in [0] $end
$scope module bit[15] $end
$var wire 1 $* q $end
$var wire 1 4* d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 D* state $end
$upscope $end
$scope module bit[14] $end
$var wire 1 %* q $end
$var wire 1 5* d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 E* state $end
$upscope $end
$scope module bit[13] $end
$var wire 1 &* q $end
$var wire 1 6* d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 F* state $end
$upscope $end
$scope module bit[12] $end
$var wire 1 '* q $end
$var wire 1 7* d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 G* state $end
$upscope $end
$scope module bit[11] $end
$var wire 1 (* q $end
$var wire 1 8* d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 H* state $end
$upscope $end
$scope module bit[10] $end
$var wire 1 )* q $end
$var wire 1 9* d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 I* state $end
$upscope $end
$scope module bit[9] $end
$var wire 1 ** q $end
$var wire 1 :* d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 J* state $end
$upscope $end
$scope module bit[8] $end
$var wire 1 +* q $end
$var wire 1 ;* d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 K* state $end
$upscope $end
$scope module bit[7] $end
$var wire 1 ,* q $end
$var wire 1 <* d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 L* state $end
$upscope $end
$scope module bit[6] $end
$var wire 1 -* q $end
$var wire 1 =* d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 M* state $end
$upscope $end
$scope module bit[5] $end
$var wire 1 .* q $end
$var wire 1 >* d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 N* state $end
$upscope $end
$scope module bit[4] $end
$var wire 1 /* q $end
$var wire 1 ?* d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 O* state $end
$upscope $end
$scope module bit[3] $end
$var wire 1 0* q $end
$var wire 1 @* d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 P* state $end
$upscope $end
$scope module bit[2] $end
$var wire 1 1* q $end
$var wire 1 A* d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 Q* state $end
$upscope $end
$scope module bit[1] $end
$var wire 1 2* q $end
$var wire 1 B* d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 R* state $end
$upscope $end
$scope module bit[0] $end
$var wire 1 3* q $end
$var wire 1 C* d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 S* state $end
$upscope $end
$upscope $end
$scope module Reg2 $end
$var parameter 32 T* Data_Width $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var wire 1 M) write $end
>>>>>>> 2e640e2555e217a06b6c352cc5c5f6091e568d2d
$var wire 1 \# wdata [15] $end
$var wire 1 ]# wdata [14] $end
$var wire 1 ^# wdata [13] $end
$var wire 1 _# wdata [12] $end
$var wire 1 `# wdata [11] $end
$var wire 1 a# wdata [10] $end
$var wire 1 b# wdata [9] $end
$var wire 1 c# wdata [8] $end
$var wire 1 d# wdata [7] $end
$var wire 1 e# wdata [6] $end
$var wire 1 f# wdata [5] $end
$var wire 1 g# wdata [4] $end
$var wire 1 h# wdata [3] $end
$var wire 1 i# wdata [2] $end
$var wire 1 j# wdata [1] $end
$var wire 1 k# wdata [0] $end
<<<<<<< HEAD
$var wire 1 p' rdata [15] $end
$var wire 1 q' rdata [14] $end
$var wire 1 r' rdata [13] $end
$var wire 1 s' rdata [12] $end
$var wire 1 t' rdata [11] $end
$var wire 1 u' rdata [10] $end
$var wire 1 v' rdata [9] $end
$var wire 1 w' rdata [8] $end
$var wire 1 x' rdata [7] $end
$var wire 1 y' rdata [6] $end
$var wire 1 z' rdata [5] $end
$var wire 1 {' rdata [4] $end
$var wire 1 |' rdata [3] $end
$var wire 1 }' rdata [2] $end
$var wire 1 ~' rdata [1] $end
$var wire 1 !( rdata [0] $end
$var wire 1 "( in [15] $end
$var wire 1 #( in [14] $end
$var wire 1 $( in [13] $end
$var wire 1 %( in [12] $end
$var wire 1 &( in [11] $end
$var wire 1 '( in [10] $end
$var wire 1 (( in [9] $end
$var wire 1 )( in [8] $end
$var wire 1 *( in [7] $end
$var wire 1 +( in [6] $end
$var wire 1 ,( in [5] $end
$var wire 1 -( in [4] $end
$var wire 1 .( in [3] $end
$var wire 1 /( in [2] $end
$var wire 1 0( in [1] $end
$var wire 1 1( in [0] $end
$scope module bit[15] $end
$var wire 1 p' q $end
$var wire 1 "( d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 2( state $end
$upscope $end
$scope module bit[14] $end
$var wire 1 q' q $end
$var wire 1 #( d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 3( state $end
$upscope $end
$scope module bit[13] $end
$var wire 1 r' q $end
$var wire 1 $( d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 4( state $end
$upscope $end
$scope module bit[12] $end
$var wire 1 s' q $end
$var wire 1 %( d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 5( state $end
$upscope $end
$scope module bit[11] $end
$var wire 1 t' q $end
$var wire 1 &( d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 6( state $end
$upscope $end
$scope module bit[10] $end
$var wire 1 u' q $end
$var wire 1 '( d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 7( state $end
$upscope $end
$scope module bit[9] $end
$var wire 1 v' q $end
$var wire 1 (( d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 8( state $end
$upscope $end
$scope module bit[8] $end
$var wire 1 w' q $end
$var wire 1 )( d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 9( state $end
$upscope $end
$scope module bit[7] $end
$var wire 1 x' q $end
$var wire 1 *( d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 :( state $end
$upscope $end
$scope module bit[6] $end
$var wire 1 y' q $end
$var wire 1 +( d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 ;( state $end
$upscope $end
$scope module bit[5] $end
$var wire 1 z' q $end
$var wire 1 ,( d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 <( state $end
$upscope $end
$scope module bit[4] $end
$var wire 1 {' q $end
$var wire 1 -( d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 =( state $end
$upscope $end
$scope module bit[3] $end
$var wire 1 |' q $end
$var wire 1 .( d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 >( state $end
$upscope $end
$scope module bit[2] $end
$var wire 1 }' q $end
$var wire 1 /( d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 ?( state $end
$upscope $end
$scope module bit[1] $end
$var wire 1 ~' q $end
$var wire 1 0( d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 @( state $end
$upscope $end
$scope module bit[0] $end
$var wire 1 !( q $end
$var wire 1 1( d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 A( state $end
$upscope $end
$upscope $end
$scope module Reg3 $end
$var parameter 32 B( Data_Width $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var wire 1 g& write $end
=======
$var wire 1 U* rdata [15] $end
$var wire 1 V* rdata [14] $end
$var wire 1 W* rdata [13] $end
$var wire 1 X* rdata [12] $end
$var wire 1 Y* rdata [11] $end
$var wire 1 Z* rdata [10] $end
$var wire 1 [* rdata [9] $end
$var wire 1 \* rdata [8] $end
$var wire 1 ]* rdata [7] $end
$var wire 1 ^* rdata [6] $end
$var wire 1 _* rdata [5] $end
$var wire 1 `* rdata [4] $end
$var wire 1 a* rdata [3] $end
$var wire 1 b* rdata [2] $end
$var wire 1 c* rdata [1] $end
$var wire 1 d* rdata [0] $end
$var wire 1 e* in [15] $end
$var wire 1 f* in [14] $end
$var wire 1 g* in [13] $end
$var wire 1 h* in [12] $end
$var wire 1 i* in [11] $end
$var wire 1 j* in [10] $end
$var wire 1 k* in [9] $end
$var wire 1 l* in [8] $end
$var wire 1 m* in [7] $end
$var wire 1 n* in [6] $end
$var wire 1 o* in [5] $end
$var wire 1 p* in [4] $end
$var wire 1 q* in [3] $end
$var wire 1 r* in [2] $end
$var wire 1 s* in [1] $end
$var wire 1 t* in [0] $end
$scope module bit[15] $end
$var wire 1 U* q $end
$var wire 1 e* d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 u* state $end
$upscope $end
$scope module bit[14] $end
$var wire 1 V* q $end
$var wire 1 f* d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 v* state $end
$upscope $end
$scope module bit[13] $end
$var wire 1 W* q $end
$var wire 1 g* d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 w* state $end
$upscope $end
$scope module bit[12] $end
$var wire 1 X* q $end
$var wire 1 h* d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 x* state $end
$upscope $end
$scope module bit[11] $end
$var wire 1 Y* q $end
$var wire 1 i* d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 y* state $end
$upscope $end
$scope module bit[10] $end
$var wire 1 Z* q $end
$var wire 1 j* d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 z* state $end
$upscope $end
$scope module bit[9] $end
$var wire 1 [* q $end
$var wire 1 k* d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 {* state $end
$upscope $end
$scope module bit[8] $end
$var wire 1 \* q $end
$var wire 1 l* d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 |* state $end
$upscope $end
$scope module bit[7] $end
$var wire 1 ]* q $end
$var wire 1 m* d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 }* state $end
$upscope $end
$scope module bit[6] $end
$var wire 1 ^* q $end
$var wire 1 n* d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 ~* state $end
$upscope $end
$scope module bit[5] $end
$var wire 1 _* q $end
$var wire 1 o* d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 !+ state $end
$upscope $end
$scope module bit[4] $end
$var wire 1 `* q $end
$var wire 1 p* d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 "+ state $end
$upscope $end
$scope module bit[3] $end
$var wire 1 a* q $end
$var wire 1 q* d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 #+ state $end
$upscope $end
$scope module bit[2] $end
$var wire 1 b* q $end
$var wire 1 r* d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 $+ state $end
$upscope $end
$scope module bit[1] $end
$var wire 1 c* q $end
$var wire 1 s* d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 %+ state $end
$upscope $end
$scope module bit[0] $end
$var wire 1 d* q $end
$var wire 1 t* d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 &+ state $end
$upscope $end
$upscope $end
$scope module Reg3 $end
$var parameter 32 '+ Data_Width $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var wire 1 L) write $end
>>>>>>> 2e640e2555e217a06b6c352cc5c5f6091e568d2d
$var wire 1 \# wdata [15] $end
$var wire 1 ]# wdata [14] $end
$var wire 1 ^# wdata [13] $end
$var wire 1 _# wdata [12] $end
$var wire 1 `# wdata [11] $end
$var wire 1 a# wdata [10] $end
$var wire 1 b# wdata [9] $end
$var wire 1 c# wdata [8] $end
$var wire 1 d# wdata [7] $end
$var wire 1 e# wdata [6] $end
$var wire 1 f# wdata [5] $end
$var wire 1 g# wdata [4] $end
$var wire 1 h# wdata [3] $end
$var wire 1 i# wdata [2] $end
$var wire 1 j# wdata [1] $end
$var wire 1 k# wdata [0] $end
<<<<<<< HEAD
$var wire 1 C( rdata [15] $end
$var wire 1 D( rdata [14] $end
$var wire 1 E( rdata [13] $end
$var wire 1 F( rdata [12] $end
$var wire 1 G( rdata [11] $end
$var wire 1 H( rdata [10] $end
$var wire 1 I( rdata [9] $end
$var wire 1 J( rdata [8] $end
$var wire 1 K( rdata [7] $end
$var wire 1 L( rdata [6] $end
$var wire 1 M( rdata [5] $end
$var wire 1 N( rdata [4] $end
$var wire 1 O( rdata [3] $end
$var wire 1 P( rdata [2] $end
$var wire 1 Q( rdata [1] $end
$var wire 1 R( rdata [0] $end
$var wire 1 S( in [15] $end
$var wire 1 T( in [14] $end
$var wire 1 U( in [13] $end
$var wire 1 V( in [12] $end
$var wire 1 W( in [11] $end
$var wire 1 X( in [10] $end
$var wire 1 Y( in [9] $end
$var wire 1 Z( in [8] $end
$var wire 1 [( in [7] $end
$var wire 1 \( in [6] $end
$var wire 1 ]( in [5] $end
$var wire 1 ^( in [4] $end
$var wire 1 _( in [3] $end
$var wire 1 `( in [2] $end
$var wire 1 a( in [1] $end
$var wire 1 b( in [0] $end
$scope module bit[15] $end
$var wire 1 C( q $end
$var wire 1 S( d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 c( state $end
$upscope $end
$scope module bit[14] $end
$var wire 1 D( q $end
$var wire 1 T( d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 d( state $end
$upscope $end
$scope module bit[13] $end
$var wire 1 E( q $end
$var wire 1 U( d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 e( state $end
$upscope $end
$scope module bit[12] $end
$var wire 1 F( q $end
$var wire 1 V( d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 f( state $end
$upscope $end
$scope module bit[11] $end
$var wire 1 G( q $end
$var wire 1 W( d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 g( state $end
$upscope $end
$scope module bit[10] $end
$var wire 1 H( q $end
$var wire 1 X( d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 h( state $end
$upscope $end
$scope module bit[9] $end
$var wire 1 I( q $end
$var wire 1 Y( d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 i( state $end
$upscope $end
$scope module bit[8] $end
$var wire 1 J( q $end
$var wire 1 Z( d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 j( state $end
$upscope $end
$scope module bit[7] $end
$var wire 1 K( q $end
$var wire 1 [( d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 k( state $end
$upscope $end
$scope module bit[6] $end
$var wire 1 L( q $end
$var wire 1 \( d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 l( state $end
$upscope $end
$scope module bit[5] $end
$var wire 1 M( q $end
$var wire 1 ]( d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 m( state $end
$upscope $end
$scope module bit[4] $end
$var wire 1 N( q $end
$var wire 1 ^( d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 n( state $end
$upscope $end
$scope module bit[3] $end
$var wire 1 O( q $end
$var wire 1 _( d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 o( state $end
$upscope $end
$scope module bit[2] $end
$var wire 1 P( q $end
$var wire 1 `( d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 p( state $end
$upscope $end
$scope module bit[1] $end
$var wire 1 Q( q $end
$var wire 1 a( d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 q( state $end
$upscope $end
$scope module bit[0] $end
$var wire 1 R( q $end
$var wire 1 b( d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 r( state $end
$upscope $end
$upscope $end
$scope module Reg4 $end
$var parameter 32 s( Data_Width $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var wire 1 f& write $end
=======
$var wire 1 (+ rdata [15] $end
$var wire 1 )+ rdata [14] $end
$var wire 1 *+ rdata [13] $end
$var wire 1 ++ rdata [12] $end
$var wire 1 ,+ rdata [11] $end
$var wire 1 -+ rdata [10] $end
$var wire 1 .+ rdata [9] $end
$var wire 1 /+ rdata [8] $end
$var wire 1 0+ rdata [7] $end
$var wire 1 1+ rdata [6] $end
$var wire 1 2+ rdata [5] $end
$var wire 1 3+ rdata [4] $end
$var wire 1 4+ rdata [3] $end
$var wire 1 5+ rdata [2] $end
$var wire 1 6+ rdata [1] $end
$var wire 1 7+ rdata [0] $end
$var wire 1 8+ in [15] $end
$var wire 1 9+ in [14] $end
$var wire 1 :+ in [13] $end
$var wire 1 ;+ in [12] $end
$var wire 1 <+ in [11] $end
$var wire 1 =+ in [10] $end
$var wire 1 >+ in [9] $end
$var wire 1 ?+ in [8] $end
$var wire 1 @+ in [7] $end
$var wire 1 A+ in [6] $end
$var wire 1 B+ in [5] $end
$var wire 1 C+ in [4] $end
$var wire 1 D+ in [3] $end
$var wire 1 E+ in [2] $end
$var wire 1 F+ in [1] $end
$var wire 1 G+ in [0] $end
$scope module bit[15] $end
$var wire 1 (+ q $end
$var wire 1 8+ d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 H+ state $end
$upscope $end
$scope module bit[14] $end
$var wire 1 )+ q $end
$var wire 1 9+ d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 I+ state $end
$upscope $end
$scope module bit[13] $end
$var wire 1 *+ q $end
$var wire 1 :+ d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 J+ state $end
$upscope $end
$scope module bit[12] $end
$var wire 1 ++ q $end
$var wire 1 ;+ d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 K+ state $end
$upscope $end
$scope module bit[11] $end
$var wire 1 ,+ q $end
$var wire 1 <+ d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 L+ state $end
$upscope $end
$scope module bit[10] $end
$var wire 1 -+ q $end
$var wire 1 =+ d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 M+ state $end
$upscope $end
$scope module bit[9] $end
$var wire 1 .+ q $end
$var wire 1 >+ d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 N+ state $end
$upscope $end
$scope module bit[8] $end
$var wire 1 /+ q $end
$var wire 1 ?+ d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 O+ state $end
$upscope $end
$scope module bit[7] $end
$var wire 1 0+ q $end
$var wire 1 @+ d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 P+ state $end
$upscope $end
$scope module bit[6] $end
$var wire 1 1+ q $end
$var wire 1 A+ d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 Q+ state $end
$upscope $end
$scope module bit[5] $end
$var wire 1 2+ q $end
$var wire 1 B+ d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 R+ state $end
$upscope $end
$scope module bit[4] $end
$var wire 1 3+ q $end
$var wire 1 C+ d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 S+ state $end
$upscope $end
$scope module bit[3] $end
$var wire 1 4+ q $end
$var wire 1 D+ d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 T+ state $end
$upscope $end
$scope module bit[2] $end
$var wire 1 5+ q $end
$var wire 1 E+ d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 U+ state $end
$upscope $end
$scope module bit[1] $end
$var wire 1 6+ q $end
$var wire 1 F+ d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 V+ state $end
$upscope $end
$scope module bit[0] $end
$var wire 1 7+ q $end
$var wire 1 G+ d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 W+ state $end
$upscope $end
$upscope $end
$scope module Reg4 $end
$var parameter 32 X+ Data_Width $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var wire 1 K) write $end
>>>>>>> 2e640e2555e217a06b6c352cc5c5f6091e568d2d
$var wire 1 \# wdata [15] $end
$var wire 1 ]# wdata [14] $end
$var wire 1 ^# wdata [13] $end
$var wire 1 _# wdata [12] $end
$var wire 1 `# wdata [11] $end
$var wire 1 a# wdata [10] $end
$var wire 1 b# wdata [9] $end
$var wire 1 c# wdata [8] $end
$var wire 1 d# wdata [7] $end
$var wire 1 e# wdata [6] $end
$var wire 1 f# wdata [5] $end
$var wire 1 g# wdata [4] $end
$var wire 1 h# wdata [3] $end
$var wire 1 i# wdata [2] $end
$var wire 1 j# wdata [1] $end
$var wire 1 k# wdata [0] $end
<<<<<<< HEAD
$var wire 1 t( rdata [15] $end
$var wire 1 u( rdata [14] $end
$var wire 1 v( rdata [13] $end
$var wire 1 w( rdata [12] $end
$var wire 1 x( rdata [11] $end
$var wire 1 y( rdata [10] $end
$var wire 1 z( rdata [9] $end
$var wire 1 {( rdata [8] $end
$var wire 1 |( rdata [7] $end
$var wire 1 }( rdata [6] $end
$var wire 1 ~( rdata [5] $end
$var wire 1 !) rdata [4] $end
$var wire 1 ") rdata [3] $end
$var wire 1 #) rdata [2] $end
$var wire 1 $) rdata [1] $end
$var wire 1 %) rdata [0] $end
$var wire 1 &) in [15] $end
$var wire 1 ') in [14] $end
$var wire 1 () in [13] $end
$var wire 1 )) in [12] $end
$var wire 1 *) in [11] $end
$var wire 1 +) in [10] $end
$var wire 1 ,) in [9] $end
$var wire 1 -) in [8] $end
$var wire 1 .) in [7] $end
$var wire 1 /) in [6] $end
$var wire 1 0) in [5] $end
$var wire 1 1) in [4] $end
$var wire 1 2) in [3] $end
$var wire 1 3) in [2] $end
$var wire 1 4) in [1] $end
$var wire 1 5) in [0] $end
$scope module bit[15] $end
$var wire 1 t( q $end
$var wire 1 &) d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 6) state $end
$upscope $end
$scope module bit[14] $end
$var wire 1 u( q $end
$var wire 1 ') d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 7) state $end
$upscope $end
$scope module bit[13] $end
$var wire 1 v( q $end
$var wire 1 () d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 8) state $end
$upscope $end
$scope module bit[12] $end
$var wire 1 w( q $end
$var wire 1 )) d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 9) state $end
$upscope $end
$scope module bit[11] $end
$var wire 1 x( q $end
$var wire 1 *) d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 :) state $end
$upscope $end
$scope module bit[10] $end
$var wire 1 y( q $end
$var wire 1 +) d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 ;) state $end
$upscope $end
$scope module bit[9] $end
$var wire 1 z( q $end
$var wire 1 ,) d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 <) state $end
$upscope $end
$scope module bit[8] $end
$var wire 1 {( q $end
$var wire 1 -) d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 =) state $end
$upscope $end
$scope module bit[7] $end
$var wire 1 |( q $end
$var wire 1 .) d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 >) state $end
$upscope $end
$scope module bit[6] $end
$var wire 1 }( q $end
$var wire 1 /) d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 ?) state $end
$upscope $end
$scope module bit[5] $end
$var wire 1 ~( q $end
$var wire 1 0) d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 @) state $end
$upscope $end
$scope module bit[4] $end
$var wire 1 !) q $end
$var wire 1 1) d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 A) state $end
$upscope $end
$scope module bit[3] $end
$var wire 1 ") q $end
$var wire 1 2) d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 B) state $end
$upscope $end
$scope module bit[2] $end
$var wire 1 #) q $end
$var wire 1 3) d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 C) state $end
$upscope $end
$scope module bit[1] $end
$var wire 1 $) q $end
$var wire 1 4) d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 D) state $end
$upscope $end
$scope module bit[0] $end
$var wire 1 %) q $end
$var wire 1 5) d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 E) state $end
$upscope $end
$upscope $end
$scope module Reg5 $end
$var parameter 32 F) Data_Width $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var wire 1 e& write $end
=======
$var wire 1 Y+ rdata [15] $end
$var wire 1 Z+ rdata [14] $end
$var wire 1 [+ rdata [13] $end
$var wire 1 \+ rdata [12] $end
$var wire 1 ]+ rdata [11] $end
$var wire 1 ^+ rdata [10] $end
$var wire 1 _+ rdata [9] $end
$var wire 1 `+ rdata [8] $end
$var wire 1 a+ rdata [7] $end
$var wire 1 b+ rdata [6] $end
$var wire 1 c+ rdata [5] $end
$var wire 1 d+ rdata [4] $end
$var wire 1 e+ rdata [3] $end
$var wire 1 f+ rdata [2] $end
$var wire 1 g+ rdata [1] $end
$var wire 1 h+ rdata [0] $end
$var wire 1 i+ in [15] $end
$var wire 1 j+ in [14] $end
$var wire 1 k+ in [13] $end
$var wire 1 l+ in [12] $end
$var wire 1 m+ in [11] $end
$var wire 1 n+ in [10] $end
$var wire 1 o+ in [9] $end
$var wire 1 p+ in [8] $end
$var wire 1 q+ in [7] $end
$var wire 1 r+ in [6] $end
$var wire 1 s+ in [5] $end
$var wire 1 t+ in [4] $end
$var wire 1 u+ in [3] $end
$var wire 1 v+ in [2] $end
$var wire 1 w+ in [1] $end
$var wire 1 x+ in [0] $end
$scope module bit[15] $end
$var wire 1 Y+ q $end
$var wire 1 i+ d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 y+ state $end
$upscope $end
$scope module bit[14] $end
$var wire 1 Z+ q $end
$var wire 1 j+ d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 z+ state $end
$upscope $end
$scope module bit[13] $end
$var wire 1 [+ q $end
$var wire 1 k+ d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 {+ state $end
$upscope $end
$scope module bit[12] $end
$var wire 1 \+ q $end
$var wire 1 l+ d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 |+ state $end
$upscope $end
$scope module bit[11] $end
$var wire 1 ]+ q $end
$var wire 1 m+ d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 }+ state $end
$upscope $end
$scope module bit[10] $end
$var wire 1 ^+ q $end
$var wire 1 n+ d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 ~+ state $end
$upscope $end
$scope module bit[9] $end
$var wire 1 _+ q $end
$var wire 1 o+ d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 !, state $end
$upscope $end
$scope module bit[8] $end
$var wire 1 `+ q $end
$var wire 1 p+ d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 ", state $end
$upscope $end
$scope module bit[7] $end
$var wire 1 a+ q $end
$var wire 1 q+ d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 #, state $end
$upscope $end
$scope module bit[6] $end
$var wire 1 b+ q $end
$var wire 1 r+ d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 $, state $end
$upscope $end
$scope module bit[5] $end
$var wire 1 c+ q $end
$var wire 1 s+ d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 %, state $end
$upscope $end
$scope module bit[4] $end
$var wire 1 d+ q $end
$var wire 1 t+ d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 &, state $end
$upscope $end
$scope module bit[3] $end
$var wire 1 e+ q $end
$var wire 1 u+ d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 ', state $end
$upscope $end
$scope module bit[2] $end
$var wire 1 f+ q $end
$var wire 1 v+ d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 (, state $end
$upscope $end
$scope module bit[1] $end
$var wire 1 g+ q $end
$var wire 1 w+ d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 ), state $end
$upscope $end
$scope module bit[0] $end
$var wire 1 h+ q $end
$var wire 1 x+ d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 *, state $end
$upscope $end
$upscope $end
$scope module Reg5 $end
$var parameter 32 +, Data_Width $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var wire 1 J) write $end
>>>>>>> 2e640e2555e217a06b6c352cc5c5f6091e568d2d
$var wire 1 \# wdata [15] $end
$var wire 1 ]# wdata [14] $end
$var wire 1 ^# wdata [13] $end
$var wire 1 _# wdata [12] $end
$var wire 1 `# wdata [11] $end
$var wire 1 a# wdata [10] $end
$var wire 1 b# wdata [9] $end
$var wire 1 c# wdata [8] $end
$var wire 1 d# wdata [7] $end
$var wire 1 e# wdata [6] $end
$var wire 1 f# wdata [5] $end
$var wire 1 g# wdata [4] $end
$var wire 1 h# wdata [3] $end
$var wire 1 i# wdata [2] $end
$var wire 1 j# wdata [1] $end
$var wire 1 k# wdata [0] $end
<<<<<<< HEAD
$var wire 1 G) rdata [15] $end
$var wire 1 H) rdata [14] $end
$var wire 1 I) rdata [13] $end
$var wire 1 J) rdata [12] $end
$var wire 1 K) rdata [11] $end
$var wire 1 L) rdata [10] $end
$var wire 1 M) rdata [9] $end
$var wire 1 N) rdata [8] $end
$var wire 1 O) rdata [7] $end
$var wire 1 P) rdata [6] $end
$var wire 1 Q) rdata [5] $end
$var wire 1 R) rdata [4] $end
$var wire 1 S) rdata [3] $end
$var wire 1 T) rdata [2] $end
$var wire 1 U) rdata [1] $end
$var wire 1 V) rdata [0] $end
$var wire 1 W) in [15] $end
$var wire 1 X) in [14] $end
$var wire 1 Y) in [13] $end
$var wire 1 Z) in [12] $end
$var wire 1 [) in [11] $end
$var wire 1 \) in [10] $end
$var wire 1 ]) in [9] $end
$var wire 1 ^) in [8] $end
$var wire 1 _) in [7] $end
$var wire 1 `) in [6] $end
$var wire 1 a) in [5] $end
$var wire 1 b) in [4] $end
$var wire 1 c) in [3] $end
$var wire 1 d) in [2] $end
$var wire 1 e) in [1] $end
$var wire 1 f) in [0] $end
$scope module bit[15] $end
$var wire 1 G) q $end
$var wire 1 W) d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 g) state $end
$upscope $end
$scope module bit[14] $end
$var wire 1 H) q $end
$var wire 1 X) d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 h) state $end
$upscope $end
$scope module bit[13] $end
$var wire 1 I) q $end
$var wire 1 Y) d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 i) state $end
$upscope $end
$scope module bit[12] $end
$var wire 1 J) q $end
$var wire 1 Z) d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 j) state $end
$upscope $end
$scope module bit[11] $end
$var wire 1 K) q $end
$var wire 1 [) d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 k) state $end
$upscope $end
$scope module bit[10] $end
$var wire 1 L) q $end
$var wire 1 \) d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 l) state $end
$upscope $end
$scope module bit[9] $end
$var wire 1 M) q $end
$var wire 1 ]) d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 m) state $end
$upscope $end
$scope module bit[8] $end
$var wire 1 N) q $end
$var wire 1 ^) d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 n) state $end
$upscope $end
$scope module bit[7] $end
$var wire 1 O) q $end
$var wire 1 _) d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 o) state $end
$upscope $end
$scope module bit[6] $end
$var wire 1 P) q $end
$var wire 1 `) d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 p) state $end
$upscope $end
$scope module bit[5] $end
$var wire 1 Q) q $end
$var wire 1 a) d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 q) state $end
$upscope $end
$scope module bit[4] $end
$var wire 1 R) q $end
$var wire 1 b) d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 r) state $end
$upscope $end
$scope module bit[3] $end
$var wire 1 S) q $end
$var wire 1 c) d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 s) state $end
$upscope $end
$scope module bit[2] $end
$var wire 1 T) q $end
$var wire 1 d) d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 t) state $end
$upscope $end
$scope module bit[1] $end
$var wire 1 U) q $end
$var wire 1 e) d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 u) state $end
$upscope $end
$scope module bit[0] $end
$var wire 1 V) q $end
$var wire 1 f) d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 v) state $end
$upscope $end
$upscope $end
$scope module Reg6 $end
$var parameter 32 w) Data_Width $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var wire 1 d& write $end
=======
$var wire 1 ,, rdata [15] $end
$var wire 1 -, rdata [14] $end
$var wire 1 ., rdata [13] $end
$var wire 1 /, rdata [12] $end
$var wire 1 0, rdata [11] $end
$var wire 1 1, rdata [10] $end
$var wire 1 2, rdata [9] $end
$var wire 1 3, rdata [8] $end
$var wire 1 4, rdata [7] $end
$var wire 1 5, rdata [6] $end
$var wire 1 6, rdata [5] $end
$var wire 1 7, rdata [4] $end
$var wire 1 8, rdata [3] $end
$var wire 1 9, rdata [2] $end
$var wire 1 :, rdata [1] $end
$var wire 1 ;, rdata [0] $end
$var wire 1 <, in [15] $end
$var wire 1 =, in [14] $end
$var wire 1 >, in [13] $end
$var wire 1 ?, in [12] $end
$var wire 1 @, in [11] $end
$var wire 1 A, in [10] $end
$var wire 1 B, in [9] $end
$var wire 1 C, in [8] $end
$var wire 1 D, in [7] $end
$var wire 1 E, in [6] $end
$var wire 1 F, in [5] $end
$var wire 1 G, in [4] $end
$var wire 1 H, in [3] $end
$var wire 1 I, in [2] $end
$var wire 1 J, in [1] $end
$var wire 1 K, in [0] $end
$scope module bit[15] $end
$var wire 1 ,, q $end
$var wire 1 <, d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 L, state $end
$upscope $end
$scope module bit[14] $end
$var wire 1 -, q $end
$var wire 1 =, d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 M, state $end
$upscope $end
$scope module bit[13] $end
$var wire 1 ., q $end
$var wire 1 >, d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 N, state $end
$upscope $end
$scope module bit[12] $end
$var wire 1 /, q $end
$var wire 1 ?, d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 O, state $end
$upscope $end
$scope module bit[11] $end
$var wire 1 0, q $end
$var wire 1 @, d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 P, state $end
$upscope $end
$scope module bit[10] $end
$var wire 1 1, q $end
$var wire 1 A, d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 Q, state $end
$upscope $end
$scope module bit[9] $end
$var wire 1 2, q $end
$var wire 1 B, d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 R, state $end
$upscope $end
$scope module bit[8] $end
$var wire 1 3, q $end
$var wire 1 C, d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 S, state $end
$upscope $end
$scope module bit[7] $end
$var wire 1 4, q $end
$var wire 1 D, d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 T, state $end
$upscope $end
$scope module bit[6] $end
$var wire 1 5, q $end
$var wire 1 E, d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 U, state $end
$upscope $end
$scope module bit[5] $end
$var wire 1 6, q $end
$var wire 1 F, d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 V, state $end
$upscope $end
$scope module bit[4] $end
$var wire 1 7, q $end
$var wire 1 G, d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 W, state $end
$upscope $end
$scope module bit[3] $end
$var wire 1 8, q $end
$var wire 1 H, d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 X, state $end
$upscope $end
$scope module bit[2] $end
$var wire 1 9, q $end
$var wire 1 I, d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 Y, state $end
$upscope $end
$scope module bit[1] $end
$var wire 1 :, q $end
$var wire 1 J, d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 Z, state $end
$upscope $end
$scope module bit[0] $end
$var wire 1 ;, q $end
$var wire 1 K, d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 [, state $end
$upscope $end
$upscope $end
$scope module Reg6 $end
$var parameter 32 \, Data_Width $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var wire 1 I) write $end
>>>>>>> 2e640e2555e217a06b6c352cc5c5f6091e568d2d
$var wire 1 \# wdata [15] $end
$var wire 1 ]# wdata [14] $end
$var wire 1 ^# wdata [13] $end
$var wire 1 _# wdata [12] $end
$var wire 1 `# wdata [11] $end
$var wire 1 a# wdata [10] $end
$var wire 1 b# wdata [9] $end
$var wire 1 c# wdata [8] $end
$var wire 1 d# wdata [7] $end
$var wire 1 e# wdata [6] $end
$var wire 1 f# wdata [5] $end
$var wire 1 g# wdata [4] $end
$var wire 1 h# wdata [3] $end
$var wire 1 i# wdata [2] $end
$var wire 1 j# wdata [1] $end
$var wire 1 k# wdata [0] $end
<<<<<<< HEAD
$var wire 1 x) rdata [15] $end
$var wire 1 y) rdata [14] $end
$var wire 1 z) rdata [13] $end
$var wire 1 {) rdata [12] $end
$var wire 1 |) rdata [11] $end
$var wire 1 }) rdata [10] $end
$var wire 1 ~) rdata [9] $end
$var wire 1 !* rdata [8] $end
$var wire 1 "* rdata [7] $end
$var wire 1 #* rdata [6] $end
$var wire 1 $* rdata [5] $end
$var wire 1 %* rdata [4] $end
$var wire 1 &* rdata [3] $end
$var wire 1 '* rdata [2] $end
$var wire 1 (* rdata [1] $end
$var wire 1 )* rdata [0] $end
$var wire 1 ** in [15] $end
$var wire 1 +* in [14] $end
$var wire 1 ,* in [13] $end
$var wire 1 -* in [12] $end
$var wire 1 .* in [11] $end
$var wire 1 /* in [10] $end
$var wire 1 0* in [9] $end
$var wire 1 1* in [8] $end
$var wire 1 2* in [7] $end
$var wire 1 3* in [6] $end
$var wire 1 4* in [5] $end
$var wire 1 5* in [4] $end
$var wire 1 6* in [3] $end
$var wire 1 7* in [2] $end
$var wire 1 8* in [1] $end
$var wire 1 9* in [0] $end
$scope module bit[15] $end
$var wire 1 x) q $end
$var wire 1 ** d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 :* state $end
$upscope $end
$scope module bit[14] $end
$var wire 1 y) q $end
$var wire 1 +* d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 ;* state $end
$upscope $end
$scope module bit[13] $end
$var wire 1 z) q $end
$var wire 1 ,* d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 <* state $end
$upscope $end
$scope module bit[12] $end
$var wire 1 {) q $end
$var wire 1 -* d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 =* state $end
$upscope $end
$scope module bit[11] $end
$var wire 1 |) q $end
$var wire 1 .* d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 >* state $end
$upscope $end
$scope module bit[10] $end
$var wire 1 }) q $end
$var wire 1 /* d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 ?* state $end
$upscope $end
$scope module bit[9] $end
$var wire 1 ~) q $end
$var wire 1 0* d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 @* state $end
$upscope $end
$scope module bit[8] $end
$var wire 1 !* q $end
$var wire 1 1* d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 A* state $end
$upscope $end
$scope module bit[7] $end
$var wire 1 "* q $end
$var wire 1 2* d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 B* state $end
$upscope $end
$scope module bit[6] $end
$var wire 1 #* q $end
$var wire 1 3* d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 C* state $end
$upscope $end
$scope module bit[5] $end
$var wire 1 $* q $end
$var wire 1 4* d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 D* state $end
$upscope $end
$scope module bit[4] $end
$var wire 1 %* q $end
$var wire 1 5* d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 E* state $end
$upscope $end
$scope module bit[3] $end
$var wire 1 &* q $end
$var wire 1 6* d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 F* state $end
$upscope $end
$scope module bit[2] $end
$var wire 1 '* q $end
$var wire 1 7* d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 G* state $end
$upscope $end
$scope module bit[1] $end
$var wire 1 (* q $end
$var wire 1 8* d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 H* state $end
$upscope $end
$scope module bit[0] $end
$var wire 1 )* q $end
$var wire 1 9* d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 I* state $end
$upscope $end
$upscope $end
$scope module Reg7 $end
$var parameter 32 J* Data_Width $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var wire 1 c& write $end
=======
$var wire 1 ], rdata [15] $end
$var wire 1 ^, rdata [14] $end
$var wire 1 _, rdata [13] $end
$var wire 1 `, rdata [12] $end
$var wire 1 a, rdata [11] $end
$var wire 1 b, rdata [10] $end
$var wire 1 c, rdata [9] $end
$var wire 1 d, rdata [8] $end
$var wire 1 e, rdata [7] $end
$var wire 1 f, rdata [6] $end
$var wire 1 g, rdata [5] $end
$var wire 1 h, rdata [4] $end
$var wire 1 i, rdata [3] $end
$var wire 1 j, rdata [2] $end
$var wire 1 k, rdata [1] $end
$var wire 1 l, rdata [0] $end
$var wire 1 m, in [15] $end
$var wire 1 n, in [14] $end
$var wire 1 o, in [13] $end
$var wire 1 p, in [12] $end
$var wire 1 q, in [11] $end
$var wire 1 r, in [10] $end
$var wire 1 s, in [9] $end
$var wire 1 t, in [8] $end
$var wire 1 u, in [7] $end
$var wire 1 v, in [6] $end
$var wire 1 w, in [5] $end
$var wire 1 x, in [4] $end
$var wire 1 y, in [3] $end
$var wire 1 z, in [2] $end
$var wire 1 {, in [1] $end
$var wire 1 |, in [0] $end
$scope module bit[15] $end
$var wire 1 ], q $end
$var wire 1 m, d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 }, state $end
$upscope $end
$scope module bit[14] $end
$var wire 1 ^, q $end
$var wire 1 n, d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 ~, state $end
$upscope $end
$scope module bit[13] $end
$var wire 1 _, q $end
$var wire 1 o, d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 !- state $end
$upscope $end
$scope module bit[12] $end
$var wire 1 `, q $end
$var wire 1 p, d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 "- state $end
$upscope $end
$scope module bit[11] $end
$var wire 1 a, q $end
$var wire 1 q, d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 #- state $end
$upscope $end
$scope module bit[10] $end
$var wire 1 b, q $end
$var wire 1 r, d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 $- state $end
$upscope $end
$scope module bit[9] $end
$var wire 1 c, q $end
$var wire 1 s, d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 %- state $end
$upscope $end
$scope module bit[8] $end
$var wire 1 d, q $end
$var wire 1 t, d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 &- state $end
$upscope $end
$scope module bit[7] $end
$var wire 1 e, q $end
$var wire 1 u, d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 '- state $end
$upscope $end
$scope module bit[6] $end
$var wire 1 f, q $end
$var wire 1 v, d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 (- state $end
$upscope $end
$scope module bit[5] $end
$var wire 1 g, q $end
$var wire 1 w, d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 )- state $end
$upscope $end
$scope module bit[4] $end
$var wire 1 h, q $end
$var wire 1 x, d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 *- state $end
$upscope $end
$scope module bit[3] $end
$var wire 1 i, q $end
$var wire 1 y, d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 +- state $end
$upscope $end
$scope module bit[2] $end
$var wire 1 j, q $end
$var wire 1 z, d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 ,- state $end
$upscope $end
$scope module bit[1] $end
$var wire 1 k, q $end
$var wire 1 {, d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 -- state $end
$upscope $end
$scope module bit[0] $end
$var wire 1 l, q $end
$var wire 1 |, d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 .- state $end
$upscope $end
$upscope $end
$scope module Reg7 $end
$var parameter 32 /- Data_Width $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var wire 1 H) write $end
>>>>>>> 2e640e2555e217a06b6c352cc5c5f6091e568d2d
$var wire 1 \# wdata [15] $end
$var wire 1 ]# wdata [14] $end
$var wire 1 ^# wdata [13] $end
$var wire 1 _# wdata [12] $end
$var wire 1 `# wdata [11] $end
$var wire 1 a# wdata [10] $end
$var wire 1 b# wdata [9] $end
$var wire 1 c# wdata [8] $end
$var wire 1 d# wdata [7] $end
$var wire 1 e# wdata [6] $end
$var wire 1 f# wdata [5] $end
$var wire 1 g# wdata [4] $end
$var wire 1 h# wdata [3] $end
$var wire 1 i# wdata [2] $end
$var wire 1 j# wdata [1] $end
$var wire 1 k# wdata [0] $end
<<<<<<< HEAD
$var wire 1 K* rdata [15] $end
$var wire 1 L* rdata [14] $end
$var wire 1 M* rdata [13] $end
$var wire 1 N* rdata [12] $end
$var wire 1 O* rdata [11] $end
$var wire 1 P* rdata [10] $end
$var wire 1 Q* rdata [9] $end
$var wire 1 R* rdata [8] $end
$var wire 1 S* rdata [7] $end
$var wire 1 T* rdata [6] $end
$var wire 1 U* rdata [5] $end
$var wire 1 V* rdata [4] $end
$var wire 1 W* rdata [3] $end
$var wire 1 X* rdata [2] $end
$var wire 1 Y* rdata [1] $end
$var wire 1 Z* rdata [0] $end
$var wire 1 [* in [15] $end
$var wire 1 \* in [14] $end
$var wire 1 ]* in [13] $end
$var wire 1 ^* in [12] $end
$var wire 1 _* in [11] $end
$var wire 1 `* in [10] $end
$var wire 1 a* in [9] $end
$var wire 1 b* in [8] $end
$var wire 1 c* in [7] $end
$var wire 1 d* in [6] $end
$var wire 1 e* in [5] $end
$var wire 1 f* in [4] $end
$var wire 1 g* in [3] $end
$var wire 1 h* in [2] $end
$var wire 1 i* in [1] $end
$var wire 1 j* in [0] $end
$scope module bit[15] $end
$var wire 1 K* q $end
$var wire 1 [* d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 k* state $end
$upscope $end
$scope module bit[14] $end
$var wire 1 L* q $end
$var wire 1 \* d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 l* state $end
$upscope $end
$scope module bit[13] $end
$var wire 1 M* q $end
$var wire 1 ]* d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 m* state $end
$upscope $end
$scope module bit[12] $end
$var wire 1 N* q $end
$var wire 1 ^* d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 n* state $end
$upscope $end
$scope module bit[11] $end
$var wire 1 O* q $end
$var wire 1 _* d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 o* state $end
$upscope $end
$scope module bit[10] $end
$var wire 1 P* q $end
$var wire 1 `* d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 p* state $end
$upscope $end
$scope module bit[9] $end
$var wire 1 Q* q $end
$var wire 1 a* d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 q* state $end
$upscope $end
$scope module bit[8] $end
$var wire 1 R* q $end
$var wire 1 b* d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 r* state $end
$upscope $end
$scope module bit[7] $end
$var wire 1 S* q $end
$var wire 1 c* d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 s* state $end
$upscope $end
$scope module bit[6] $end
$var wire 1 T* q $end
$var wire 1 d* d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 t* state $end
$upscope $end
$scope module bit[5] $end
$var wire 1 U* q $end
$var wire 1 e* d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 u* state $end
$upscope $end
$scope module bit[4] $end
$var wire 1 V* q $end
$var wire 1 f* d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 v* state $end
$upscope $end
$scope module bit[3] $end
$var wire 1 W* q $end
$var wire 1 g* d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 w* state $end
$upscope $end
$scope module bit[2] $end
$var wire 1 X* q $end
$var wire 1 h* d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 x* state $end
$upscope $end
$scope module bit[1] $end
$var wire 1 Y* q $end
$var wire 1 i* d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 y* state $end
$upscope $end
$scope module bit[0] $end
$var wire 1 Z* q $end
$var wire 1 j* d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 z* state $end
=======
$var wire 1 0- rdata [15] $end
$var wire 1 1- rdata [14] $end
$var wire 1 2- rdata [13] $end
$var wire 1 3- rdata [12] $end
$var wire 1 4- rdata [11] $end
$var wire 1 5- rdata [10] $end
$var wire 1 6- rdata [9] $end
$var wire 1 7- rdata [8] $end
$var wire 1 8- rdata [7] $end
$var wire 1 9- rdata [6] $end
$var wire 1 :- rdata [5] $end
$var wire 1 ;- rdata [4] $end
$var wire 1 <- rdata [3] $end
$var wire 1 =- rdata [2] $end
$var wire 1 >- rdata [1] $end
$var wire 1 ?- rdata [0] $end
$var wire 1 @- in [15] $end
$var wire 1 A- in [14] $end
$var wire 1 B- in [13] $end
$var wire 1 C- in [12] $end
$var wire 1 D- in [11] $end
$var wire 1 E- in [10] $end
$var wire 1 F- in [9] $end
$var wire 1 G- in [8] $end
$var wire 1 H- in [7] $end
$var wire 1 I- in [6] $end
$var wire 1 J- in [5] $end
$var wire 1 K- in [4] $end
$var wire 1 L- in [3] $end
$var wire 1 M- in [2] $end
$var wire 1 N- in [1] $end
$var wire 1 O- in [0] $end
$scope module bit[15] $end
$var wire 1 0- q $end
$var wire 1 @- d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 P- state $end
$upscope $end
$scope module bit[14] $end
$var wire 1 1- q $end
$var wire 1 A- d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 Q- state $end
$upscope $end
$scope module bit[13] $end
$var wire 1 2- q $end
$var wire 1 B- d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 R- state $end
$upscope $end
$scope module bit[12] $end
$var wire 1 3- q $end
$var wire 1 C- d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 S- state $end
$upscope $end
$scope module bit[11] $end
$var wire 1 4- q $end
$var wire 1 D- d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 T- state $end
$upscope $end
$scope module bit[10] $end
$var wire 1 5- q $end
$var wire 1 E- d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 U- state $end
$upscope $end
$scope module bit[9] $end
$var wire 1 6- q $end
$var wire 1 F- d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 V- state $end
$upscope $end
$scope module bit[8] $end
$var wire 1 7- q $end
$var wire 1 G- d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 W- state $end
$upscope $end
$scope module bit[7] $end
$var wire 1 8- q $end
$var wire 1 H- d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 X- state $end
$upscope $end
$scope module bit[6] $end
$var wire 1 9- q $end
$var wire 1 I- d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 Y- state $end
$upscope $end
$scope module bit[5] $end
$var wire 1 :- q $end
$var wire 1 J- d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 Z- state $end
$upscope $end
$scope module bit[4] $end
$var wire 1 ;- q $end
$var wire 1 K- d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 [- state $end
$upscope $end
$scope module bit[3] $end
$var wire 1 <- q $end
$var wire 1 L- d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 \- state $end
$upscope $end
$scope module bit[2] $end
$var wire 1 =- q $end
$var wire 1 M- d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 ]- state $end
$upscope $end
$scope module bit[1] $end
$var wire 1 >- q $end
$var wire 1 N- d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 ^- state $end
$upscope $end
$scope module bit[0] $end
$var wire 1 ?- q $end
$var wire 1 O- d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 _- state $end
>>>>>>> 2e640e2555e217a06b6c352cc5c5f6091e568d2d
$upscope $end
$upscope $end
$upscope $end
$scope module alu $end
$var wire 1 `! A [15] $end
$var wire 1 a! A [14] $end
$var wire 1 b! A [13] $end
$var wire 1 c! A [12] $end
$var wire 1 d! A [11] $end
$var wire 1 e! A [10] $end
$var wire 1 f! A [9] $end
$var wire 1 g! A [8] $end
$var wire 1 h! A [7] $end
$var wire 1 i! A [6] $end
$var wire 1 j! A [5] $end
$var wire 1 k! A [4] $end
$var wire 1 l! A [3] $end
$var wire 1 m! A [2] $end
$var wire 1 n! A [1] $end
$var wire 1 o! A [0] $end
$var wire 1 G! B [15] $end
$var wire 1 H! B [14] $end
$var wire 1 I! B [13] $end
$var wire 1 J! B [12] $end
$var wire 1 K! B [11] $end
$var wire 1 L! B [10] $end
$var wire 1 M! B [9] $end
$var wire 1 N! B [8] $end
$var wire 1 O! B [7] $end
$var wire 1 P! B [6] $end
$var wire 1 Q! B [5] $end
$var wire 1 R! B [4] $end
$var wire 1 S! B [3] $end
$var wire 1 T! B [2] $end
$var wire 1 U! B [1] $end
$var wire 1 V! B [0] $end
$var wire 1 #! OP_Code [3] $end
$var wire 1 $! OP_Code [2] $end
$var wire 1 %! OP_Code [1] $end
$var wire 1 &! OP_Code [0] $end
$var wire 1 Z" PC2 [15] $end
$var wire 1 [" PC2 [14] $end
$var wire 1 \" PC2 [13] $end
$var wire 1 ]" PC2 [12] $end
$var wire 1 ^" PC2 [11] $end
$var wire 1 _" PC2 [10] $end
$var wire 1 `" PC2 [9] $end
$var wire 1 a" PC2 [8] $end
$var wire 1 b" PC2 [7] $end
$var wire 1 c" PC2 [6] $end
$var wire 1 d" PC2 [5] $end
$var wire 1 e" PC2 [4] $end
$var wire 1 f" PC2 [3] $end
$var wire 1 g" PC2 [2] $end
$var wire 1 h" PC2 [1] $end
$var wire 1 i" PC2 [0] $end
$var wire 1 '! Result [15] $end
$var wire 1 (! Result [14] $end
$var wire 1 )! Result [13] $end
$var wire 1 *! Result [12] $end
$var wire 1 +! Result [11] $end
$var wire 1 ,! Result [10] $end
$var wire 1 -! Result [9] $end
$var wire 1 .! Result [8] $end
$var wire 1 /! Result [7] $end
$var wire 1 0! Result [6] $end
$var wire 1 1! Result [5] $end
$var wire 1 2! Result [4] $end
$var wire 1 3! Result [3] $end
$var wire 1 4! Result [2] $end
$var wire 1 5! Result [1] $end
$var wire 1 6! Result [0] $end
$var wire 1 X! LT $end
<<<<<<< HEAD
$var wire 1 Y! EQ $end
$var reg 16 {* case_out [15:0] $end
$var reg 16 |* a_i [15:0] $end
$var reg 16 }* b_i [15:0] $end
$var reg 1 ~* c_i $end
$var reg 1 !+ lt $end
$var wire 1 "+ xor_out [15] $end
$var wire 1 #+ xor_out [14] $end
$var wire 1 $+ xor_out [13] $end
$var wire 1 %+ xor_out [12] $end
$var wire 1 &+ xor_out [11] $end
$var wire 1 '+ xor_out [10] $end
$var wire 1 (+ xor_out [9] $end
$var wire 1 )+ xor_out [8] $end
$var wire 1 *+ xor_out [7] $end
$var wire 1 ++ xor_out [6] $end
$var wire 1 ,+ xor_out [5] $end
$var wire 1 -+ xor_out [4] $end
$var wire 1 .+ xor_out [3] $end
$var wire 1 /+ xor_out [2] $end
$var wire 1 0+ xor_out [1] $end
$var wire 1 1+ xor_out [0] $end
$var wire 1 2+ andn_out [15] $end
$var wire 1 3+ andn_out [14] $end
$var wire 1 4+ andn_out [13] $end
$var wire 1 5+ andn_out [12] $end
$var wire 1 6+ andn_out [11] $end
$var wire 1 7+ andn_out [10] $end
$var wire 1 8+ andn_out [9] $end
$var wire 1 9+ andn_out [8] $end
$var wire 1 :+ andn_out [7] $end
$var wire 1 ;+ andn_out [6] $end
$var wire 1 <+ andn_out [5] $end
$var wire 1 =+ andn_out [4] $end
$var wire 1 >+ andn_out [3] $end
$var wire 1 ?+ andn_out [2] $end
$var wire 1 @+ andn_out [1] $end
$var wire 1 A+ andn_out [0] $end
$var wire 1 B+ shift_out [15] $end
$var wire 1 C+ shift_out [14] $end
$var wire 1 D+ shift_out [13] $end
$var wire 1 E+ shift_out [12] $end
$var wire 1 F+ shift_out [11] $end
$var wire 1 G+ shift_out [10] $end
$var wire 1 H+ shift_out [9] $end
$var wire 1 I+ shift_out [8] $end
$var wire 1 J+ shift_out [7] $end
$var wire 1 K+ shift_out [6] $end
$var wire 1 L+ shift_out [5] $end
$var wire 1 M+ shift_out [4] $end
$var wire 1 N+ shift_out [3] $end
$var wire 1 O+ shift_out [2] $end
$var wire 1 P+ shift_out [1] $end
$var wire 1 Q+ shift_out [0] $end
$var wire 1 R+ cla_out [15] $end
$var wire 1 S+ cla_out [14] $end
$var wire 1 T+ cla_out [13] $end
$var wire 1 U+ cla_out [12] $end
$var wire 1 V+ cla_out [11] $end
$var wire 1 W+ cla_out [10] $end
$var wire 1 X+ cla_out [9] $end
$var wire 1 Y+ cla_out [8] $end
$var wire 1 Z+ cla_out [7] $end
$var wire 1 [+ cla_out [6] $end
$var wire 1 \+ cla_out [5] $end
$var wire 1 ]+ cla_out [4] $end
$var wire 1 ^+ cla_out [3] $end
$var wire 1 _+ cla_out [2] $end
$var wire 1 `+ cla_out [1] $end
$var wire 1 a+ cla_out [0] $end
$var wire 1 b+ c_o $end
=======
$var wire 1 p# ZF $end
$var reg 16 `- case_out [15:0] $end
$var reg 16 a- a_i [15:0] $end
$var reg 16 b- b_i [15:0] $end
$var reg 1 c- c_i $end
$var reg 1 d- lt $end
$var wire 1 e- xor_out [15] $end
$var wire 1 f- xor_out [14] $end
$var wire 1 g- xor_out [13] $end
$var wire 1 h- xor_out [12] $end
$var wire 1 i- xor_out [11] $end
$var wire 1 j- xor_out [10] $end
$var wire 1 k- xor_out [9] $end
$var wire 1 l- xor_out [8] $end
$var wire 1 m- xor_out [7] $end
$var wire 1 n- xor_out [6] $end
$var wire 1 o- xor_out [5] $end
$var wire 1 p- xor_out [4] $end
$var wire 1 q- xor_out [3] $end
$var wire 1 r- xor_out [2] $end
$var wire 1 s- xor_out [1] $end
$var wire 1 t- xor_out [0] $end
$var wire 1 u- andn_out [15] $end
$var wire 1 v- andn_out [14] $end
$var wire 1 w- andn_out [13] $end
$var wire 1 x- andn_out [12] $end
$var wire 1 y- andn_out [11] $end
$var wire 1 z- andn_out [10] $end
$var wire 1 {- andn_out [9] $end
$var wire 1 |- andn_out [8] $end
$var wire 1 }- andn_out [7] $end
$var wire 1 ~- andn_out [6] $end
$var wire 1 !. andn_out [5] $end
$var wire 1 ". andn_out [4] $end
$var wire 1 #. andn_out [3] $end
$var wire 1 $. andn_out [2] $end
$var wire 1 %. andn_out [1] $end
$var wire 1 &. andn_out [0] $end
$var wire 1 '. shift_out [15] $end
$var wire 1 (. shift_out [14] $end
$var wire 1 ). shift_out [13] $end
$var wire 1 *. shift_out [12] $end
$var wire 1 +. shift_out [11] $end
$var wire 1 ,. shift_out [10] $end
$var wire 1 -. shift_out [9] $end
$var wire 1 .. shift_out [8] $end
$var wire 1 /. shift_out [7] $end
$var wire 1 0. shift_out [6] $end
$var wire 1 1. shift_out [5] $end
$var wire 1 2. shift_out [4] $end
$var wire 1 3. shift_out [3] $end
$var wire 1 4. shift_out [2] $end
$var wire 1 5. shift_out [1] $end
$var wire 1 6. shift_out [0] $end
$var wire 1 7. cla_out [15] $end
$var wire 1 8. cla_out [14] $end
$var wire 1 9. cla_out [13] $end
$var wire 1 :. cla_out [12] $end
$var wire 1 ;. cla_out [11] $end
$var wire 1 <. cla_out [10] $end
$var wire 1 =. cla_out [9] $end
$var wire 1 >. cla_out [8] $end
$var wire 1 ?. cla_out [7] $end
$var wire 1 @. cla_out [6] $end
$var wire 1 A. cla_out [5] $end
$var wire 1 B. cla_out [4] $end
$var wire 1 C. cla_out [3] $end
$var wire 1 D. cla_out [2] $end
$var wire 1 E. cla_out [1] $end
$var wire 1 F. cla_out [0] $end
$var wire 1 G. c_o $end
>>>>>>> 2e640e2555e217a06b6c352cc5c5f6091e568d2d
$scope module Xor $end
$var wire 1 `! A [15] $end
$var wire 1 a! A [14] $end
$var wire 1 b! A [13] $end
$var wire 1 c! A [12] $end
$var wire 1 d! A [11] $end
$var wire 1 e! A [10] $end
$var wire 1 f! A [9] $end
$var wire 1 g! A [8] $end
$var wire 1 h! A [7] $end
$var wire 1 i! A [6] $end
$var wire 1 j! A [5] $end
$var wire 1 k! A [4] $end
$var wire 1 l! A [3] $end
$var wire 1 m! A [2] $end
$var wire 1 n! A [1] $end
$var wire 1 o! A [0] $end
$var wire 1 G! B [15] $end
$var wire 1 H! B [14] $end
$var wire 1 I! B [13] $end
$var wire 1 J! B [12] $end
$var wire 1 K! B [11] $end
$var wire 1 L! B [10] $end
$var wire 1 M! B [9] $end
$var wire 1 N! B [8] $end
$var wire 1 O! B [7] $end
$var wire 1 P! B [6] $end
$var wire 1 Q! B [5] $end
$var wire 1 R! B [4] $end
$var wire 1 S! B [3] $end
$var wire 1 T! B [2] $end
$var wire 1 U! B [1] $end
$var wire 1 V! B [0] $end
<<<<<<< HEAD
$var wire 1 "+ Out [15] $end
$var wire 1 #+ Out [14] $end
$var wire 1 $+ Out [13] $end
$var wire 1 %+ Out [12] $end
$var wire 1 &+ Out [11] $end
$var wire 1 '+ Out [10] $end
$var wire 1 (+ Out [9] $end
$var wire 1 )+ Out [8] $end
$var wire 1 *+ Out [7] $end
$var wire 1 ++ Out [6] $end
$var wire 1 ,+ Out [5] $end
$var wire 1 -+ Out [4] $end
$var wire 1 .+ Out [3] $end
$var wire 1 /+ Out [2] $end
$var wire 1 0+ Out [1] $end
$var wire 1 1+ Out [0] $end
=======
$var wire 1 e- Out [15] $end
$var wire 1 f- Out [14] $end
$var wire 1 g- Out [13] $end
$var wire 1 h- Out [12] $end
$var wire 1 i- Out [11] $end
$var wire 1 j- Out [10] $end
$var wire 1 k- Out [9] $end
$var wire 1 l- Out [8] $end
$var wire 1 m- Out [7] $end
$var wire 1 n- Out [6] $end
$var wire 1 o- Out [5] $end
$var wire 1 p- Out [4] $end
$var wire 1 q- Out [3] $end
$var wire 1 r- Out [2] $end
$var wire 1 s- Out [1] $end
$var wire 1 t- Out [0] $end
>>>>>>> 2e640e2555e217a06b6c352cc5c5f6091e568d2d
$upscope $end
$scope module Andn $end
$var wire 1 `! A [15] $end
$var wire 1 a! A [14] $end
$var wire 1 b! A [13] $end
$var wire 1 c! A [12] $end
$var wire 1 d! A [11] $end
$var wire 1 e! A [10] $end
$var wire 1 f! A [9] $end
$var wire 1 g! A [8] $end
$var wire 1 h! A [7] $end
$var wire 1 i! A [6] $end
$var wire 1 j! A [5] $end
$var wire 1 k! A [4] $end
$var wire 1 l! A [3] $end
$var wire 1 m! A [2] $end
$var wire 1 n! A [1] $end
$var wire 1 o! A [0] $end
$var wire 1 G! B [15] $end
$var wire 1 H! B [14] $end
$var wire 1 I! B [13] $end
$var wire 1 J! B [12] $end
$var wire 1 K! B [11] $end
$var wire 1 L! B [10] $end
$var wire 1 M! B [9] $end
$var wire 1 N! B [8] $end
$var wire 1 O! B [7] $end
$var wire 1 P! B [6] $end
$var wire 1 Q! B [5] $end
$var wire 1 R! B [4] $end
$var wire 1 S! B [3] $end
$var wire 1 T! B [2] $end
$var wire 1 U! B [1] $end
$var wire 1 V! B [0] $end
<<<<<<< HEAD
$var wire 1 2+ Out [15] $end
$var wire 1 3+ Out [14] $end
$var wire 1 4+ Out [13] $end
$var wire 1 5+ Out [12] $end
$var wire 1 6+ Out [11] $end
$var wire 1 7+ Out [10] $end
$var wire 1 8+ Out [9] $end
$var wire 1 9+ Out [8] $end
$var wire 1 :+ Out [7] $end
$var wire 1 ;+ Out [6] $end
$var wire 1 <+ Out [5] $end
$var wire 1 =+ Out [4] $end
$var wire 1 >+ Out [3] $end
$var wire 1 ?+ Out [2] $end
$var wire 1 @+ Out [1] $end
$var wire 1 A+ Out [0] $end
=======
$var wire 1 u- Out [15] $end
$var wire 1 v- Out [14] $end
$var wire 1 w- Out [13] $end
$var wire 1 x- Out [12] $end
$var wire 1 y- Out [11] $end
$var wire 1 z- Out [10] $end
$var wire 1 {- Out [9] $end
$var wire 1 |- Out [8] $end
$var wire 1 }- Out [7] $end
$var wire 1 ~- Out [6] $end
$var wire 1 !. Out [5] $end
$var wire 1 ". Out [4] $end
$var wire 1 #. Out [3] $end
$var wire 1 $. Out [2] $end
$var wire 1 %. Out [1] $end
$var wire 1 &. Out [0] $end
>>>>>>> 2e640e2555e217a06b6c352cc5c5f6091e568d2d
$upscope $end
$scope module Shifter $end
$var wire 1 `! In [15] $end
$var wire 1 a! In [14] $end
$var wire 1 b! In [13] $end
$var wire 1 c! In [12] $end
$var wire 1 d! In [11] $end
$var wire 1 e! In [10] $end
$var wire 1 f! In [9] $end
$var wire 1 g! In [8] $end
$var wire 1 h! In [7] $end
$var wire 1 i! In [6] $end
$var wire 1 j! In [5] $end
$var wire 1 k! In [4] $end
$var wire 1 l! In [3] $end
$var wire 1 m! In [2] $end
$var wire 1 n! In [1] $end
$var wire 1 o! In [0] $end
$var wire 1 S! Cnt [3] $end
$var wire 1 T! Cnt [2] $end
$var wire 1 U! Cnt [1] $end
$var wire 1 V! Cnt [0] $end
$var wire 1 %! Op [1] $end
$var wire 1 &! Op [0] $end
<<<<<<< HEAD
$var wire 1 B+ Out [15] $end
$var wire 1 C+ Out [14] $end
$var wire 1 D+ Out [13] $end
$var wire 1 E+ Out [12] $end
$var wire 1 F+ Out [11] $end
$var wire 1 G+ Out [10] $end
$var wire 1 H+ Out [9] $end
$var wire 1 I+ Out [8] $end
$var wire 1 J+ Out [7] $end
$var wire 1 K+ Out [6] $end
$var wire 1 L+ Out [5] $end
$var wire 1 M+ Out [4] $end
$var wire 1 N+ Out [3] $end
$var wire 1 O+ Out [2] $end
$var wire 1 P+ Out [1] $end
$var wire 1 Q+ Out [0] $end
$var wire 1 c+ tran1_2 [15] $end
$var wire 1 d+ tran1_2 [14] $end
$var wire 1 e+ tran1_2 [13] $end
$var wire 1 f+ tran1_2 [12] $end
$var wire 1 g+ tran1_2 [11] $end
$var wire 1 h+ tran1_2 [10] $end
$var wire 1 i+ tran1_2 [9] $end
$var wire 1 j+ tran1_2 [8] $end
$var wire 1 k+ tran1_2 [7] $end
$var wire 1 l+ tran1_2 [6] $end
$var wire 1 m+ tran1_2 [5] $end
$var wire 1 n+ tran1_2 [4] $end
$var wire 1 o+ tran1_2 [3] $end
$var wire 1 p+ tran1_2 [2] $end
$var wire 1 q+ tran1_2 [1] $end
$var wire 1 r+ tran1_2 [0] $end
$var wire 1 s+ tran2_4 [15] $end
$var wire 1 t+ tran2_4 [14] $end
$var wire 1 u+ tran2_4 [13] $end
$var wire 1 v+ tran2_4 [12] $end
$var wire 1 w+ tran2_4 [11] $end
$var wire 1 x+ tran2_4 [10] $end
$var wire 1 y+ tran2_4 [9] $end
$var wire 1 z+ tran2_4 [8] $end
$var wire 1 {+ tran2_4 [7] $end
$var wire 1 |+ tran2_4 [6] $end
$var wire 1 }+ tran2_4 [5] $end
$var wire 1 ~+ tran2_4 [4] $end
$var wire 1 !, tran2_4 [3] $end
$var wire 1 ", tran2_4 [2] $end
$var wire 1 #, tran2_4 [1] $end
$var wire 1 $, tran2_4 [0] $end
$var wire 1 %, tran4_8 [15] $end
$var wire 1 &, tran4_8 [14] $end
$var wire 1 ', tran4_8 [13] $end
$var wire 1 (, tran4_8 [12] $end
$var wire 1 ), tran4_8 [11] $end
$var wire 1 *, tran4_8 [10] $end
$var wire 1 +, tran4_8 [9] $end
$var wire 1 ,, tran4_8 [8] $end
$var wire 1 -, tran4_8 [7] $end
$var wire 1 ., tran4_8 [6] $end
$var wire 1 /, tran4_8 [5] $end
$var wire 1 0, tran4_8 [4] $end
$var wire 1 1, tran4_8 [3] $end
$var wire 1 2, tran4_8 [2] $end
$var wire 1 3, tran4_8 [1] $end
$var wire 1 4, tran4_8 [0] $end
=======
$var wire 1 '. Out [15] $end
$var wire 1 (. Out [14] $end
$var wire 1 ). Out [13] $end
$var wire 1 *. Out [12] $end
$var wire 1 +. Out [11] $end
$var wire 1 ,. Out [10] $end
$var wire 1 -. Out [9] $end
$var wire 1 .. Out [8] $end
$var wire 1 /. Out [7] $end
$var wire 1 0. Out [6] $end
$var wire 1 1. Out [5] $end
$var wire 1 2. Out [4] $end
$var wire 1 3. Out [3] $end
$var wire 1 4. Out [2] $end
$var wire 1 5. Out [1] $end
$var wire 1 6. Out [0] $end
$var wire 1 H. tran1_2 [15] $end
$var wire 1 I. tran1_2 [14] $end
$var wire 1 J. tran1_2 [13] $end
$var wire 1 K. tran1_2 [12] $end
$var wire 1 L. tran1_2 [11] $end
$var wire 1 M. tran1_2 [10] $end
$var wire 1 N. tran1_2 [9] $end
$var wire 1 O. tran1_2 [8] $end
$var wire 1 P. tran1_2 [7] $end
$var wire 1 Q. tran1_2 [6] $end
$var wire 1 R. tran1_2 [5] $end
$var wire 1 S. tran1_2 [4] $end
$var wire 1 T. tran1_2 [3] $end
$var wire 1 U. tran1_2 [2] $end
$var wire 1 V. tran1_2 [1] $end
$var wire 1 W. tran1_2 [0] $end
$var wire 1 X. tran2_4 [15] $end
$var wire 1 Y. tran2_4 [14] $end
$var wire 1 Z. tran2_4 [13] $end
$var wire 1 [. tran2_4 [12] $end
$var wire 1 \. tran2_4 [11] $end
$var wire 1 ]. tran2_4 [10] $end
$var wire 1 ^. tran2_4 [9] $end
$var wire 1 _. tran2_4 [8] $end
$var wire 1 `. tran2_4 [7] $end
$var wire 1 a. tran2_4 [6] $end
$var wire 1 b. tran2_4 [5] $end
$var wire 1 c. tran2_4 [4] $end
$var wire 1 d. tran2_4 [3] $end
$var wire 1 e. tran2_4 [2] $end
$var wire 1 f. tran2_4 [1] $end
$var wire 1 g. tran2_4 [0] $end
$var wire 1 h. tran4_8 [15] $end
$var wire 1 i. tran4_8 [14] $end
$var wire 1 j. tran4_8 [13] $end
$var wire 1 k. tran4_8 [12] $end
$var wire 1 l. tran4_8 [11] $end
$var wire 1 m. tran4_8 [10] $end
$var wire 1 n. tran4_8 [9] $end
$var wire 1 o. tran4_8 [8] $end
$var wire 1 p. tran4_8 [7] $end
$var wire 1 q. tran4_8 [6] $end
$var wire 1 r. tran4_8 [5] $end
$var wire 1 s. tran4_8 [4] $end
$var wire 1 t. tran4_8 [3] $end
$var wire 1 u. tran4_8 [2] $end
$var wire 1 v. tran4_8 [1] $end
$var wire 1 w. tran4_8 [0] $end
>>>>>>> 2e640e2555e217a06b6c352cc5c5f6091e568d2d
$scope module sBlade1 $end
$var wire 1 `! in [15] $end
$var wire 1 a! in [14] $end
$var wire 1 b! in [13] $end
$var wire 1 c! in [12] $end
$var wire 1 d! in [11] $end
$var wire 1 e! in [10] $end
$var wire 1 f! in [9] $end
$var wire 1 g! in [8] $end
$var wire 1 h! in [7] $end
$var wire 1 i! in [6] $end
$var wire 1 j! in [5] $end
$var wire 1 k! in [4] $end
$var wire 1 l! in [3] $end
$var wire 1 m! in [2] $end
$var wire 1 n! in [1] $end
$var wire 1 o! in [0] $end
$var wire 1 V! sh $end
$var wire 1 %! op [1] $end
$var wire 1 &! op [0] $end
<<<<<<< HEAD
$var wire 1 c+ out [15] $end
$var wire 1 d+ out [14] $end
$var wire 1 e+ out [13] $end
$var wire 1 f+ out [12] $end
$var wire 1 g+ out [11] $end
$var wire 1 h+ out [10] $end
$var wire 1 i+ out [9] $end
$var wire 1 j+ out [8] $end
$var wire 1 k+ out [7] $end
$var wire 1 l+ out [6] $end
$var wire 1 m+ out [5] $end
$var wire 1 n+ out [4] $end
$var wire 1 o+ out [3] $end
$var wire 1 p+ out [2] $end
$var wire 1 q+ out [1] $end
$var wire 1 r+ out [0] $end
$var wire 1 5, trans [15] $end
$var wire 1 6, trans [14] $end
$var wire 1 7, trans [13] $end
$var wire 1 8, trans [12] $end
$var wire 1 9, trans [11] $end
$var wire 1 :, trans [10] $end
$var wire 1 ;, trans [9] $end
$var wire 1 <, trans [8] $end
$var wire 1 =, trans [7] $end
$var wire 1 >, trans [6] $end
$var wire 1 ?, trans [5] $end
$var wire 1 @, trans [4] $end
$var wire 1 A, trans [3] $end
$var wire 1 B, trans [2] $end
$var wire 1 C, trans [1] $end
$var wire 1 D, trans [0] $end
$scope module up_sel0 $end
$var wire 1 `! in0 $end
$var wire 1 E, in1 $end
=======
$var wire 1 H. out [15] $end
$var wire 1 I. out [14] $end
$var wire 1 J. out [13] $end
$var wire 1 K. out [12] $end
$var wire 1 L. out [11] $end
$var wire 1 M. out [10] $end
$var wire 1 N. out [9] $end
$var wire 1 O. out [8] $end
$var wire 1 P. out [7] $end
$var wire 1 Q. out [6] $end
$var wire 1 R. out [5] $end
$var wire 1 S. out [4] $end
$var wire 1 T. out [3] $end
$var wire 1 U. out [2] $end
$var wire 1 V. out [1] $end
$var wire 1 W. out [0] $end
$var wire 1 x. trans [15] $end
$var wire 1 y. trans [14] $end
$var wire 1 z. trans [13] $end
$var wire 1 {. trans [12] $end
$var wire 1 |. trans [11] $end
$var wire 1 }. trans [10] $end
$var wire 1 ~. trans [9] $end
$var wire 1 !/ trans [8] $end
$var wire 1 "/ trans [7] $end
$var wire 1 #/ trans [6] $end
$var wire 1 $/ trans [5] $end
$var wire 1 %/ trans [4] $end
$var wire 1 &/ trans [3] $end
$var wire 1 '/ trans [2] $end
$var wire 1 (/ trans [1] $end
$var wire 1 )/ trans [0] $end
$scope module up_sel0 $end
$var wire 1 `! in0 $end
$var wire 1 */ in1 $end
>>>>>>> 2e640e2555e217a06b6c352cc5c5f6091e568d2d
$var wire 1 n! in2 $end
$var wire 1 n! in3 $end
$var wire 1 %! s [1] $end
$var wire 1 &! s [0] $end
<<<<<<< HEAD
$var wire 1 D, out $end
=======
$var wire 1 )/ out $end
>>>>>>> 2e640e2555e217a06b6c352cc5c5f6091e568d2d
$upscope $end
$scope module up_sel1 $end
$var wire 1 o! in0 $end
$var wire 1 o! in1 $end
$var wire 1 m! in2 $end
$var wire 1 m! in3 $end
$var wire 1 %! s [1] $end
$var wire 1 &! s [0] $end
<<<<<<< HEAD
$var wire 1 C, out $end
=======
$var wire 1 (/ out $end
>>>>>>> 2e640e2555e217a06b6c352cc5c5f6091e568d2d
$upscope $end
$scope module up_sel2 $end
$var wire 1 n! in0 $end
$var wire 1 n! in1 $end
$var wire 1 l! in2 $end
$var wire 1 l! in3 $end
$var wire 1 %! s [1] $end
$var wire 1 &! s [0] $end
<<<<<<< HEAD
$var wire 1 B, out $end
=======
$var wire 1 '/ out $end
>>>>>>> 2e640e2555e217a06b6c352cc5c5f6091e568d2d
$upscope $end
$scope module up_sel3 $end
$var wire 1 m! in0 $end
$var wire 1 m! in1 $end
$var wire 1 k! in2 $end
$var wire 1 k! in3 $end
$var wire 1 %! s [1] $end
$var wire 1 &! s [0] $end
<<<<<<< HEAD
$var wire 1 A, out $end
=======
$var wire 1 &/ out $end
>>>>>>> 2e640e2555e217a06b6c352cc5c5f6091e568d2d
$upscope $end
$scope module up_sel4 $end
$var wire 1 l! in0 $end
$var wire 1 l! in1 $end
$var wire 1 j! in2 $end
$var wire 1 j! in3 $end
$var wire 1 %! s [1] $end
$var wire 1 &! s [0] $end
<<<<<<< HEAD
$var wire 1 @, out $end
=======
$var wire 1 %/ out $end
>>>>>>> 2e640e2555e217a06b6c352cc5c5f6091e568d2d
$upscope $end
$scope module up_sel5 $end
$var wire 1 k! in0 $end
$var wire 1 k! in1 $end
$var wire 1 i! in2 $end
$var wire 1 i! in3 $end
$var wire 1 %! s [1] $end
$var wire 1 &! s [0] $end
<<<<<<< HEAD
$var wire 1 ?, out $end
=======
$var wire 1 $/ out $end
>>>>>>> 2e640e2555e217a06b6c352cc5c5f6091e568d2d
$upscope $end
$scope module up_sel6 $end
$var wire 1 j! in0 $end
$var wire 1 j! in1 $end
$var wire 1 h! in2 $end
$var wire 1 h! in3 $end
$var wire 1 %! s [1] $end
$var wire 1 &! s [0] $end
<<<<<<< HEAD
$var wire 1 >, out $end
=======
$var wire 1 #/ out $end
>>>>>>> 2e640e2555e217a06b6c352cc5c5f6091e568d2d
$upscope $end
$scope module up_sel7 $end
$var wire 1 i! in0 $end
$var wire 1 i! in1 $end
$var wire 1 g! in2 $end
$var wire 1 g! in3 $end
$var wire 1 %! s [1] $end
$var wire 1 &! s [0] $end
<<<<<<< HEAD
$var wire 1 =, out $end
=======
$var wire 1 "/ out $end
>>>>>>> 2e640e2555e217a06b6c352cc5c5f6091e568d2d
$upscope $end
$scope module up_sel8 $end
$var wire 1 h! in0 $end
$var wire 1 h! in1 $end
$var wire 1 f! in2 $end
$var wire 1 f! in3 $end
$var wire 1 %! s [1] $end
$var wire 1 &! s [0] $end
<<<<<<< HEAD
$var wire 1 <, out $end
=======
$var wire 1 !/ out $end
>>>>>>> 2e640e2555e217a06b6c352cc5c5f6091e568d2d
$upscope $end
$scope module up_sel9 $end
$var wire 1 g! in0 $end
$var wire 1 g! in1 $end
$var wire 1 e! in2 $end
$var wire 1 e! in3 $end
$var wire 1 %! s [1] $end
$var wire 1 &! s [0] $end
<<<<<<< HEAD
$var wire 1 ;, out $end
=======
$var wire 1 ~. out $end
>>>>>>> 2e640e2555e217a06b6c352cc5c5f6091e568d2d
$upscope $end
$scope module up_sel10 $end
$var wire 1 f! in0 $end
$var wire 1 f! in1 $end
$var wire 1 d! in2 $end
$var wire 1 d! in3 $end
$var wire 1 %! s [1] $end
$var wire 1 &! s [0] $end
<<<<<<< HEAD
$var wire 1 :, out $end
=======
$var wire 1 }. out $end
>>>>>>> 2e640e2555e217a06b6c352cc5c5f6091e568d2d
$upscope $end
$scope module up_sel11 $end
$var wire 1 e! in0 $end
$var wire 1 e! in1 $end
$var wire 1 c! in2 $end
$var wire 1 c! in3 $end
$var wire 1 %! s [1] $end
$var wire 1 &! s [0] $end
<<<<<<< HEAD
$var wire 1 9, out $end
=======
$var wire 1 |. out $end
>>>>>>> 2e640e2555e217a06b6c352cc5c5f6091e568d2d
$upscope $end
$scope module up_sel12 $end
$var wire 1 d! in0 $end
$var wire 1 d! in1 $end
$var wire 1 b! in2 $end
$var wire 1 b! in3 $end
$var wire 1 %! s [1] $end
$var wire 1 &! s [0] $end
<<<<<<< HEAD
$var wire 1 8, out $end
=======
$var wire 1 {. out $end
>>>>>>> 2e640e2555e217a06b6c352cc5c5f6091e568d2d
$upscope $end
$scope module up_sel13 $end
$var wire 1 c! in0 $end
$var wire 1 c! in1 $end
$var wire 1 a! in2 $end
$var wire 1 a! in3 $end
$var wire 1 %! s [1] $end
$var wire 1 &! s [0] $end
<<<<<<< HEAD
$var wire 1 7, out $end
=======
$var wire 1 z. out $end
>>>>>>> 2e640e2555e217a06b6c352cc5c5f6091e568d2d
$upscope $end
$scope module up_sel14 $end
$var wire 1 b! in0 $end
$var wire 1 b! in1 $end
$var wire 1 `! in2 $end
$var wire 1 `! in3 $end
$var wire 1 %! s [1] $end
$var wire 1 &! s [0] $end
<<<<<<< HEAD
$var wire 1 6, out $end
=======
$var wire 1 y. out $end
>>>>>>> 2e640e2555e217a06b6c352cc5c5f6091e568d2d
$upscope $end
$scope module up_sel15 $end
$var wire 1 a! in0 $end
$var wire 1 a! in1 $end
$var wire 1 o! in2 $end
<<<<<<< HEAD
$var wire 1 F, in3 $end
$var wire 1 %! s [1] $end
$var wire 1 &! s [0] $end
$var wire 1 5, out $end
$upscope $end
$scope module low_sel[15] $end
$var wire 1 `! in0 $end
$var wire 1 5, in1 $end
$var wire 1 V! s $end
$var wire 1 c+ out $end
$upscope $end
$scope module low_sel[14] $end
$var wire 1 a! in0 $end
$var wire 1 6, in1 $end
$var wire 1 V! s $end
$var wire 1 d+ out $end
$upscope $end
$scope module low_sel[13] $end
$var wire 1 b! in0 $end
$var wire 1 7, in1 $end
$var wire 1 V! s $end
$var wire 1 e+ out $end
$upscope $end
$scope module low_sel[12] $end
$var wire 1 c! in0 $end
$var wire 1 8, in1 $end
$var wire 1 V! s $end
$var wire 1 f+ out $end
$upscope $end
$scope module low_sel[11] $end
$var wire 1 d! in0 $end
$var wire 1 9, in1 $end
$var wire 1 V! s $end
$var wire 1 g+ out $end
$upscope $end
$scope module low_sel[10] $end
$var wire 1 e! in0 $end
$var wire 1 :, in1 $end
$var wire 1 V! s $end
$var wire 1 h+ out $end
$upscope $end
$scope module low_sel[9] $end
$var wire 1 f! in0 $end
$var wire 1 ;, in1 $end
$var wire 1 V! s $end
$var wire 1 i+ out $end
$upscope $end
$scope module low_sel[8] $end
$var wire 1 g! in0 $end
$var wire 1 <, in1 $end
$var wire 1 V! s $end
$var wire 1 j+ out $end
$upscope $end
$scope module low_sel[7] $end
$var wire 1 h! in0 $end
$var wire 1 =, in1 $end
$var wire 1 V! s $end
$var wire 1 k+ out $end
$upscope $end
$scope module low_sel[6] $end
$var wire 1 i! in0 $end
$var wire 1 >, in1 $end
$var wire 1 V! s $end
$var wire 1 l+ out $end
$upscope $end
$scope module low_sel[5] $end
$var wire 1 j! in0 $end
$var wire 1 ?, in1 $end
$var wire 1 V! s $end
$var wire 1 m+ out $end
$upscope $end
$scope module low_sel[4] $end
$var wire 1 k! in0 $end
$var wire 1 @, in1 $end
$var wire 1 V! s $end
$var wire 1 n+ out $end
$upscope $end
$scope module low_sel[3] $end
$var wire 1 l! in0 $end
$var wire 1 A, in1 $end
$var wire 1 V! s $end
$var wire 1 o+ out $end
$upscope $end
$scope module low_sel[2] $end
$var wire 1 m! in0 $end
$var wire 1 B, in1 $end
$var wire 1 V! s $end
$var wire 1 p+ out $end
$upscope $end
$scope module low_sel[1] $end
$var wire 1 n! in0 $end
$var wire 1 C, in1 $end
$var wire 1 V! s $end
$var wire 1 q+ out $end
$upscope $end
$scope module low_sel[0] $end
$var wire 1 o! in0 $end
$var wire 1 D, in1 $end
$var wire 1 V! s $end
$var wire 1 r+ out $end
$upscope $end
$upscope $end
$scope module sBlade2 $end
$var wire 1 c+ in [15] $end
$var wire 1 d+ in [14] $end
$var wire 1 e+ in [13] $end
$var wire 1 f+ in [12] $end
$var wire 1 g+ in [11] $end
$var wire 1 h+ in [10] $end
$var wire 1 i+ in [9] $end
$var wire 1 j+ in [8] $end
$var wire 1 k+ in [7] $end
$var wire 1 l+ in [6] $end
$var wire 1 m+ in [5] $end
$var wire 1 n+ in [4] $end
$var wire 1 o+ in [3] $end
$var wire 1 p+ in [2] $end
$var wire 1 q+ in [1] $end
$var wire 1 r+ in [0] $end
$var wire 1 U! sh $end
$var wire 1 %! op [1] $end
$var wire 1 &! op [0] $end
$var wire 1 s+ out [15] $end
$var wire 1 t+ out [14] $end
$var wire 1 u+ out [13] $end
$var wire 1 v+ out [12] $end
$var wire 1 w+ out [11] $end
$var wire 1 x+ out [10] $end
$var wire 1 y+ out [9] $end
$var wire 1 z+ out [8] $end
$var wire 1 {+ out [7] $end
$var wire 1 |+ out [6] $end
$var wire 1 }+ out [5] $end
$var wire 1 ~+ out [4] $end
$var wire 1 !, out [3] $end
$var wire 1 ", out [2] $end
$var wire 1 #, out [1] $end
$var wire 1 $, out [0] $end
$var wire 1 G, trans [15] $end
$var wire 1 H, trans [14] $end
$var wire 1 I, trans [13] $end
$var wire 1 J, trans [12] $end
$var wire 1 K, trans [11] $end
$var wire 1 L, trans [10] $end
$var wire 1 M, trans [9] $end
$var wire 1 N, trans [8] $end
$var wire 1 O, trans [7] $end
$var wire 1 P, trans [6] $end
$var wire 1 Q, trans [5] $end
$var wire 1 R, trans [4] $end
$var wire 1 S, trans [3] $end
$var wire 1 T, trans [2] $end
$var wire 1 U, trans [1] $end
$var wire 1 V, trans [0] $end
$scope module up_sel0 $end
$var wire 1 d+ in0 $end
$var wire 1 W, in1 $end
$var wire 1 p+ in2 $end
$var wire 1 p+ in3 $end
$var wire 1 %! s [1] $end
$var wire 1 &! s [0] $end
$var wire 1 V, out $end
$upscope $end
$scope module up_sel1 $end
$var wire 1 c+ in0 $end
$var wire 1 X, in1 $end
$var wire 1 o+ in2 $end
$var wire 1 o+ in3 $end
$var wire 1 %! s [1] $end
$var wire 1 &! s [0] $end
$var wire 1 U, out $end
$upscope $end
$scope module up_sel2 $end
$var wire 1 r+ in0 $end
$var wire 1 r+ in1 $end
$var wire 1 n+ in2 $end
$var wire 1 n+ in3 $end
$var wire 1 %! s [1] $end
$var wire 1 &! s [0] $end
$var wire 1 T, out $end
$upscope $end
$scope module up_sel3 $end
$var wire 1 q+ in0 $end
$var wire 1 q+ in1 $end
$var wire 1 m+ in2 $end
$var wire 1 m+ in3 $end
$var wire 1 %! s [1] $end
$var wire 1 &! s [0] $end
$var wire 1 S, out $end
$upscope $end
$scope module up_sel4 $end
$var wire 1 p+ in0 $end
$var wire 1 p+ in1 $end
$var wire 1 l+ in2 $end
$var wire 1 l+ in3 $end
$var wire 1 %! s [1] $end
$var wire 1 &! s [0] $end
$var wire 1 R, out $end
$upscope $end
$scope module up_sel5 $end
$var wire 1 o+ in0 $end
$var wire 1 o+ in1 $end
$var wire 1 k+ in2 $end
$var wire 1 k+ in3 $end
$var wire 1 %! s [1] $end
$var wire 1 &! s [0] $end
$var wire 1 Q, out $end
$upscope $end
$scope module up_sel6 $end
$var wire 1 n+ in0 $end
$var wire 1 n+ in1 $end
$var wire 1 j+ in2 $end
$var wire 1 j+ in3 $end
$var wire 1 %! s [1] $end
$var wire 1 &! s [0] $end
$var wire 1 P, out $end
$upscope $end
$scope module up_sel7 $end
$var wire 1 m+ in0 $end
$var wire 1 m+ in1 $end
$var wire 1 i+ in2 $end
$var wire 1 i+ in3 $end
$var wire 1 %! s [1] $end
$var wire 1 &! s [0] $end
$var wire 1 O, out $end
$upscope $end
$scope module up_sel8 $end
$var wire 1 l+ in0 $end
$var wire 1 l+ in1 $end
$var wire 1 h+ in2 $end
$var wire 1 h+ in3 $end
$var wire 1 %! s [1] $end
$var wire 1 &! s [0] $end
$var wire 1 N, out $end
$upscope $end
$scope module up_sel9 $end
$var wire 1 k+ in0 $end
$var wire 1 k+ in1 $end
$var wire 1 g+ in2 $end
$var wire 1 g+ in3 $end
$var wire 1 %! s [1] $end
$var wire 1 &! s [0] $end
$var wire 1 M, out $end
$upscope $end
$scope module up_sel10 $end
$var wire 1 j+ in0 $end
$var wire 1 j+ in1 $end
$var wire 1 f+ in2 $end
$var wire 1 f+ in3 $end
$var wire 1 %! s [1] $end
$var wire 1 &! s [0] $end
$var wire 1 L, out $end
$upscope $end
$scope module up_sel11 $end
$var wire 1 i+ in0 $end
$var wire 1 i+ in1 $end
$var wire 1 e+ in2 $end
$var wire 1 e+ in3 $end
$var wire 1 %! s [1] $end
$var wire 1 &! s [0] $end
$var wire 1 K, out $end
$upscope $end
$scope module up_sel12 $end
$var wire 1 h+ in0 $end
$var wire 1 h+ in1 $end
$var wire 1 d+ in2 $end
$var wire 1 d+ in3 $end
$var wire 1 %! s [1] $end
$var wire 1 &! s [0] $end
$var wire 1 J, out $end
$upscope $end
$scope module up_sel13 $end
$var wire 1 g+ in0 $end
$var wire 1 g+ in1 $end
$var wire 1 c+ in2 $end
$var wire 1 c+ in3 $end
$var wire 1 %! s [1] $end
$var wire 1 &! s [0] $end
$var wire 1 I, out $end
$upscope $end
$scope module up_sel14 $end
$var wire 1 f+ in0 $end
$var wire 1 f+ in1 $end
$var wire 1 r+ in2 $end
$var wire 1 Y, in3 $end
$var wire 1 %! s [1] $end
$var wire 1 &! s [0] $end
$var wire 1 H, out $end
$upscope $end
$scope module up_sel15 $end
$var wire 1 e+ in0 $end
$var wire 1 e+ in1 $end
$var wire 1 q+ in2 $end
$var wire 1 Z, in3 $end
$var wire 1 %! s [1] $end
$var wire 1 &! s [0] $end
$var wire 1 G, out $end
$upscope $end
$scope module low_sel[15] $end
$var wire 1 c+ in0 $end
$var wire 1 G, in1 $end
$var wire 1 U! s $end
$var wire 1 s+ out $end
$upscope $end
$scope module low_sel[14] $end
$var wire 1 d+ in0 $end
$var wire 1 H, in1 $end
$var wire 1 U! s $end
$var wire 1 t+ out $end
$upscope $end
$scope module low_sel[13] $end
$var wire 1 e+ in0 $end
$var wire 1 I, in1 $end
$var wire 1 U! s $end
$var wire 1 u+ out $end
$upscope $end
$scope module low_sel[12] $end
$var wire 1 f+ in0 $end
$var wire 1 J, in1 $end
$var wire 1 U! s $end
$var wire 1 v+ out $end
$upscope $end
$scope module low_sel[11] $end
$var wire 1 g+ in0 $end
$var wire 1 K, in1 $end
$var wire 1 U! s $end
$var wire 1 w+ out $end
$upscope $end
$scope module low_sel[10] $end
$var wire 1 h+ in0 $end
$var wire 1 L, in1 $end
$var wire 1 U! s $end
$var wire 1 x+ out $end
$upscope $end
$scope module low_sel[9] $end
$var wire 1 i+ in0 $end
$var wire 1 M, in1 $end
$var wire 1 U! s $end
$var wire 1 y+ out $end
$upscope $end
$scope module low_sel[8] $end
$var wire 1 j+ in0 $end
$var wire 1 N, in1 $end
$var wire 1 U! s $end
$var wire 1 z+ out $end
$upscope $end
$scope module low_sel[7] $end
$var wire 1 k+ in0 $end
$var wire 1 O, in1 $end
$var wire 1 U! s $end
$var wire 1 {+ out $end
$upscope $end
$scope module low_sel[6] $end
$var wire 1 l+ in0 $end
$var wire 1 P, in1 $end
$var wire 1 U! s $end
$var wire 1 |+ out $end
$upscope $end
$scope module low_sel[5] $end
$var wire 1 m+ in0 $end
$var wire 1 Q, in1 $end
$var wire 1 U! s $end
$var wire 1 }+ out $end
$upscope $end
$scope module low_sel[4] $end
$var wire 1 n+ in0 $end
$var wire 1 R, in1 $end
$var wire 1 U! s $end
$var wire 1 ~+ out $end
$upscope $end
$scope module low_sel[3] $end
$var wire 1 o+ in0 $end
$var wire 1 S, in1 $end
$var wire 1 U! s $end
$var wire 1 !, out $end
$upscope $end
$scope module low_sel[2] $end
$var wire 1 p+ in0 $end
$var wire 1 T, in1 $end
$var wire 1 U! s $end
$var wire 1 ", out $end
$upscope $end
$scope module low_sel[1] $end
$var wire 1 q+ in0 $end
$var wire 1 U, in1 $end
$var wire 1 U! s $end
$var wire 1 #, out $end
$upscope $end
$scope module low_sel[0] $end
$var wire 1 r+ in0 $end
$var wire 1 V, in1 $end
$var wire 1 U! s $end
$var wire 1 $, out $end
$upscope $end
$upscope $end
$scope module sBlade4 $end
$var wire 1 s+ in [15] $end
$var wire 1 t+ in [14] $end
$var wire 1 u+ in [13] $end
$var wire 1 v+ in [12] $end
$var wire 1 w+ in [11] $end
$var wire 1 x+ in [10] $end
$var wire 1 y+ in [9] $end
$var wire 1 z+ in [8] $end
$var wire 1 {+ in [7] $end
$var wire 1 |+ in [6] $end
$var wire 1 }+ in [5] $end
$var wire 1 ~+ in [4] $end
$var wire 1 !, in [3] $end
$var wire 1 ", in [2] $end
$var wire 1 #, in [1] $end
$var wire 1 $, in [0] $end
$var wire 1 T! sh $end
$var wire 1 %! op [1] $end
$var wire 1 &! op [0] $end
$var wire 1 %, out [15] $end
$var wire 1 &, out [14] $end
$var wire 1 ', out [13] $end
$var wire 1 (, out [12] $end
$var wire 1 ), out [11] $end
$var wire 1 *, out [10] $end
$var wire 1 +, out [9] $end
$var wire 1 ,, out [8] $end
$var wire 1 -, out [7] $end
$var wire 1 ., out [6] $end
$var wire 1 /, out [5] $end
$var wire 1 0, out [4] $end
$var wire 1 1, out [3] $end
$var wire 1 2, out [2] $end
$var wire 1 3, out [1] $end
$var wire 1 4, out [0] $end
$var wire 1 [, trans [15] $end
$var wire 1 \, trans [14] $end
$var wire 1 ], trans [13] $end
$var wire 1 ^, trans [12] $end
$var wire 1 _, trans [11] $end
$var wire 1 `, trans [10] $end
$var wire 1 a, trans [9] $end
$var wire 1 b, trans [8] $end
$var wire 1 c, trans [7] $end
$var wire 1 d, trans [6] $end
$var wire 1 e, trans [5] $end
$var wire 1 f, trans [4] $end
$var wire 1 g, trans [3] $end
$var wire 1 h, trans [2] $end
$var wire 1 i, trans [1] $end
$var wire 1 j, trans [0] $end
$scope module up_sel0 $end
$var wire 1 v+ in0 $end
$var wire 1 k, in1 $end
$var wire 1 ~+ in2 $end
$var wire 1 ~+ in3 $end
$var wire 1 %! s [1] $end
$var wire 1 &! s [0] $end
$var wire 1 j, out $end
$upscope $end
$scope module up_sel1 $end
$var wire 1 u+ in0 $end
$var wire 1 l, in1 $end
$var wire 1 }+ in2 $end
$var wire 1 }+ in3 $end
$var wire 1 %! s [1] $end
$var wire 1 &! s [0] $end
$var wire 1 i, out $end
$upscope $end
$scope module up_sel2 $end
$var wire 1 t+ in0 $end
$var wire 1 m, in1 $end
$var wire 1 |+ in2 $end
$var wire 1 |+ in3 $end
$var wire 1 %! s [1] $end
$var wire 1 &! s [0] $end
$var wire 1 h, out $end
$upscope $end
$scope module up_sel3 $end
$var wire 1 s+ in0 $end
$var wire 1 n, in1 $end
$var wire 1 {+ in2 $end
$var wire 1 {+ in3 $end
$var wire 1 %! s [1] $end
$var wire 1 &! s [0] $end
$var wire 1 g, out $end
$upscope $end
$scope module up_sel4 $end
$var wire 1 $, in0 $end
$var wire 1 $, in1 $end
$var wire 1 z+ in2 $end
$var wire 1 z+ in3 $end
$var wire 1 %! s [1] $end
$var wire 1 &! s [0] $end
$var wire 1 f, out $end
$upscope $end
$scope module up_sel5 $end
$var wire 1 #, in0 $end
$var wire 1 #, in1 $end
$var wire 1 y+ in2 $end
$var wire 1 y+ in3 $end
$var wire 1 %! s [1] $end
$var wire 1 &! s [0] $end
$var wire 1 e, out $end
$upscope $end
$scope module up_sel6 $end
$var wire 1 ", in0 $end
$var wire 1 ", in1 $end
$var wire 1 x+ in2 $end
$var wire 1 x+ in3 $end
$var wire 1 %! s [1] $end
$var wire 1 &! s [0] $end
$var wire 1 d, out $end
$upscope $end
$scope module up_sel7 $end
$var wire 1 !, in0 $end
$var wire 1 !, in1 $end
$var wire 1 w+ in2 $end
$var wire 1 w+ in3 $end
$var wire 1 %! s [1] $end
$var wire 1 &! s [0] $end
$var wire 1 c, out $end
$upscope $end
$scope module up_sel8 $end
$var wire 1 ~+ in0 $end
$var wire 1 ~+ in1 $end
$var wire 1 v+ in2 $end
$var wire 1 v+ in3 $end
$var wire 1 %! s [1] $end
$var wire 1 &! s [0] $end
$var wire 1 b, out $end
$upscope $end
$scope module up_sel9 $end
$var wire 1 }+ in0 $end
$var wire 1 }+ in1 $end
$var wire 1 u+ in2 $end
$var wire 1 u+ in3 $end
$var wire 1 %! s [1] $end
$var wire 1 &! s [0] $end
$var wire 1 a, out $end
$upscope $end
$scope module up_sel10 $end
$var wire 1 |+ in0 $end
$var wire 1 |+ in1 $end
$var wire 1 t+ in2 $end
$var wire 1 t+ in3 $end
$var wire 1 %! s [1] $end
$var wire 1 &! s [0] $end
$var wire 1 `, out $end
$upscope $end
$scope module up_sel11 $end
$var wire 1 {+ in0 $end
$var wire 1 {+ in1 $end
$var wire 1 s+ in2 $end
$var wire 1 s+ in3 $end
$var wire 1 %! s [1] $end
$var wire 1 &! s [0] $end
$var wire 1 _, out $end
$upscope $end
$scope module up_sel12 $end
$var wire 1 z+ in0 $end
$var wire 1 z+ in1 $end
$var wire 1 $, in2 $end
$var wire 1 o, in3 $end
$var wire 1 %! s [1] $end
$var wire 1 &! s [0] $end
$var wire 1 ^, out $end
$upscope $end
$scope module up_sel13 $end
$var wire 1 y+ in0 $end
$var wire 1 y+ in1 $end
$var wire 1 #, in2 $end
$var wire 1 p, in3 $end
$var wire 1 %! s [1] $end
$var wire 1 &! s [0] $end
$var wire 1 ], out $end
$upscope $end
$scope module up_sel14 $end
$var wire 1 x+ in0 $end
$var wire 1 x+ in1 $end
$var wire 1 ", in2 $end
$var wire 1 q, in3 $end
$var wire 1 %! s [1] $end
$var wire 1 &! s [0] $end
$var wire 1 \, out $end
$upscope $end
$scope module up_sel15 $end
$var wire 1 w+ in0 $end
$var wire 1 w+ in1 $end
$var wire 1 !, in2 $end
$var wire 1 r, in3 $end
$var wire 1 %! s [1] $end
$var wire 1 &! s [0] $end
$var wire 1 [, out $end
$upscope $end
$scope module low_sel[15] $end
$var wire 1 s+ in0 $end
$var wire 1 [, in1 $end
$var wire 1 T! s $end
$var wire 1 %, out $end
$upscope $end
$scope module low_sel[14] $end
$var wire 1 t+ in0 $end
$var wire 1 \, in1 $end
$var wire 1 T! s $end
$var wire 1 &, out $end
$upscope $end
$scope module low_sel[13] $end
$var wire 1 u+ in0 $end
$var wire 1 ], in1 $end
$var wire 1 T! s $end
$var wire 1 ', out $end
$upscope $end
$scope module low_sel[12] $end
$var wire 1 v+ in0 $end
$var wire 1 ^, in1 $end
$var wire 1 T! s $end
$var wire 1 (, out $end
$upscope $end
$scope module low_sel[11] $end
$var wire 1 w+ in0 $end
$var wire 1 _, in1 $end
$var wire 1 T! s $end
$var wire 1 ), out $end
$upscope $end
$scope module low_sel[10] $end
$var wire 1 x+ in0 $end
$var wire 1 `, in1 $end
$var wire 1 T! s $end
$var wire 1 *, out $end
$upscope $end
$scope module low_sel[9] $end
$var wire 1 y+ in0 $end
$var wire 1 a, in1 $end
$var wire 1 T! s $end
$var wire 1 +, out $end
$upscope $end
$scope module low_sel[8] $end
$var wire 1 z+ in0 $end
$var wire 1 b, in1 $end
$var wire 1 T! s $end
$var wire 1 ,, out $end
$upscope $end
$scope module low_sel[7] $end
$var wire 1 {+ in0 $end
$var wire 1 c, in1 $end
$var wire 1 T! s $end
$var wire 1 -, out $end
$upscope $end
$scope module low_sel[6] $end
$var wire 1 |+ in0 $end
$var wire 1 d, in1 $end
$var wire 1 T! s $end
$var wire 1 ., out $end
$upscope $end
$scope module low_sel[5] $end
$var wire 1 }+ in0 $end
$var wire 1 e, in1 $end
$var wire 1 T! s $end
$var wire 1 /, out $end
$upscope $end
$scope module low_sel[4] $end
$var wire 1 ~+ in0 $end
$var wire 1 f, in1 $end
$var wire 1 T! s $end
$var wire 1 0, out $end
$upscope $end
$scope module low_sel[3] $end
$var wire 1 !, in0 $end
$var wire 1 g, in1 $end
$var wire 1 T! s $end
$var wire 1 1, out $end
$upscope $end
$scope module low_sel[2] $end
$var wire 1 ", in0 $end
$var wire 1 h, in1 $end
$var wire 1 T! s $end
$var wire 1 2, out $end
$upscope $end
$scope module low_sel[1] $end
$var wire 1 #, in0 $end
$var wire 1 i, in1 $end
$var wire 1 T! s $end
$var wire 1 3, out $end
$upscope $end
$scope module low_sel[0] $end
$var wire 1 $, in0 $end
$var wire 1 j, in1 $end
$var wire 1 T! s $end
$var wire 1 4, out $end
$upscope $end
$upscope $end
$scope module sBlade8 $end
$var wire 1 %, in [15] $end
$var wire 1 &, in [14] $end
$var wire 1 ', in [13] $end
$var wire 1 (, in [12] $end
$var wire 1 ), in [11] $end
$var wire 1 *, in [10] $end
$var wire 1 +, in [9] $end
$var wire 1 ,, in [8] $end
$var wire 1 -, in [7] $end
$var wire 1 ., in [6] $end
$var wire 1 /, in [5] $end
$var wire 1 0, in [4] $end
$var wire 1 1, in [3] $end
$var wire 1 2, in [2] $end
$var wire 1 3, in [1] $end
$var wire 1 4, in [0] $end
$var wire 1 S! sh $end
$var wire 1 %! op [1] $end
$var wire 1 &! op [0] $end
$var wire 1 B+ out [15] $end
$var wire 1 C+ out [14] $end
$var wire 1 D+ out [13] $end
$var wire 1 E+ out [12] $end
$var wire 1 F+ out [11] $end
$var wire 1 G+ out [10] $end
$var wire 1 H+ out [9] $end
$var wire 1 I+ out [8] $end
$var wire 1 J+ out [7] $end
$var wire 1 K+ out [6] $end
$var wire 1 L+ out [5] $end
$var wire 1 M+ out [4] $end
$var wire 1 N+ out [3] $end
$var wire 1 O+ out [2] $end
$var wire 1 P+ out [1] $end
$var wire 1 Q+ out [0] $end
$var wire 1 s, trans [15] $end
$var wire 1 t, trans [14] $end
$var wire 1 u, trans [13] $end
$var wire 1 v, trans [12] $end
$var wire 1 w, trans [11] $end
$var wire 1 x, trans [10] $end
$var wire 1 y, trans [9] $end
$var wire 1 z, trans [8] $end
$var wire 1 {, trans [7] $end
$var wire 1 |, trans [6] $end
$var wire 1 }, trans [5] $end
$var wire 1 ~, trans [4] $end
$var wire 1 !- trans [3] $end
$var wire 1 "- trans [2] $end
$var wire 1 #- trans [1] $end
$var wire 1 $- trans [0] $end
$scope module up_sel0 $end
$var wire 1 ,, in0 $end
$var wire 1 %- in1 $end
$var wire 1 ,, in2 $end
$var wire 1 ,, in3 $end
$var wire 1 %! s [1] $end
$var wire 1 &! s [0] $end
$var wire 1 $- out $end
$upscope $end
$scope module up_sel1 $end
$var wire 1 +, in0 $end
$var wire 1 &- in1 $end
$var wire 1 +, in2 $end
$var wire 1 +, in3 $end
$var wire 1 %! s [1] $end
$var wire 1 &! s [0] $end
$var wire 1 #- out $end
$upscope $end
$scope module up_sel2 $end
$var wire 1 *, in0 $end
$var wire 1 '- in1 $end
$var wire 1 *, in2 $end
$var wire 1 *, in3 $end
$var wire 1 %! s [1] $end
$var wire 1 &! s [0] $end
$var wire 1 "- out $end
$upscope $end
$scope module up_sel3 $end
$var wire 1 ), in0 $end
$var wire 1 (- in1 $end
$var wire 1 ), in2 $end
$var wire 1 ), in3 $end
$var wire 1 %! s [1] $end
$var wire 1 &! s [0] $end
$var wire 1 !- out $end
$upscope $end
$scope module up_sel4 $end
$var wire 1 (, in0 $end
$var wire 1 )- in1 $end
$var wire 1 (, in2 $end
$var wire 1 (, in3 $end
$var wire 1 %! s [1] $end
$var wire 1 &! s [0] $end
$var wire 1 ~, out $end
$upscope $end
$scope module up_sel5 $end
$var wire 1 ', in0 $end
$var wire 1 *- in1 $end
$var wire 1 ', in2 $end
$var wire 1 ', in3 $end
$var wire 1 %! s [1] $end
$var wire 1 &! s [0] $end
$var wire 1 }, out $end
$upscope $end
$scope module up_sel6 $end
$var wire 1 &, in0 $end
$var wire 1 +- in1 $end
$var wire 1 &, in2 $end
$var wire 1 &, in3 $end
$var wire 1 %! s [1] $end
$var wire 1 &! s [0] $end
$var wire 1 |, out $end
$upscope $end
$scope module up_sel7 $end
$var wire 1 %, in0 $end
$var wire 1 ,- in1 $end
$var wire 1 %, in2 $end
$var wire 1 %, in3 $end
$var wire 1 %! s [1] $end
$var wire 1 &! s [0] $end
$var wire 1 {, out $end
$upscope $end
$scope module up_sel8 $end
$var wire 1 4, in0 $end
$var wire 1 4, in1 $end
$var wire 1 4, in2 $end
$var wire 1 -- in3 $end
$var wire 1 %! s [1] $end
$var wire 1 &! s [0] $end
$var wire 1 z, out $end
$upscope $end
$scope module up_sel9 $end
$var wire 1 3, in0 $end
$var wire 1 3, in1 $end
$var wire 1 3, in2 $end
$var wire 1 .- in3 $end
$var wire 1 %! s [1] $end
$var wire 1 &! s [0] $end
$var wire 1 y, out $end
$upscope $end
$scope module up_sel10 $end
$var wire 1 2, in0 $end
$var wire 1 2, in1 $end
$var wire 1 2, in2 $end
$var wire 1 /- in3 $end
$var wire 1 %! s [1] $end
$var wire 1 &! s [0] $end
$var wire 1 x, out $end
$upscope $end
$scope module up_sel11 $end
$var wire 1 1, in0 $end
$var wire 1 1, in1 $end
$var wire 1 1, in2 $end
$var wire 1 0- in3 $end
$var wire 1 %! s [1] $end
$var wire 1 &! s [0] $end
$var wire 1 w, out $end
$upscope $end
$scope module up_sel12 $end
$var wire 1 0, in0 $end
$var wire 1 0, in1 $end
$var wire 1 0, in2 $end
$var wire 1 1- in3 $end
$var wire 1 %! s [1] $end
$var wire 1 &! s [0] $end
$var wire 1 v, out $end
$upscope $end
$scope module up_sel13 $end
$var wire 1 /, in0 $end
$var wire 1 /, in1 $end
$var wire 1 /, in2 $end
$var wire 1 2- in3 $end
$var wire 1 %! s [1] $end
$var wire 1 &! s [0] $end
$var wire 1 u, out $end
$upscope $end
$scope module up_sel14 $end
$var wire 1 ., in0 $end
$var wire 1 ., in1 $end
$var wire 1 ., in2 $end
$var wire 1 3- in3 $end
$var wire 1 %! s [1] $end
$var wire 1 &! s [0] $end
$var wire 1 t, out $end
$upscope $end
$scope module up_sel15 $end
$var wire 1 -, in0 $end
$var wire 1 -, in1 $end
$var wire 1 -, in2 $end
$var wire 1 4- in3 $end
$var wire 1 %! s [1] $end
$var wire 1 &! s [0] $end
$var wire 1 s, out $end
$upscope $end
$scope module low_sel[15] $end
$var wire 1 %, in0 $end
$var wire 1 s, in1 $end
$var wire 1 S! s $end
$var wire 1 B+ out $end
$upscope $end
$scope module low_sel[14] $end
$var wire 1 &, in0 $end
$var wire 1 t, in1 $end
$var wire 1 S! s $end
$var wire 1 C+ out $end
$upscope $end
$scope module low_sel[13] $end
$var wire 1 ', in0 $end
$var wire 1 u, in1 $end
$var wire 1 S! s $end
$var wire 1 D+ out $end
$upscope $end
$scope module low_sel[12] $end
$var wire 1 (, in0 $end
$var wire 1 v, in1 $end
$var wire 1 S! s $end
$var wire 1 E+ out $end
$upscope $end
$scope module low_sel[11] $end
$var wire 1 ), in0 $end
$var wire 1 w, in1 $end
$var wire 1 S! s $end
$var wire 1 F+ out $end
$upscope $end
$scope module low_sel[10] $end
$var wire 1 *, in0 $end
$var wire 1 x, in1 $end
$var wire 1 S! s $end
$var wire 1 G+ out $end
$upscope $end
$scope module low_sel[9] $end
$var wire 1 +, in0 $end
$var wire 1 y, in1 $end
$var wire 1 S! s $end
$var wire 1 H+ out $end
$upscope $end
$scope module low_sel[8] $end
$var wire 1 ,, in0 $end
$var wire 1 z, in1 $end
$var wire 1 S! s $end
$var wire 1 I+ out $end
$upscope $end
$scope module low_sel[7] $end
$var wire 1 -, in0 $end
$var wire 1 {, in1 $end
$var wire 1 S! s $end
$var wire 1 J+ out $end
$upscope $end
$scope module low_sel[6] $end
$var wire 1 ., in0 $end
$var wire 1 |, in1 $end
$var wire 1 S! s $end
$var wire 1 K+ out $end
$upscope $end
$scope module low_sel[5] $end
$var wire 1 /, in0 $end
$var wire 1 }, in1 $end
$var wire 1 S! s $end
$var wire 1 L+ out $end
$upscope $end
$scope module low_sel[4] $end
$var wire 1 0, in0 $end
$var wire 1 ~, in1 $end
$var wire 1 S! s $end
$var wire 1 M+ out $end
$upscope $end
$scope module low_sel[3] $end
$var wire 1 1, in0 $end
$var wire 1 !- in1 $end
$var wire 1 S! s $end
$var wire 1 N+ out $end
$upscope $end
$scope module low_sel[2] $end
$var wire 1 2, in0 $end
$var wire 1 "- in1 $end
$var wire 1 S! s $end
$var wire 1 O+ out $end
$upscope $end
$scope module low_sel[1] $end
$var wire 1 3, in0 $end
$var wire 1 #- in1 $end
$var wire 1 S! s $end
$var wire 1 P+ out $end
$upscope $end
$scope module low_sel[0] $end
$var wire 1 4, in0 $end
$var wire 1 $- in1 $end
$var wire 1 S! s $end
$var wire 1 Q+ out $end
=======
$var wire 1 +/ in3 $end
$var wire 1 %! s [1] $end
$var wire 1 &! s [0] $end
$var wire 1 x. out $end
$upscope $end
$scope module low_sel[15] $end
$var wire 1 `! in0 $end
$var wire 1 x. in1 $end
$var wire 1 V! s $end
$var wire 1 H. out $end
$upscope $end
$scope module low_sel[14] $end
$var wire 1 a! in0 $end
$var wire 1 y. in1 $end
$var wire 1 V! s $end
$var wire 1 I. out $end
$upscope $end
$scope module low_sel[13] $end
$var wire 1 b! in0 $end
$var wire 1 z. in1 $end
$var wire 1 V! s $end
$var wire 1 J. out $end
$upscope $end
$scope module low_sel[12] $end
$var wire 1 c! in0 $end
$var wire 1 {. in1 $end
$var wire 1 V! s $end
$var wire 1 K. out $end
$upscope $end
$scope module low_sel[11] $end
$var wire 1 d! in0 $end
$var wire 1 |. in1 $end
$var wire 1 V! s $end
$var wire 1 L. out $end
$upscope $end
$scope module low_sel[10] $end
$var wire 1 e! in0 $end
$var wire 1 }. in1 $end
$var wire 1 V! s $end
$var wire 1 M. out $end
$upscope $end
$scope module low_sel[9] $end
$var wire 1 f! in0 $end
$var wire 1 ~. in1 $end
$var wire 1 V! s $end
$var wire 1 N. out $end
$upscope $end
$scope module low_sel[8] $end
$var wire 1 g! in0 $end
$var wire 1 !/ in1 $end
$var wire 1 V! s $end
$var wire 1 O. out $end
$upscope $end
$scope module low_sel[7] $end
$var wire 1 h! in0 $end
$var wire 1 "/ in1 $end
$var wire 1 V! s $end
$var wire 1 P. out $end
$upscope $end
$scope module low_sel[6] $end
$var wire 1 i! in0 $end
$var wire 1 #/ in1 $end
$var wire 1 V! s $end
$var wire 1 Q. out $end
$upscope $end
$scope module low_sel[5] $end
$var wire 1 j! in0 $end
$var wire 1 $/ in1 $end
$var wire 1 V! s $end
$var wire 1 R. out $end
$upscope $end
$scope module low_sel[4] $end
$var wire 1 k! in0 $end
$var wire 1 %/ in1 $end
$var wire 1 V! s $end
$var wire 1 S. out $end
$upscope $end
$scope module low_sel[3] $end
$var wire 1 l! in0 $end
$var wire 1 &/ in1 $end
$var wire 1 V! s $end
$var wire 1 T. out $end
$upscope $end
$scope module low_sel[2] $end
$var wire 1 m! in0 $end
$var wire 1 '/ in1 $end
$var wire 1 V! s $end
$var wire 1 U. out $end
$upscope $end
$scope module low_sel[1] $end
$var wire 1 n! in0 $end
$var wire 1 (/ in1 $end
$var wire 1 V! s $end
$var wire 1 V. out $end
$upscope $end
$scope module low_sel[0] $end
$var wire 1 o! in0 $end
$var wire 1 )/ in1 $end
$var wire 1 V! s $end
$var wire 1 W. out $end
$upscope $end
$upscope $end
$scope module sBlade2 $end
$var wire 1 H. in [15] $end
$var wire 1 I. in [14] $end
$var wire 1 J. in [13] $end
$var wire 1 K. in [12] $end
$var wire 1 L. in [11] $end
$var wire 1 M. in [10] $end
$var wire 1 N. in [9] $end
$var wire 1 O. in [8] $end
$var wire 1 P. in [7] $end
$var wire 1 Q. in [6] $end
$var wire 1 R. in [5] $end
$var wire 1 S. in [4] $end
$var wire 1 T. in [3] $end
$var wire 1 U. in [2] $end
$var wire 1 V. in [1] $end
$var wire 1 W. in [0] $end
$var wire 1 U! sh $end
$var wire 1 %! op [1] $end
$var wire 1 &! op [0] $end
$var wire 1 X. out [15] $end
$var wire 1 Y. out [14] $end
$var wire 1 Z. out [13] $end
$var wire 1 [. out [12] $end
$var wire 1 \. out [11] $end
$var wire 1 ]. out [10] $end
$var wire 1 ^. out [9] $end
$var wire 1 _. out [8] $end
$var wire 1 `. out [7] $end
$var wire 1 a. out [6] $end
$var wire 1 b. out [5] $end
$var wire 1 c. out [4] $end
$var wire 1 d. out [3] $end
$var wire 1 e. out [2] $end
$var wire 1 f. out [1] $end
$var wire 1 g. out [0] $end
$var wire 1 ,/ trans [15] $end
$var wire 1 -/ trans [14] $end
$var wire 1 ./ trans [13] $end
$var wire 1 // trans [12] $end
$var wire 1 0/ trans [11] $end
$var wire 1 1/ trans [10] $end
$var wire 1 2/ trans [9] $end
$var wire 1 3/ trans [8] $end
$var wire 1 4/ trans [7] $end
$var wire 1 5/ trans [6] $end
$var wire 1 6/ trans [5] $end
$var wire 1 7/ trans [4] $end
$var wire 1 8/ trans [3] $end
$var wire 1 9/ trans [2] $end
$var wire 1 :/ trans [1] $end
$var wire 1 ;/ trans [0] $end
$scope module up_sel0 $end
$var wire 1 I. in0 $end
$var wire 1 </ in1 $end
$var wire 1 U. in2 $end
$var wire 1 U. in3 $end
$var wire 1 %! s [1] $end
$var wire 1 &! s [0] $end
$var wire 1 ;/ out $end
$upscope $end
$scope module up_sel1 $end
$var wire 1 H. in0 $end
$var wire 1 =/ in1 $end
$var wire 1 T. in2 $end
$var wire 1 T. in3 $end
$var wire 1 %! s [1] $end
$var wire 1 &! s [0] $end
$var wire 1 :/ out $end
$upscope $end
$scope module up_sel2 $end
$var wire 1 W. in0 $end
$var wire 1 W. in1 $end
$var wire 1 S. in2 $end
$var wire 1 S. in3 $end
$var wire 1 %! s [1] $end
$var wire 1 &! s [0] $end
$var wire 1 9/ out $end
$upscope $end
$scope module up_sel3 $end
$var wire 1 V. in0 $end
$var wire 1 V. in1 $end
$var wire 1 R. in2 $end
$var wire 1 R. in3 $end
$var wire 1 %! s [1] $end
$var wire 1 &! s [0] $end
$var wire 1 8/ out $end
$upscope $end
$scope module up_sel4 $end
$var wire 1 U. in0 $end
$var wire 1 U. in1 $end
$var wire 1 Q. in2 $end
$var wire 1 Q. in3 $end
$var wire 1 %! s [1] $end
$var wire 1 &! s [0] $end
$var wire 1 7/ out $end
$upscope $end
$scope module up_sel5 $end
$var wire 1 T. in0 $end
$var wire 1 T. in1 $end
$var wire 1 P. in2 $end
$var wire 1 P. in3 $end
$var wire 1 %! s [1] $end
$var wire 1 &! s [0] $end
$var wire 1 6/ out $end
$upscope $end
$scope module up_sel6 $end
$var wire 1 S. in0 $end
$var wire 1 S. in1 $end
$var wire 1 O. in2 $end
$var wire 1 O. in3 $end
$var wire 1 %! s [1] $end
$var wire 1 &! s [0] $end
$var wire 1 5/ out $end
$upscope $end
$scope module up_sel7 $end
$var wire 1 R. in0 $end
$var wire 1 R. in1 $end
$var wire 1 N. in2 $end
$var wire 1 N. in3 $end
$var wire 1 %! s [1] $end
$var wire 1 &! s [0] $end
$var wire 1 4/ out $end
$upscope $end
$scope module up_sel8 $end
$var wire 1 Q. in0 $end
$var wire 1 Q. in1 $end
$var wire 1 M. in2 $end
$var wire 1 M. in3 $end
$var wire 1 %! s [1] $end
$var wire 1 &! s [0] $end
$var wire 1 3/ out $end
$upscope $end
$scope module up_sel9 $end
$var wire 1 P. in0 $end
$var wire 1 P. in1 $end
$var wire 1 L. in2 $end
$var wire 1 L. in3 $end
$var wire 1 %! s [1] $end
$var wire 1 &! s [0] $end
$var wire 1 2/ out $end
$upscope $end
$scope module up_sel10 $end
$var wire 1 O. in0 $end
$var wire 1 O. in1 $end
$var wire 1 K. in2 $end
$var wire 1 K. in3 $end
$var wire 1 %! s [1] $end
$var wire 1 &! s [0] $end
$var wire 1 1/ out $end
$upscope $end
$scope module up_sel11 $end
$var wire 1 N. in0 $end
$var wire 1 N. in1 $end
$var wire 1 J. in2 $end
$var wire 1 J. in3 $end
$var wire 1 %! s [1] $end
$var wire 1 &! s [0] $end
$var wire 1 0/ out $end
$upscope $end
$scope module up_sel12 $end
$var wire 1 M. in0 $end
$var wire 1 M. in1 $end
$var wire 1 I. in2 $end
$var wire 1 I. in3 $end
$var wire 1 %! s [1] $end
$var wire 1 &! s [0] $end
$var wire 1 // out $end
$upscope $end
$scope module up_sel13 $end
$var wire 1 L. in0 $end
$var wire 1 L. in1 $end
$var wire 1 H. in2 $end
$var wire 1 H. in3 $end
$var wire 1 %! s [1] $end
$var wire 1 &! s [0] $end
$var wire 1 ./ out $end
$upscope $end
$scope module up_sel14 $end
$var wire 1 K. in0 $end
$var wire 1 K. in1 $end
$var wire 1 W. in2 $end
$var wire 1 >/ in3 $end
$var wire 1 %! s [1] $end
$var wire 1 &! s [0] $end
$var wire 1 -/ out $end
$upscope $end
$scope module up_sel15 $end
$var wire 1 J. in0 $end
$var wire 1 J. in1 $end
$var wire 1 V. in2 $end
$var wire 1 ?/ in3 $end
$var wire 1 %! s [1] $end
$var wire 1 &! s [0] $end
$var wire 1 ,/ out $end
$upscope $end
$scope module low_sel[15] $end
$var wire 1 H. in0 $end
$var wire 1 ,/ in1 $end
$var wire 1 U! s $end
$var wire 1 X. out $end
$upscope $end
$scope module low_sel[14] $end
$var wire 1 I. in0 $end
$var wire 1 -/ in1 $end
$var wire 1 U! s $end
$var wire 1 Y. out $end
$upscope $end
$scope module low_sel[13] $end
$var wire 1 J. in0 $end
$var wire 1 ./ in1 $end
$var wire 1 U! s $end
$var wire 1 Z. out $end
$upscope $end
$scope module low_sel[12] $end
$var wire 1 K. in0 $end
$var wire 1 // in1 $end
$var wire 1 U! s $end
$var wire 1 [. out $end
$upscope $end
$scope module low_sel[11] $end
$var wire 1 L. in0 $end
$var wire 1 0/ in1 $end
$var wire 1 U! s $end
$var wire 1 \. out $end
$upscope $end
$scope module low_sel[10] $end
$var wire 1 M. in0 $end
$var wire 1 1/ in1 $end
$var wire 1 U! s $end
$var wire 1 ]. out $end
$upscope $end
$scope module low_sel[9] $end
$var wire 1 N. in0 $end
$var wire 1 2/ in1 $end
$var wire 1 U! s $end
$var wire 1 ^. out $end
$upscope $end
$scope module low_sel[8] $end
$var wire 1 O. in0 $end
$var wire 1 3/ in1 $end
$var wire 1 U! s $end
$var wire 1 _. out $end
$upscope $end
$scope module low_sel[7] $end
$var wire 1 P. in0 $end
$var wire 1 4/ in1 $end
$var wire 1 U! s $end
$var wire 1 `. out $end
$upscope $end
$scope module low_sel[6] $end
$var wire 1 Q. in0 $end
$var wire 1 5/ in1 $end
$var wire 1 U! s $end
$var wire 1 a. out $end
$upscope $end
$scope module low_sel[5] $end
$var wire 1 R. in0 $end
$var wire 1 6/ in1 $end
$var wire 1 U! s $end
$var wire 1 b. out $end
$upscope $end
$scope module low_sel[4] $end
$var wire 1 S. in0 $end
$var wire 1 7/ in1 $end
$var wire 1 U! s $end
$var wire 1 c. out $end
$upscope $end
$scope module low_sel[3] $end
$var wire 1 T. in0 $end
$var wire 1 8/ in1 $end
$var wire 1 U! s $end
$var wire 1 d. out $end
$upscope $end
$scope module low_sel[2] $end
$var wire 1 U. in0 $end
$var wire 1 9/ in1 $end
$var wire 1 U! s $end
$var wire 1 e. out $end
$upscope $end
$scope module low_sel[1] $end
$var wire 1 V. in0 $end
$var wire 1 :/ in1 $end
$var wire 1 U! s $end
$var wire 1 f. out $end
$upscope $end
$scope module low_sel[0] $end
$var wire 1 W. in0 $end
$var wire 1 ;/ in1 $end
$var wire 1 U! s $end
$var wire 1 g. out $end
$upscope $end
$upscope $end
$scope module sBlade4 $end
$var wire 1 X. in [15] $end
$var wire 1 Y. in [14] $end
$var wire 1 Z. in [13] $end
$var wire 1 [. in [12] $end
$var wire 1 \. in [11] $end
$var wire 1 ]. in [10] $end
$var wire 1 ^. in [9] $end
$var wire 1 _. in [8] $end
$var wire 1 `. in [7] $end
$var wire 1 a. in [6] $end
$var wire 1 b. in [5] $end
$var wire 1 c. in [4] $end
$var wire 1 d. in [3] $end
$var wire 1 e. in [2] $end
$var wire 1 f. in [1] $end
$var wire 1 g. in [0] $end
$var wire 1 T! sh $end
$var wire 1 %! op [1] $end
$var wire 1 &! op [0] $end
$var wire 1 h. out [15] $end
$var wire 1 i. out [14] $end
$var wire 1 j. out [13] $end
$var wire 1 k. out [12] $end
$var wire 1 l. out [11] $end
$var wire 1 m. out [10] $end
$var wire 1 n. out [9] $end
$var wire 1 o. out [8] $end
$var wire 1 p. out [7] $end
$var wire 1 q. out [6] $end
$var wire 1 r. out [5] $end
$var wire 1 s. out [4] $end
$var wire 1 t. out [3] $end
$var wire 1 u. out [2] $end
$var wire 1 v. out [1] $end
$var wire 1 w. out [0] $end
$var wire 1 @/ trans [15] $end
$var wire 1 A/ trans [14] $end
$var wire 1 B/ trans [13] $end
$var wire 1 C/ trans [12] $end
$var wire 1 D/ trans [11] $end
$var wire 1 E/ trans [10] $end
$var wire 1 F/ trans [9] $end
$var wire 1 G/ trans [8] $end
$var wire 1 H/ trans [7] $end
$var wire 1 I/ trans [6] $end
$var wire 1 J/ trans [5] $end
$var wire 1 K/ trans [4] $end
$var wire 1 L/ trans [3] $end
$var wire 1 M/ trans [2] $end
$var wire 1 N/ trans [1] $end
$var wire 1 O/ trans [0] $end
$scope module up_sel0 $end
$var wire 1 [. in0 $end
$var wire 1 P/ in1 $end
$var wire 1 c. in2 $end
$var wire 1 c. in3 $end
$var wire 1 %! s [1] $end
$var wire 1 &! s [0] $end
$var wire 1 O/ out $end
$upscope $end
$scope module up_sel1 $end
$var wire 1 Z. in0 $end
$var wire 1 Q/ in1 $end
$var wire 1 b. in2 $end
$var wire 1 b. in3 $end
$var wire 1 %! s [1] $end
$var wire 1 &! s [0] $end
$var wire 1 N/ out $end
$upscope $end
$scope module up_sel2 $end
$var wire 1 Y. in0 $end
$var wire 1 R/ in1 $end
$var wire 1 a. in2 $end
$var wire 1 a. in3 $end
$var wire 1 %! s [1] $end
$var wire 1 &! s [0] $end
$var wire 1 M/ out $end
$upscope $end
$scope module up_sel3 $end
$var wire 1 X. in0 $end
$var wire 1 S/ in1 $end
$var wire 1 `. in2 $end
$var wire 1 `. in3 $end
$var wire 1 %! s [1] $end
$var wire 1 &! s [0] $end
$var wire 1 L/ out $end
$upscope $end
$scope module up_sel4 $end
$var wire 1 g. in0 $end
$var wire 1 g. in1 $end
$var wire 1 _. in2 $end
$var wire 1 _. in3 $end
$var wire 1 %! s [1] $end
$var wire 1 &! s [0] $end
$var wire 1 K/ out $end
$upscope $end
$scope module up_sel5 $end
$var wire 1 f. in0 $end
$var wire 1 f. in1 $end
$var wire 1 ^. in2 $end
$var wire 1 ^. in3 $end
$var wire 1 %! s [1] $end
$var wire 1 &! s [0] $end
$var wire 1 J/ out $end
$upscope $end
$scope module up_sel6 $end
$var wire 1 e. in0 $end
$var wire 1 e. in1 $end
$var wire 1 ]. in2 $end
$var wire 1 ]. in3 $end
$var wire 1 %! s [1] $end
$var wire 1 &! s [0] $end
$var wire 1 I/ out $end
$upscope $end
$scope module up_sel7 $end
$var wire 1 d. in0 $end
$var wire 1 d. in1 $end
$var wire 1 \. in2 $end
$var wire 1 \. in3 $end
$var wire 1 %! s [1] $end
$var wire 1 &! s [0] $end
$var wire 1 H/ out $end
$upscope $end
$scope module up_sel8 $end
$var wire 1 c. in0 $end
$var wire 1 c. in1 $end
$var wire 1 [. in2 $end
$var wire 1 [. in3 $end
$var wire 1 %! s [1] $end
$var wire 1 &! s [0] $end
$var wire 1 G/ out $end
$upscope $end
$scope module up_sel9 $end
$var wire 1 b. in0 $end
$var wire 1 b. in1 $end
$var wire 1 Z. in2 $end
$var wire 1 Z. in3 $end
$var wire 1 %! s [1] $end
$var wire 1 &! s [0] $end
$var wire 1 F/ out $end
$upscope $end
$scope module up_sel10 $end
$var wire 1 a. in0 $end
$var wire 1 a. in1 $end
$var wire 1 Y. in2 $end
$var wire 1 Y. in3 $end
$var wire 1 %! s [1] $end
$var wire 1 &! s [0] $end
$var wire 1 E/ out $end
$upscope $end
$scope module up_sel11 $end
$var wire 1 `. in0 $end
$var wire 1 `. in1 $end
$var wire 1 X. in2 $end
$var wire 1 X. in3 $end
$var wire 1 %! s [1] $end
$var wire 1 &! s [0] $end
$var wire 1 D/ out $end
$upscope $end
$scope module up_sel12 $end
$var wire 1 _. in0 $end
$var wire 1 _. in1 $end
$var wire 1 g. in2 $end
$var wire 1 T/ in3 $end
$var wire 1 %! s [1] $end
$var wire 1 &! s [0] $end
$var wire 1 C/ out $end
$upscope $end
$scope module up_sel13 $end
$var wire 1 ^. in0 $end
$var wire 1 ^. in1 $end
$var wire 1 f. in2 $end
$var wire 1 U/ in3 $end
$var wire 1 %! s [1] $end
$var wire 1 &! s [0] $end
$var wire 1 B/ out $end
$upscope $end
$scope module up_sel14 $end
$var wire 1 ]. in0 $end
$var wire 1 ]. in1 $end
$var wire 1 e. in2 $end
$var wire 1 V/ in3 $end
$var wire 1 %! s [1] $end
$var wire 1 &! s [0] $end
$var wire 1 A/ out $end
$upscope $end
$scope module up_sel15 $end
$var wire 1 \. in0 $end
$var wire 1 \. in1 $end
$var wire 1 d. in2 $end
$var wire 1 W/ in3 $end
$var wire 1 %! s [1] $end
$var wire 1 &! s [0] $end
$var wire 1 @/ out $end
$upscope $end
$scope module low_sel[15] $end
$var wire 1 X. in0 $end
$var wire 1 @/ in1 $end
$var wire 1 T! s $end
$var wire 1 h. out $end
$upscope $end
$scope module low_sel[14] $end
$var wire 1 Y. in0 $end
$var wire 1 A/ in1 $end
$var wire 1 T! s $end
$var wire 1 i. out $end
$upscope $end
$scope module low_sel[13] $end
$var wire 1 Z. in0 $end
$var wire 1 B/ in1 $end
$var wire 1 T! s $end
$var wire 1 j. out $end
$upscope $end
$scope module low_sel[12] $end
$var wire 1 [. in0 $end
$var wire 1 C/ in1 $end
$var wire 1 T! s $end
$var wire 1 k. out $end
$upscope $end
$scope module low_sel[11] $end
$var wire 1 \. in0 $end
$var wire 1 D/ in1 $end
$var wire 1 T! s $end
$var wire 1 l. out $end
$upscope $end
$scope module low_sel[10] $end
$var wire 1 ]. in0 $end
$var wire 1 E/ in1 $end
$var wire 1 T! s $end
$var wire 1 m. out $end
$upscope $end
$scope module low_sel[9] $end
$var wire 1 ^. in0 $end
$var wire 1 F/ in1 $end
$var wire 1 T! s $end
$var wire 1 n. out $end
$upscope $end
$scope module low_sel[8] $end
$var wire 1 _. in0 $end
$var wire 1 G/ in1 $end
$var wire 1 T! s $end
$var wire 1 o. out $end
$upscope $end
$scope module low_sel[7] $end
$var wire 1 `. in0 $end
$var wire 1 H/ in1 $end
$var wire 1 T! s $end
$var wire 1 p. out $end
$upscope $end
$scope module low_sel[6] $end
$var wire 1 a. in0 $end
$var wire 1 I/ in1 $end
$var wire 1 T! s $end
$var wire 1 q. out $end
$upscope $end
$scope module low_sel[5] $end
$var wire 1 b. in0 $end
$var wire 1 J/ in1 $end
$var wire 1 T! s $end
$var wire 1 r. out $end
$upscope $end
$scope module low_sel[4] $end
$var wire 1 c. in0 $end
$var wire 1 K/ in1 $end
$var wire 1 T! s $end
$var wire 1 s. out $end
$upscope $end
$scope module low_sel[3] $end
$var wire 1 d. in0 $end
$var wire 1 L/ in1 $end
$var wire 1 T! s $end
$var wire 1 t. out $end
$upscope $end
$scope module low_sel[2] $end
$var wire 1 e. in0 $end
$var wire 1 M/ in1 $end
$var wire 1 T! s $end
$var wire 1 u. out $end
$upscope $end
$scope module low_sel[1] $end
$var wire 1 f. in0 $end
$var wire 1 N/ in1 $end
$var wire 1 T! s $end
$var wire 1 v. out $end
$upscope $end
$scope module low_sel[0] $end
$var wire 1 g. in0 $end
$var wire 1 O/ in1 $end
$var wire 1 T! s $end
$var wire 1 w. out $end
$upscope $end
$upscope $end
$scope module sBlade8 $end
$var wire 1 h. in [15] $end
$var wire 1 i. in [14] $end
$var wire 1 j. in [13] $end
$var wire 1 k. in [12] $end
$var wire 1 l. in [11] $end
$var wire 1 m. in [10] $end
$var wire 1 n. in [9] $end
$var wire 1 o. in [8] $end
$var wire 1 p. in [7] $end
$var wire 1 q. in [6] $end
$var wire 1 r. in [5] $end
$var wire 1 s. in [4] $end
$var wire 1 t. in [3] $end
$var wire 1 u. in [2] $end
$var wire 1 v. in [1] $end
$var wire 1 w. in [0] $end
$var wire 1 S! sh $end
$var wire 1 %! op [1] $end
$var wire 1 &! op [0] $end
$var wire 1 '. out [15] $end
$var wire 1 (. out [14] $end
$var wire 1 ). out [13] $end
$var wire 1 *. out [12] $end
$var wire 1 +. out [11] $end
$var wire 1 ,. out [10] $end
$var wire 1 -. out [9] $end
$var wire 1 .. out [8] $end
$var wire 1 /. out [7] $end
$var wire 1 0. out [6] $end
$var wire 1 1. out [5] $end
$var wire 1 2. out [4] $end
$var wire 1 3. out [3] $end
$var wire 1 4. out [2] $end
$var wire 1 5. out [1] $end
$var wire 1 6. out [0] $end
$var wire 1 X/ trans [15] $end
$var wire 1 Y/ trans [14] $end
$var wire 1 Z/ trans [13] $end
$var wire 1 [/ trans [12] $end
$var wire 1 \/ trans [11] $end
$var wire 1 ]/ trans [10] $end
$var wire 1 ^/ trans [9] $end
$var wire 1 _/ trans [8] $end
$var wire 1 `/ trans [7] $end
$var wire 1 a/ trans [6] $end
$var wire 1 b/ trans [5] $end
$var wire 1 c/ trans [4] $end
$var wire 1 d/ trans [3] $end
$var wire 1 e/ trans [2] $end
$var wire 1 f/ trans [1] $end
$var wire 1 g/ trans [0] $end
$scope module up_sel0 $end
$var wire 1 o. in0 $end
$var wire 1 h/ in1 $end
$var wire 1 o. in2 $end
$var wire 1 o. in3 $end
$var wire 1 %! s [1] $end
$var wire 1 &! s [0] $end
$var wire 1 g/ out $end
$upscope $end
$scope module up_sel1 $end
$var wire 1 n. in0 $end
$var wire 1 i/ in1 $end
$var wire 1 n. in2 $end
$var wire 1 n. in3 $end
$var wire 1 %! s [1] $end
$var wire 1 &! s [0] $end
$var wire 1 f/ out $end
$upscope $end
$scope module up_sel2 $end
$var wire 1 m. in0 $end
$var wire 1 j/ in1 $end
$var wire 1 m. in2 $end
$var wire 1 m. in3 $end
$var wire 1 %! s [1] $end
$var wire 1 &! s [0] $end
$var wire 1 e/ out $end
$upscope $end
$scope module up_sel3 $end
$var wire 1 l. in0 $end
$var wire 1 k/ in1 $end
$var wire 1 l. in2 $end
$var wire 1 l. in3 $end
$var wire 1 %! s [1] $end
$var wire 1 &! s [0] $end
$var wire 1 d/ out $end
$upscope $end
$scope module up_sel4 $end
$var wire 1 k. in0 $end
$var wire 1 l/ in1 $end
$var wire 1 k. in2 $end
$var wire 1 k. in3 $end
$var wire 1 %! s [1] $end
$var wire 1 &! s [0] $end
$var wire 1 c/ out $end
$upscope $end
$scope module up_sel5 $end
$var wire 1 j. in0 $end
$var wire 1 m/ in1 $end
$var wire 1 j. in2 $end
$var wire 1 j. in3 $end
$var wire 1 %! s [1] $end
$var wire 1 &! s [0] $end
$var wire 1 b/ out $end
$upscope $end
$scope module up_sel6 $end
$var wire 1 i. in0 $end
$var wire 1 n/ in1 $end
$var wire 1 i. in2 $end
$var wire 1 i. in3 $end
$var wire 1 %! s [1] $end
$var wire 1 &! s [0] $end
$var wire 1 a/ out $end
$upscope $end
$scope module up_sel7 $end
$var wire 1 h. in0 $end
$var wire 1 o/ in1 $end
$var wire 1 h. in2 $end
$var wire 1 h. in3 $end
$var wire 1 %! s [1] $end
$var wire 1 &! s [0] $end
$var wire 1 `/ out $end
$upscope $end
$scope module up_sel8 $end
$var wire 1 w. in0 $end
$var wire 1 w. in1 $end
$var wire 1 w. in2 $end
$var wire 1 p/ in3 $end
$var wire 1 %! s [1] $end
$var wire 1 &! s [0] $end
$var wire 1 _/ out $end
$upscope $end
$scope module up_sel9 $end
$var wire 1 v. in0 $end
$var wire 1 v. in1 $end
$var wire 1 v. in2 $end
$var wire 1 q/ in3 $end
$var wire 1 %! s [1] $end
$var wire 1 &! s [0] $end
$var wire 1 ^/ out $end
$upscope $end
$scope module up_sel10 $end
$var wire 1 u. in0 $end
$var wire 1 u. in1 $end
$var wire 1 u. in2 $end
$var wire 1 r/ in3 $end
$var wire 1 %! s [1] $end
$var wire 1 &! s [0] $end
$var wire 1 ]/ out $end
$upscope $end
$scope module up_sel11 $end
$var wire 1 t. in0 $end
$var wire 1 t. in1 $end
$var wire 1 t. in2 $end
$var wire 1 s/ in3 $end
$var wire 1 %! s [1] $end
$var wire 1 &! s [0] $end
$var wire 1 \/ out $end
$upscope $end
$scope module up_sel12 $end
$var wire 1 s. in0 $end
$var wire 1 s. in1 $end
$var wire 1 s. in2 $end
$var wire 1 t/ in3 $end
$var wire 1 %! s [1] $end
$var wire 1 &! s [0] $end
$var wire 1 [/ out $end
$upscope $end
$scope module up_sel13 $end
$var wire 1 r. in0 $end
$var wire 1 r. in1 $end
$var wire 1 r. in2 $end
$var wire 1 u/ in3 $end
$var wire 1 %! s [1] $end
$var wire 1 &! s [0] $end
$var wire 1 Z/ out $end
$upscope $end
$scope module up_sel14 $end
$var wire 1 q. in0 $end
$var wire 1 q. in1 $end
$var wire 1 q. in2 $end
$var wire 1 v/ in3 $end
$var wire 1 %! s [1] $end
$var wire 1 &! s [0] $end
$var wire 1 Y/ out $end
$upscope $end
$scope module up_sel15 $end
$var wire 1 p. in0 $end
$var wire 1 p. in1 $end
$var wire 1 p. in2 $end
$var wire 1 w/ in3 $end
$var wire 1 %! s [1] $end
$var wire 1 &! s [0] $end
$var wire 1 X/ out $end
$upscope $end
$scope module low_sel[15] $end
$var wire 1 h. in0 $end
$var wire 1 X/ in1 $end
$var wire 1 S! s $end
$var wire 1 '. out $end
$upscope $end
$scope module low_sel[14] $end
$var wire 1 i. in0 $end
$var wire 1 Y/ in1 $end
$var wire 1 S! s $end
$var wire 1 (. out $end
$upscope $end
$scope module low_sel[13] $end
$var wire 1 j. in0 $end
$var wire 1 Z/ in1 $end
$var wire 1 S! s $end
$var wire 1 ). out $end
$upscope $end
$scope module low_sel[12] $end
$var wire 1 k. in0 $end
$var wire 1 [/ in1 $end
$var wire 1 S! s $end
$var wire 1 *. out $end
$upscope $end
$scope module low_sel[11] $end
$var wire 1 l. in0 $end
$var wire 1 \/ in1 $end
$var wire 1 S! s $end
$var wire 1 +. out $end
$upscope $end
$scope module low_sel[10] $end
$var wire 1 m. in0 $end
$var wire 1 ]/ in1 $end
$var wire 1 S! s $end
$var wire 1 ,. out $end
$upscope $end
$scope module low_sel[9] $end
$var wire 1 n. in0 $end
$var wire 1 ^/ in1 $end
$var wire 1 S! s $end
$var wire 1 -. out $end
$upscope $end
$scope module low_sel[8] $end
$var wire 1 o. in0 $end
$var wire 1 _/ in1 $end
$var wire 1 S! s $end
$var wire 1 .. out $end
$upscope $end
$scope module low_sel[7] $end
$var wire 1 p. in0 $end
$var wire 1 `/ in1 $end
$var wire 1 S! s $end
$var wire 1 /. out $end
$upscope $end
$scope module low_sel[6] $end
$var wire 1 q. in0 $end
$var wire 1 a/ in1 $end
$var wire 1 S! s $end
$var wire 1 0. out $end
$upscope $end
$scope module low_sel[5] $end
$var wire 1 r. in0 $end
$var wire 1 b/ in1 $end
$var wire 1 S! s $end
$var wire 1 1. out $end
$upscope $end
$scope module low_sel[4] $end
$var wire 1 s. in0 $end
$var wire 1 c/ in1 $end
$var wire 1 S! s $end
$var wire 1 2. out $end
$upscope $end
$scope module low_sel[3] $end
$var wire 1 t. in0 $end
$var wire 1 d/ in1 $end
$var wire 1 S! s $end
$var wire 1 3. out $end
$upscope $end
$scope module low_sel[2] $end
$var wire 1 u. in0 $end
$var wire 1 e/ in1 $end
$var wire 1 S! s $end
$var wire 1 4. out $end
$upscope $end
$scope module low_sel[1] $end
$var wire 1 v. in0 $end
$var wire 1 f/ in1 $end
$var wire 1 S! s $end
$var wire 1 5. out $end
$upscope $end
$scope module low_sel[0] $end
$var wire 1 w. in0 $end
$var wire 1 g/ in1 $end
$var wire 1 S! s $end
$var wire 1 6. out $end
>>>>>>> 2e640e2555e217a06b6c352cc5c5f6091e568d2d
$upscope $end
$upscope $end
$upscope $end
$scope module CLA $end
<<<<<<< HEAD
$var wire 1 5- A [15] $end
$var wire 1 6- A [14] $end
$var wire 1 7- A [13] $end
$var wire 1 8- A [12] $end
$var wire 1 9- A [11] $end
$var wire 1 :- A [10] $end
$var wire 1 ;- A [9] $end
$var wire 1 <- A [8] $end
$var wire 1 =- A [7] $end
$var wire 1 >- A [6] $end
$var wire 1 ?- A [5] $end
$var wire 1 @- A [4] $end
$var wire 1 A- A [3] $end
$var wire 1 B- A [2] $end
$var wire 1 C- A [1] $end
$var wire 1 D- A [0] $end
$var wire 1 E- B [15] $end
$var wire 1 F- B [14] $end
$var wire 1 G- B [13] $end
$var wire 1 H- B [12] $end
$var wire 1 I- B [11] $end
$var wire 1 J- B [10] $end
$var wire 1 K- B [9] $end
$var wire 1 L- B [8] $end
$var wire 1 M- B [7] $end
$var wire 1 N- B [6] $end
$var wire 1 O- B [5] $end
$var wire 1 P- B [4] $end
$var wire 1 Q- B [3] $end
$var wire 1 R- B [2] $end
$var wire 1 S- B [1] $end
$var wire 1 T- B [0] $end
$var wire 1 U- Ci $end
$var wire 1 R+ S [15] $end
$var wire 1 S+ S [14] $end
$var wire 1 T+ S [13] $end
$var wire 1 U+ S [12] $end
$var wire 1 V+ S [11] $end
$var wire 1 W+ S [10] $end
$var wire 1 X+ S [9] $end
$var wire 1 Y+ S [8] $end
$var wire 1 Z+ S [7] $end
$var wire 1 [+ S [6] $end
$var wire 1 \+ S [5] $end
$var wire 1 ]+ S [4] $end
$var wire 1 ^+ S [3] $end
$var wire 1 _+ S [2] $end
$var wire 1 `+ S [1] $end
$var wire 1 a+ S [0] $end
$var wire 1 b+ Co $end
$var wire 1 V- prop [3] $end
$var wire 1 W- prop [2] $end
$var wire 1 X- prop [1] $end
$var wire 1 Y- prop [0] $end
$var wire 1 Z- gen [3] $end
$var wire 1 [- gen [2] $end
$var wire 1 \- gen [1] $end
$var wire 1 ]- gen [0] $end
$var wire 1 ^- C1 $end
$var wire 1 _- C2 $end
$var wire 1 `- C3 $end
$var wire 1 a- C4 $end
$scope module mod0 $end
$var wire 1 A- A [3] $end
$var wire 1 B- A [2] $end
$var wire 1 C- A [1] $end
$var wire 1 D- A [0] $end
$var wire 1 Q- B [3] $end
$var wire 1 R- B [2] $end
$var wire 1 S- B [1] $end
$var wire 1 T- B [0] $end
$var wire 1 U- Ci $end
$var wire 1 ^+ S [3] $end
$var wire 1 _+ S [2] $end
$var wire 1 `+ S [1] $end
$var wire 1 a+ S [0] $end
$var wire 1 Y- P $end
$var wire 1 ]- G $end
$var wire 1 b- prop [3] $end
$var wire 1 c- prop [2] $end
$var wire 1 d- prop [1] $end
$var wire 1 e- prop [0] $end
$var wire 1 f- gen [3] $end
$var wire 1 g- gen [2] $end
$var wire 1 h- gen [1] $end
$var wire 1 i- gen [0] $end
$var wire 1 j- C1 $end
$var wire 1 k- C2 $end
$var wire 1 l- C3 $end
$scope module FA_mod0 $end
$var wire 1 D- A $end
$var wire 1 T- B $end
$var wire 1 U- Ci $end
$var wire 1 e- P $end
$var wire 1 i- G $end
$var wire 1 a+ S $end
$upscope $end
$scope module FA_mod1 $end
$var wire 1 C- A $end
$var wire 1 S- B $end
$var wire 1 j- Ci $end
$var wire 1 d- P $end
$var wire 1 h- G $end
$var wire 1 `+ S $end
$upscope $end
$scope module FA_mod2 $end
$var wire 1 B- A $end
$var wire 1 R- B $end
$var wire 1 k- Ci $end
$var wire 1 c- P $end
$var wire 1 g- G $end
$var wire 1 _+ S $end
$upscope $end
$scope module FA_mod3 $end
$var wire 1 A- A $end
$var wire 1 Q- B $end
$var wire 1 l- Ci $end
$var wire 1 b- P $end
$var wire 1 f- G $end
$var wire 1 ^+ S $end
$upscope $end
$upscope $end
$scope module mod1 $end
$var wire 1 =- A [3] $end
$var wire 1 >- A [2] $end
$var wire 1 ?- A [1] $end
$var wire 1 @- A [0] $end
$var wire 1 M- B [3] $end
$var wire 1 N- B [2] $end
$var wire 1 O- B [1] $end
$var wire 1 P- B [0] $end
$var wire 1 ^- Ci $end
$var wire 1 Z+ S [3] $end
$var wire 1 [+ S [2] $end
$var wire 1 \+ S [1] $end
$var wire 1 ]+ S [0] $end
$var wire 1 X- P $end
$var wire 1 \- G $end
$var wire 1 m- prop [3] $end
$var wire 1 n- prop [2] $end
$var wire 1 o- prop [1] $end
$var wire 1 p- prop [0] $end
$var wire 1 q- gen [3] $end
$var wire 1 r- gen [2] $end
$var wire 1 s- gen [1] $end
$var wire 1 t- gen [0] $end
$var wire 1 u- C1 $end
$var wire 1 v- C2 $end
$var wire 1 w- C3 $end
$scope module FA_mod0 $end
$var wire 1 @- A $end
$var wire 1 P- B $end
$var wire 1 ^- Ci $end
$var wire 1 p- P $end
$var wire 1 t- G $end
$var wire 1 ]+ S $end
$upscope $end
$scope module FA_mod1 $end
$var wire 1 ?- A $end
$var wire 1 O- B $end
$var wire 1 u- Ci $end
$var wire 1 o- P $end
$var wire 1 s- G $end
$var wire 1 \+ S $end
$upscope $end
$scope module FA_mod2 $end
$var wire 1 >- A $end
$var wire 1 N- B $end
$var wire 1 v- Ci $end
$var wire 1 n- P $end
$var wire 1 r- G $end
$var wire 1 [+ S $end
$upscope $end
$scope module FA_mod3 $end
$var wire 1 =- A $end
$var wire 1 M- B $end
$var wire 1 w- Ci $end
$var wire 1 m- P $end
$var wire 1 q- G $end
$var wire 1 Z+ S $end
$upscope $end
$upscope $end
$scope module mod2 $end
$var wire 1 9- A [3] $end
$var wire 1 :- A [2] $end
$var wire 1 ;- A [1] $end
$var wire 1 <- A [0] $end
$var wire 1 I- B [3] $end
$var wire 1 J- B [2] $end
$var wire 1 K- B [1] $end
$var wire 1 L- B [0] $end
$var wire 1 _- Ci $end
$var wire 1 V+ S [3] $end
$var wire 1 W+ S [2] $end
$var wire 1 X+ S [1] $end
$var wire 1 Y+ S [0] $end
$var wire 1 W- P $end
$var wire 1 [- G $end
$var wire 1 x- prop [3] $end
$var wire 1 y- prop [2] $end
$var wire 1 z- prop [1] $end
$var wire 1 {- prop [0] $end
$var wire 1 |- gen [3] $end
$var wire 1 }- gen [2] $end
$var wire 1 ~- gen [1] $end
$var wire 1 !. gen [0] $end
$var wire 1 ". C1 $end
$var wire 1 #. C2 $end
$var wire 1 $. C3 $end
$scope module FA_mod0 $end
$var wire 1 <- A $end
$var wire 1 L- B $end
$var wire 1 _- Ci $end
$var wire 1 {- P $end
$var wire 1 !. G $end
$var wire 1 Y+ S $end
$upscope $end
$scope module FA_mod1 $end
$var wire 1 ;- A $end
$var wire 1 K- B $end
$var wire 1 ". Ci $end
$var wire 1 z- P $end
$var wire 1 ~- G $end
$var wire 1 X+ S $end
$upscope $end
$scope module FA_mod2 $end
$var wire 1 :- A $end
$var wire 1 J- B $end
$var wire 1 #. Ci $end
$var wire 1 y- P $end
$var wire 1 }- G $end
$var wire 1 W+ S $end
$upscope $end
$scope module FA_mod3 $end
$var wire 1 9- A $end
$var wire 1 I- B $end
$var wire 1 $. Ci $end
$var wire 1 x- P $end
$var wire 1 |- G $end
$var wire 1 V+ S $end
$upscope $end
$upscope $end
$scope module mod3 $end
$var wire 1 5- A [3] $end
$var wire 1 6- A [2] $end
$var wire 1 7- A [1] $end
$var wire 1 8- A [0] $end
$var wire 1 E- B [3] $end
$var wire 1 F- B [2] $end
$var wire 1 G- B [1] $end
$var wire 1 H- B [0] $end
$var wire 1 `- Ci $end
$var wire 1 R+ S [3] $end
$var wire 1 S+ S [2] $end
$var wire 1 T+ S [1] $end
$var wire 1 U+ S [0] $end
$var wire 1 V- P $end
$var wire 1 Z- G $end
$var wire 1 %. prop [3] $end
$var wire 1 &. prop [2] $end
$var wire 1 '. prop [1] $end
$var wire 1 (. prop [0] $end
$var wire 1 ). gen [3] $end
$var wire 1 *. gen [2] $end
$var wire 1 +. gen [1] $end
$var wire 1 ,. gen [0] $end
$var wire 1 -. C1 $end
$var wire 1 .. C2 $end
$var wire 1 /. C3 $end
$scope module FA_mod0 $end
$var wire 1 8- A $end
$var wire 1 H- B $end
$var wire 1 `- Ci $end
$var wire 1 (. P $end
$var wire 1 ,. G $end
$var wire 1 U+ S $end
$upscope $end
$scope module FA_mod1 $end
$var wire 1 7- A $end
$var wire 1 G- B $end
$var wire 1 -. Ci $end
$var wire 1 '. P $end
$var wire 1 +. G $end
$var wire 1 T+ S $end
$upscope $end
$scope module FA_mod2 $end
$var wire 1 6- A $end
$var wire 1 F- B $end
$var wire 1 .. Ci $end
$var wire 1 &. P $end
$var wire 1 *. G $end
$var wire 1 S+ S $end
$upscope $end
$scope module FA_mod3 $end
$var wire 1 5- A $end
$var wire 1 E- B $end
$var wire 1 /. Ci $end
$var wire 1 %. P $end
$var wire 1 ). G $end
$var wire 1 R+ S $end
=======
$var wire 1 x/ A [15] $end
$var wire 1 y/ A [14] $end
$var wire 1 z/ A [13] $end
$var wire 1 {/ A [12] $end
$var wire 1 |/ A [11] $end
$var wire 1 }/ A [10] $end
$var wire 1 ~/ A [9] $end
$var wire 1 !0 A [8] $end
$var wire 1 "0 A [7] $end
$var wire 1 #0 A [6] $end
$var wire 1 $0 A [5] $end
$var wire 1 %0 A [4] $end
$var wire 1 &0 A [3] $end
$var wire 1 '0 A [2] $end
$var wire 1 (0 A [1] $end
$var wire 1 )0 A [0] $end
$var wire 1 *0 B [15] $end
$var wire 1 +0 B [14] $end
$var wire 1 ,0 B [13] $end
$var wire 1 -0 B [12] $end
$var wire 1 .0 B [11] $end
$var wire 1 /0 B [10] $end
$var wire 1 00 B [9] $end
$var wire 1 10 B [8] $end
$var wire 1 20 B [7] $end
$var wire 1 30 B [6] $end
$var wire 1 40 B [5] $end
$var wire 1 50 B [4] $end
$var wire 1 60 B [3] $end
$var wire 1 70 B [2] $end
$var wire 1 80 B [1] $end
$var wire 1 90 B [0] $end
$var wire 1 :0 Cin $end
$var wire 1 7. S [15] $end
$var wire 1 8. S [14] $end
$var wire 1 9. S [13] $end
$var wire 1 :. S [12] $end
$var wire 1 ;. S [11] $end
$var wire 1 <. S [10] $end
$var wire 1 =. S [9] $end
$var wire 1 >. S [8] $end
$var wire 1 ?. S [7] $end
$var wire 1 @. S [6] $end
$var wire 1 A. S [5] $end
$var wire 1 B. S [4] $end
$var wire 1 C. S [3] $end
$var wire 1 D. S [2] $end
$var wire 1 E. S [1] $end
$var wire 1 F. S [0] $end
$var wire 1 G. Cout $end
$var wire 1 ;0 g0 $end
$var wire 1 <0 g1 $end
$var wire 1 =0 g2 $end
$var wire 1 >0 g3 $end
$var wire 1 ?0 p0 $end
$var wire 1 @0 p1 $end
$var wire 1 A0 p2 $end
$var wire 1 B0 p3 $end
$var wire 1 C0 c1 $end
$var wire 1 D0 c2 $end
$var wire 1 E0 c3 $end
$scope module claMod1 $end
$var wire 1 &0 A [3] $end
$var wire 1 '0 A [2] $end
$var wire 1 (0 A [1] $end
$var wire 1 )0 A [0] $end
$var wire 1 60 B [3] $end
$var wire 1 70 B [2] $end
$var wire 1 80 B [1] $end
$var wire 1 90 B [0] $end
$var wire 1 :0 Cin $end
$var wire 1 C. S [3] $end
$var wire 1 D. S [2] $end
$var wire 1 E. S [1] $end
$var wire 1 F. S [0] $end
$var wire 1 ;0 G $end
$var wire 1 ?0 P $end
$var wire 1 F0 g0 $end
$var wire 1 G0 g1 $end
$var wire 1 H0 g2 $end
$var wire 1 I0 g3 $end
$var wire 1 J0 p1 $end
$var wire 1 K0 p2 $end
$var wire 1 L0 p3 $end
$var wire 1 M0 c2 $end
$var wire 1 N0 c3 $end
$var wire 1 O0 p0 $end
$var wire 1 P0 c1 $end
$scope module fa1 $end
$var wire 1 )0 A $end
$var wire 1 90 B $end
$var wire 1 :0 Cin $end
$var wire 1 F. S $end
$var wire 1 Q0 Cout $end
$var wire 1 R0 abSum $end
$var wire 1 S0 abSumAndCin $end
$var wire 1 T0 abSumAndCinInv $end
$var wire 1 U0 abCarry $end
$var wire 1 V0 abCarryIn $end
$var wire 1 W0 carryAnd $end
$var wire 1 X0 abCarryInv $end
$scope module xorMod1 $end
$var wire 1 )0 in1 $end
$var wire 1 90 in2 $end
$var wire 1 R0 out $end
$upscope $end
$scope module xorMod2 $end
$var wire 1 R0 in1 $end
$var wire 1 :0 in2 $end
$var wire 1 F. out $end
$upscope $end
$scope module nandMod1 $end
$var wire 1 R0 in1 $end
$var wire 1 :0 in2 $end
$var wire 1 S0 out $end
$upscope $end
$scope module notMod1 $end
$var wire 1 S0 in1 $end
$var wire 1 T0 out $end
$upscope $end
$scope module nandMod2 $end
$var wire 1 )0 in1 $end
$var wire 1 90 in2 $end
$var wire 1 U0 out $end
$upscope $end
$scope module notMod2 $end
$var wire 1 U0 in1 $end
$var wire 1 X0 out $end
$upscope $end
$scope module norMod1 $end
$var wire 1 T0 in1 $end
$var wire 1 X0 in2 $end
$var wire 1 W0 out $end
$upscope $end
$scope module notMod3 $end
$var wire 1 W0 in1 $end
$var wire 1 Q0 out $end
$upscope $end
$upscope $end
$scope module fa2 $end
$var wire 1 (0 A $end
$var wire 1 80 B $end
$var wire 1 P0 Cin $end
$var wire 1 E. S $end
$var wire 1 Y0 Cout $end
$var wire 1 Z0 abSum $end
$var wire 1 [0 abSumAndCin $end
$var wire 1 \0 abSumAndCinInv $end
$var wire 1 ]0 abCarry $end
$var wire 1 ^0 abCarryIn $end
$var wire 1 _0 carryAnd $end
$var wire 1 `0 abCarryInv $end
$scope module xorMod1 $end
$var wire 1 (0 in1 $end
$var wire 1 80 in2 $end
$var wire 1 Z0 out $end
$upscope $end
$scope module xorMod2 $end
$var wire 1 Z0 in1 $end
$var wire 1 P0 in2 $end
$var wire 1 E. out $end
$upscope $end
$scope module nandMod1 $end
$var wire 1 Z0 in1 $end
$var wire 1 P0 in2 $end
$var wire 1 [0 out $end
$upscope $end
$scope module notMod1 $end
$var wire 1 [0 in1 $end
$var wire 1 \0 out $end
$upscope $end
$scope module nandMod2 $end
$var wire 1 (0 in1 $end
$var wire 1 80 in2 $end
$var wire 1 ]0 out $end
$upscope $end
$scope module notMod2 $end
$var wire 1 ]0 in1 $end
$var wire 1 `0 out $end
$upscope $end
$scope module norMod1 $end
$var wire 1 \0 in1 $end
$var wire 1 `0 in2 $end
$var wire 1 _0 out $end
$upscope $end
$scope module notMod3 $end
$var wire 1 _0 in1 $end
$var wire 1 Y0 out $end
$upscope $end
$upscope $end
$scope module fa3 $end
$var wire 1 '0 A $end
$var wire 1 70 B $end
$var wire 1 M0 Cin $end
$var wire 1 D. S $end
$var wire 1 a0 Cout $end
$var wire 1 b0 abSum $end
$var wire 1 c0 abSumAndCin $end
$var wire 1 d0 abSumAndCinInv $end
$var wire 1 e0 abCarry $end
$var wire 1 f0 abCarryIn $end
$var wire 1 g0 carryAnd $end
$var wire 1 h0 abCarryInv $end
$scope module xorMod1 $end
$var wire 1 '0 in1 $end
$var wire 1 70 in2 $end
$var wire 1 b0 out $end
$upscope $end
$scope module xorMod2 $end
$var wire 1 b0 in1 $end
$var wire 1 M0 in2 $end
$var wire 1 D. out $end
$upscope $end
$scope module nandMod1 $end
$var wire 1 b0 in1 $end
$var wire 1 M0 in2 $end
$var wire 1 c0 out $end
$upscope $end
$scope module notMod1 $end
$var wire 1 c0 in1 $end
$var wire 1 d0 out $end
$upscope $end
$scope module nandMod2 $end
$var wire 1 '0 in1 $end
$var wire 1 70 in2 $end
$var wire 1 e0 out $end
$upscope $end
$scope module notMod2 $end
$var wire 1 e0 in1 $end
$var wire 1 h0 out $end
$upscope $end
$scope module norMod1 $end
$var wire 1 d0 in1 $end
$var wire 1 h0 in2 $end
$var wire 1 g0 out $end
$upscope $end
$scope module notMod3 $end
$var wire 1 g0 in1 $end
$var wire 1 a0 out $end
$upscope $end
$upscope $end
$scope module fa4 $end
$var wire 1 &0 A $end
$var wire 1 60 B $end
$var wire 1 N0 Cin $end
$var wire 1 C. S $end
$var wire 1 i0 Cout $end
$var wire 1 j0 abSum $end
$var wire 1 k0 abSumAndCin $end
$var wire 1 l0 abSumAndCinInv $end
$var wire 1 m0 abCarry $end
$var wire 1 n0 abCarryIn $end
$var wire 1 o0 carryAnd $end
$var wire 1 p0 abCarryInv $end
$scope module xorMod1 $end
$var wire 1 &0 in1 $end
$var wire 1 60 in2 $end
$var wire 1 j0 out $end
$upscope $end
$scope module xorMod2 $end
$var wire 1 j0 in1 $end
$var wire 1 N0 in2 $end
$var wire 1 C. out $end
$upscope $end
$scope module nandMod1 $end
$var wire 1 j0 in1 $end
$var wire 1 N0 in2 $end
$var wire 1 k0 out $end
$upscope $end
$scope module notMod1 $end
$var wire 1 k0 in1 $end
$var wire 1 l0 out $end
$upscope $end
$scope module nandMod2 $end
$var wire 1 &0 in1 $end
$var wire 1 60 in2 $end
$var wire 1 m0 out $end
$upscope $end
$scope module notMod2 $end
$var wire 1 m0 in1 $end
$var wire 1 p0 out $end
$upscope $end
$scope module norMod1 $end
$var wire 1 l0 in1 $end
$var wire 1 p0 in2 $end
$var wire 1 o0 out $end
$upscope $end
$scope module notMod3 $end
$var wire 1 o0 in1 $end
$var wire 1 i0 out $end
$upscope $end
$upscope $end
$upscope $end
$scope module claMod2 $end
$var wire 1 "0 A [3] $end
$var wire 1 #0 A [2] $end
$var wire 1 $0 A [1] $end
$var wire 1 %0 A [0] $end
$var wire 1 20 B [3] $end
$var wire 1 30 B [2] $end
$var wire 1 40 B [1] $end
$var wire 1 50 B [0] $end
$var wire 1 C0 Cin $end
$var wire 1 ?. S [3] $end
$var wire 1 @. S [2] $end
$var wire 1 A. S [1] $end
$var wire 1 B. S [0] $end
$var wire 1 <0 G $end
$var wire 1 @0 P $end
$var wire 1 q0 g0 $end
$var wire 1 r0 g1 $end
$var wire 1 s0 g2 $end
$var wire 1 t0 g3 $end
$var wire 1 u0 p1 $end
$var wire 1 v0 p2 $end
$var wire 1 w0 p3 $end
$var wire 1 x0 c2 $end
$var wire 1 y0 c3 $end
$var wire 1 z0 p0 $end
$var wire 1 {0 c1 $end
$scope module fa1 $end
$var wire 1 %0 A $end
$var wire 1 50 B $end
$var wire 1 C0 Cin $end
$var wire 1 B. S $end
$var wire 1 |0 Cout $end
$var wire 1 }0 abSum $end
$var wire 1 ~0 abSumAndCin $end
$var wire 1 !1 abSumAndCinInv $end
$var wire 1 "1 abCarry $end
$var wire 1 #1 abCarryIn $end
$var wire 1 $1 carryAnd $end
$var wire 1 %1 abCarryInv $end
$scope module xorMod1 $end
$var wire 1 %0 in1 $end
$var wire 1 50 in2 $end
$var wire 1 }0 out $end
$upscope $end
$scope module xorMod2 $end
$var wire 1 }0 in1 $end
$var wire 1 C0 in2 $end
$var wire 1 B. out $end
$upscope $end
$scope module nandMod1 $end
$var wire 1 }0 in1 $end
$var wire 1 C0 in2 $end
$var wire 1 ~0 out $end
$upscope $end
$scope module notMod1 $end
$var wire 1 ~0 in1 $end
$var wire 1 !1 out $end
$upscope $end
$scope module nandMod2 $end
$var wire 1 %0 in1 $end
$var wire 1 50 in2 $end
$var wire 1 "1 out $end
$upscope $end
$scope module notMod2 $end
$var wire 1 "1 in1 $end
$var wire 1 %1 out $end
$upscope $end
$scope module norMod1 $end
$var wire 1 !1 in1 $end
$var wire 1 %1 in2 $end
$var wire 1 $1 out $end
$upscope $end
$scope module notMod3 $end
$var wire 1 $1 in1 $end
$var wire 1 |0 out $end
$upscope $end
$upscope $end
$scope module fa2 $end
$var wire 1 $0 A $end
$var wire 1 40 B $end
$var wire 1 {0 Cin $end
$var wire 1 A. S $end
$var wire 1 &1 Cout $end
$var wire 1 '1 abSum $end
$var wire 1 (1 abSumAndCin $end
$var wire 1 )1 abSumAndCinInv $end
$var wire 1 *1 abCarry $end
$var wire 1 +1 abCarryIn $end
$var wire 1 ,1 carryAnd $end
$var wire 1 -1 abCarryInv $end
$scope module xorMod1 $end
$var wire 1 $0 in1 $end
$var wire 1 40 in2 $end
$var wire 1 '1 out $end
$upscope $end
$scope module xorMod2 $end
$var wire 1 '1 in1 $end
$var wire 1 {0 in2 $end
$var wire 1 A. out $end
$upscope $end
$scope module nandMod1 $end
$var wire 1 '1 in1 $end
$var wire 1 {0 in2 $end
$var wire 1 (1 out $end
$upscope $end
$scope module notMod1 $end
$var wire 1 (1 in1 $end
$var wire 1 )1 out $end
$upscope $end
$scope module nandMod2 $end
$var wire 1 $0 in1 $end
$var wire 1 40 in2 $end
$var wire 1 *1 out $end
$upscope $end
$scope module notMod2 $end
$var wire 1 *1 in1 $end
$var wire 1 -1 out $end
$upscope $end
$scope module norMod1 $end
$var wire 1 )1 in1 $end
$var wire 1 -1 in2 $end
$var wire 1 ,1 out $end
$upscope $end
$scope module notMod3 $end
$var wire 1 ,1 in1 $end
$var wire 1 &1 out $end
$upscope $end
$upscope $end
$scope module fa3 $end
$var wire 1 #0 A $end
$var wire 1 30 B $end
$var wire 1 x0 Cin $end
$var wire 1 @. S $end
$var wire 1 .1 Cout $end
$var wire 1 /1 abSum $end
$var wire 1 01 abSumAndCin $end
$var wire 1 11 abSumAndCinInv $end
$var wire 1 21 abCarry $end
$var wire 1 31 abCarryIn $end
$var wire 1 41 carryAnd $end
$var wire 1 51 abCarryInv $end
$scope module xorMod1 $end
$var wire 1 #0 in1 $end
$var wire 1 30 in2 $end
$var wire 1 /1 out $end
$upscope $end
$scope module xorMod2 $end
$var wire 1 /1 in1 $end
$var wire 1 x0 in2 $end
$var wire 1 @. out $end
$upscope $end
$scope module nandMod1 $end
$var wire 1 /1 in1 $end
$var wire 1 x0 in2 $end
$var wire 1 01 out $end
$upscope $end
$scope module notMod1 $end
$var wire 1 01 in1 $end
$var wire 1 11 out $end
$upscope $end
$scope module nandMod2 $end
$var wire 1 #0 in1 $end
$var wire 1 30 in2 $end
$var wire 1 21 out $end
$upscope $end
$scope module notMod2 $end
$var wire 1 21 in1 $end
$var wire 1 51 out $end
$upscope $end
$scope module norMod1 $end
$var wire 1 11 in1 $end
$var wire 1 51 in2 $end
$var wire 1 41 out $end
$upscope $end
$scope module notMod3 $end
$var wire 1 41 in1 $end
$var wire 1 .1 out $end
$upscope $end
$upscope $end
$scope module fa4 $end
$var wire 1 "0 A $end
$var wire 1 20 B $end
$var wire 1 y0 Cin $end
$var wire 1 ?. S $end
$var wire 1 61 Cout $end
$var wire 1 71 abSum $end
$var wire 1 81 abSumAndCin $end
$var wire 1 91 abSumAndCinInv $end
$var wire 1 :1 abCarry $end
$var wire 1 ;1 abCarryIn $end
$var wire 1 <1 carryAnd $end
$var wire 1 =1 abCarryInv $end
$scope module xorMod1 $end
$var wire 1 "0 in1 $end
$var wire 1 20 in2 $end
$var wire 1 71 out $end
$upscope $end
$scope module xorMod2 $end
$var wire 1 71 in1 $end
$var wire 1 y0 in2 $end
$var wire 1 ?. out $end
$upscope $end
$scope module nandMod1 $end
$var wire 1 71 in1 $end
$var wire 1 y0 in2 $end
$var wire 1 81 out $end
$upscope $end
$scope module notMod1 $end
$var wire 1 81 in1 $end
$var wire 1 91 out $end
$upscope $end
$scope module nandMod2 $end
$var wire 1 "0 in1 $end
$var wire 1 20 in2 $end
$var wire 1 :1 out $end
$upscope $end
$scope module notMod2 $end
$var wire 1 :1 in1 $end
$var wire 1 =1 out $end
$upscope $end
$scope module norMod1 $end
$var wire 1 91 in1 $end
$var wire 1 =1 in2 $end
$var wire 1 <1 out $end
$upscope $end
$scope module notMod3 $end
$var wire 1 <1 in1 $end
$var wire 1 61 out $end
$upscope $end
$upscope $end
$upscope $end
$scope module claMod3 $end
$var wire 1 |/ A [3] $end
$var wire 1 }/ A [2] $end
$var wire 1 ~/ A [1] $end
$var wire 1 !0 A [0] $end
$var wire 1 .0 B [3] $end
$var wire 1 /0 B [2] $end
$var wire 1 00 B [1] $end
$var wire 1 10 B [0] $end
$var wire 1 D0 Cin $end
$var wire 1 ;. S [3] $end
$var wire 1 <. S [2] $end
$var wire 1 =. S [1] $end
$var wire 1 >. S [0] $end
$var wire 1 =0 G $end
$var wire 1 A0 P $end
$var wire 1 >1 g0 $end
$var wire 1 ?1 g1 $end
$var wire 1 @1 g2 $end
$var wire 1 A1 g3 $end
$var wire 1 B1 p1 $end
$var wire 1 C1 p2 $end
$var wire 1 D1 p3 $end
$var wire 1 E1 c2 $end
$var wire 1 F1 c3 $end
$var wire 1 G1 p0 $end
$var wire 1 H1 c1 $end
$scope module fa1 $end
$var wire 1 !0 A $end
$var wire 1 10 B $end
$var wire 1 D0 Cin $end
$var wire 1 >. S $end
$var wire 1 I1 Cout $end
$var wire 1 J1 abSum $end
$var wire 1 K1 abSumAndCin $end
$var wire 1 L1 abSumAndCinInv $end
$var wire 1 M1 abCarry $end
$var wire 1 N1 abCarryIn $end
$var wire 1 O1 carryAnd $end
$var wire 1 P1 abCarryInv $end
$scope module xorMod1 $end
$var wire 1 !0 in1 $end
$var wire 1 10 in2 $end
$var wire 1 J1 out $end
$upscope $end
$scope module xorMod2 $end
$var wire 1 J1 in1 $end
$var wire 1 D0 in2 $end
$var wire 1 >. out $end
$upscope $end
$scope module nandMod1 $end
$var wire 1 J1 in1 $end
$var wire 1 D0 in2 $end
$var wire 1 K1 out $end
$upscope $end
$scope module notMod1 $end
$var wire 1 K1 in1 $end
$var wire 1 L1 out $end
$upscope $end
$scope module nandMod2 $end
$var wire 1 !0 in1 $end
$var wire 1 10 in2 $end
$var wire 1 M1 out $end
$upscope $end
$scope module notMod2 $end
$var wire 1 M1 in1 $end
$var wire 1 P1 out $end
$upscope $end
$scope module norMod1 $end
$var wire 1 L1 in1 $end
$var wire 1 P1 in2 $end
$var wire 1 O1 out $end
$upscope $end
$scope module notMod3 $end
$var wire 1 O1 in1 $end
$var wire 1 I1 out $end
$upscope $end
$upscope $end
$scope module fa2 $end
$var wire 1 ~/ A $end
$var wire 1 00 B $end
$var wire 1 H1 Cin $end
$var wire 1 =. S $end
$var wire 1 Q1 Cout $end
$var wire 1 R1 abSum $end
$var wire 1 S1 abSumAndCin $end
$var wire 1 T1 abSumAndCinInv $end
$var wire 1 U1 abCarry $end
$var wire 1 V1 abCarryIn $end
$var wire 1 W1 carryAnd $end
$var wire 1 X1 abCarryInv $end
$scope module xorMod1 $end
$var wire 1 ~/ in1 $end
$var wire 1 00 in2 $end
$var wire 1 R1 out $end
$upscope $end
$scope module xorMod2 $end
$var wire 1 R1 in1 $end
$var wire 1 H1 in2 $end
$var wire 1 =. out $end
$upscope $end
$scope module nandMod1 $end
$var wire 1 R1 in1 $end
$var wire 1 H1 in2 $end
$var wire 1 S1 out $end
$upscope $end
$scope module notMod1 $end
$var wire 1 S1 in1 $end
$var wire 1 T1 out $end
$upscope $end
$scope module nandMod2 $end
$var wire 1 ~/ in1 $end
$var wire 1 00 in2 $end
$var wire 1 U1 out $end
$upscope $end
$scope module notMod2 $end
$var wire 1 U1 in1 $end
$var wire 1 X1 out $end
$upscope $end
$scope module norMod1 $end
$var wire 1 T1 in1 $end
$var wire 1 X1 in2 $end
$var wire 1 W1 out $end
$upscope $end
$scope module notMod3 $end
$var wire 1 W1 in1 $end
$var wire 1 Q1 out $end
$upscope $end
$upscope $end
$scope module fa3 $end
$var wire 1 }/ A $end
$var wire 1 /0 B $end
$var wire 1 E1 Cin $end
$var wire 1 <. S $end
$var wire 1 Y1 Cout $end
$var wire 1 Z1 abSum $end
$var wire 1 [1 abSumAndCin $end
$var wire 1 \1 abSumAndCinInv $end
$var wire 1 ]1 abCarry $end
$var wire 1 ^1 abCarryIn $end
$var wire 1 _1 carryAnd $end
$var wire 1 `1 abCarryInv $end
$scope module xorMod1 $end
$var wire 1 }/ in1 $end
$var wire 1 /0 in2 $end
$var wire 1 Z1 out $end
$upscope $end
$scope module xorMod2 $end
$var wire 1 Z1 in1 $end
$var wire 1 E1 in2 $end
$var wire 1 <. out $end
$upscope $end
$scope module nandMod1 $end
$var wire 1 Z1 in1 $end
$var wire 1 E1 in2 $end
$var wire 1 [1 out $end
$upscope $end
$scope module notMod1 $end
$var wire 1 [1 in1 $end
$var wire 1 \1 out $end
$upscope $end
$scope module nandMod2 $end
$var wire 1 }/ in1 $end
$var wire 1 /0 in2 $end
$var wire 1 ]1 out $end
$upscope $end
$scope module notMod2 $end
$var wire 1 ]1 in1 $end
$var wire 1 `1 out $end
$upscope $end
$scope module norMod1 $end
$var wire 1 \1 in1 $end
$var wire 1 `1 in2 $end
$var wire 1 _1 out $end
$upscope $end
$scope module notMod3 $end
$var wire 1 _1 in1 $end
$var wire 1 Y1 out $end
$upscope $end
$upscope $end
$scope module fa4 $end
$var wire 1 |/ A $end
$var wire 1 .0 B $end
$var wire 1 F1 Cin $end
$var wire 1 ;. S $end
$var wire 1 a1 Cout $end
$var wire 1 b1 abSum $end
$var wire 1 c1 abSumAndCin $end
$var wire 1 d1 abSumAndCinInv $end
$var wire 1 e1 abCarry $end
$var wire 1 f1 abCarryIn $end
$var wire 1 g1 carryAnd $end
$var wire 1 h1 abCarryInv $end
$scope module xorMod1 $end
$var wire 1 |/ in1 $end
$var wire 1 .0 in2 $end
$var wire 1 b1 out $end
$upscope $end
$scope module xorMod2 $end
$var wire 1 b1 in1 $end
$var wire 1 F1 in2 $end
$var wire 1 ;. out $end
$upscope $end
$scope module nandMod1 $end
$var wire 1 b1 in1 $end
$var wire 1 F1 in2 $end
$var wire 1 c1 out $end
$upscope $end
$scope module notMod1 $end
$var wire 1 c1 in1 $end
$var wire 1 d1 out $end
$upscope $end
$scope module nandMod2 $end
$var wire 1 |/ in1 $end
$var wire 1 .0 in2 $end
$var wire 1 e1 out $end
$upscope $end
$scope module notMod2 $end
$var wire 1 e1 in1 $end
$var wire 1 h1 out $end
$upscope $end
$scope module norMod1 $end
$var wire 1 d1 in1 $end
$var wire 1 h1 in2 $end
$var wire 1 g1 out $end
$upscope $end
$scope module notMod3 $end
$var wire 1 g1 in1 $end
$var wire 1 a1 out $end
$upscope $end
$upscope $end
$upscope $end
$scope module claMod4 $end
$var wire 1 x/ A [3] $end
$var wire 1 y/ A [2] $end
$var wire 1 z/ A [1] $end
$var wire 1 {/ A [0] $end
$var wire 1 *0 B [3] $end
$var wire 1 +0 B [2] $end
$var wire 1 ,0 B [1] $end
$var wire 1 -0 B [0] $end
$var wire 1 E0 Cin $end
$var wire 1 7. S [3] $end
$var wire 1 8. S [2] $end
$var wire 1 9. S [1] $end
$var wire 1 :. S [0] $end
$var wire 1 >0 G $end
$var wire 1 B0 P $end
$var wire 1 i1 g0 $end
$var wire 1 j1 g1 $end
$var wire 1 k1 g2 $end
$var wire 1 l1 g3 $end
$var wire 1 m1 p1 $end
$var wire 1 n1 p2 $end
$var wire 1 o1 p3 $end
$var wire 1 p1 c2 $end
$var wire 1 q1 c3 $end
$var wire 1 r1 p0 $end
$var wire 1 s1 c1 $end
$scope module fa1 $end
$var wire 1 {/ A $end
$var wire 1 -0 B $end
$var wire 1 E0 Cin $end
$var wire 1 :. S $end
$var wire 1 t1 Cout $end
$var wire 1 u1 abSum $end
$var wire 1 v1 abSumAndCin $end
$var wire 1 w1 abSumAndCinInv $end
$var wire 1 x1 abCarry $end
$var wire 1 y1 abCarryIn $end
$var wire 1 z1 carryAnd $end
$var wire 1 {1 abCarryInv $end
$scope module xorMod1 $end
$var wire 1 {/ in1 $end
$var wire 1 -0 in2 $end
$var wire 1 u1 out $end
$upscope $end
$scope module xorMod2 $end
$var wire 1 u1 in1 $end
$var wire 1 E0 in2 $end
$var wire 1 :. out $end
$upscope $end
$scope module nandMod1 $end
$var wire 1 u1 in1 $end
$var wire 1 E0 in2 $end
$var wire 1 v1 out $end
$upscope $end
$scope module notMod1 $end
$var wire 1 v1 in1 $end
$var wire 1 w1 out $end
$upscope $end
$scope module nandMod2 $end
$var wire 1 {/ in1 $end
$var wire 1 -0 in2 $end
$var wire 1 x1 out $end
$upscope $end
$scope module notMod2 $end
$var wire 1 x1 in1 $end
$var wire 1 {1 out $end
$upscope $end
$scope module norMod1 $end
$var wire 1 w1 in1 $end
$var wire 1 {1 in2 $end
$var wire 1 z1 out $end
$upscope $end
$scope module notMod3 $end
$var wire 1 z1 in1 $end
$var wire 1 t1 out $end
$upscope $end
$upscope $end
$scope module fa2 $end
$var wire 1 z/ A $end
$var wire 1 ,0 B $end
$var wire 1 s1 Cin $end
$var wire 1 9. S $end
$var wire 1 |1 Cout $end
$var wire 1 }1 abSum $end
$var wire 1 ~1 abSumAndCin $end
$var wire 1 !2 abSumAndCinInv $end
$var wire 1 "2 abCarry $end
$var wire 1 #2 abCarryIn $end
$var wire 1 $2 carryAnd $end
$var wire 1 %2 abCarryInv $end
$scope module xorMod1 $end
$var wire 1 z/ in1 $end
$var wire 1 ,0 in2 $end
$var wire 1 }1 out $end
$upscope $end
$scope module xorMod2 $end
$var wire 1 }1 in1 $end
$var wire 1 s1 in2 $end
$var wire 1 9. out $end
$upscope $end
$scope module nandMod1 $end
$var wire 1 }1 in1 $end
$var wire 1 s1 in2 $end
$var wire 1 ~1 out $end
$upscope $end
$scope module notMod1 $end
$var wire 1 ~1 in1 $end
$var wire 1 !2 out $end
$upscope $end
$scope module nandMod2 $end
$var wire 1 z/ in1 $end
$var wire 1 ,0 in2 $end
$var wire 1 "2 out $end
$upscope $end
$scope module notMod2 $end
$var wire 1 "2 in1 $end
$var wire 1 %2 out $end
$upscope $end
$scope module norMod1 $end
$var wire 1 !2 in1 $end
$var wire 1 %2 in2 $end
$var wire 1 $2 out $end
$upscope $end
$scope module notMod3 $end
$var wire 1 $2 in1 $end
$var wire 1 |1 out $end
$upscope $end
$upscope $end
$scope module fa3 $end
$var wire 1 y/ A $end
$var wire 1 +0 B $end
$var wire 1 p1 Cin $end
$var wire 1 8. S $end
$var wire 1 &2 Cout $end
$var wire 1 '2 abSum $end
$var wire 1 (2 abSumAndCin $end
$var wire 1 )2 abSumAndCinInv $end
$var wire 1 *2 abCarry $end
$var wire 1 +2 abCarryIn $end
$var wire 1 ,2 carryAnd $end
$var wire 1 -2 abCarryInv $end
$scope module xorMod1 $end
$var wire 1 y/ in1 $end
$var wire 1 +0 in2 $end
$var wire 1 '2 out $end
$upscope $end
$scope module xorMod2 $end
$var wire 1 '2 in1 $end
$var wire 1 p1 in2 $end
$var wire 1 8. out $end
$upscope $end
$scope module nandMod1 $end
$var wire 1 '2 in1 $end
$var wire 1 p1 in2 $end
$var wire 1 (2 out $end
$upscope $end
$scope module notMod1 $end
$var wire 1 (2 in1 $end
$var wire 1 )2 out $end
$upscope $end
$scope module nandMod2 $end
$var wire 1 y/ in1 $end
$var wire 1 +0 in2 $end
$var wire 1 *2 out $end
$upscope $end
$scope module notMod2 $end
$var wire 1 *2 in1 $end
$var wire 1 -2 out $end
$upscope $end
$scope module norMod1 $end
$var wire 1 )2 in1 $end
$var wire 1 -2 in2 $end
$var wire 1 ,2 out $end
$upscope $end
$scope module notMod3 $end
$var wire 1 ,2 in1 $end
$var wire 1 &2 out $end
$upscope $end
$upscope $end
$scope module fa4 $end
$var wire 1 x/ A $end
$var wire 1 *0 B $end
$var wire 1 q1 Cin $end
$var wire 1 7. S $end
$var wire 1 .2 Cout $end
$var wire 1 /2 abSum $end
$var wire 1 02 abSumAndCin $end
$var wire 1 12 abSumAndCinInv $end
$var wire 1 22 abCarry $end
$var wire 1 32 abCarryIn $end
$var wire 1 42 carryAnd $end
$var wire 1 52 abCarryInv $end
$scope module xorMod1 $end
$var wire 1 x/ in1 $end
$var wire 1 *0 in2 $end
$var wire 1 /2 out $end
$upscope $end
$scope module xorMod2 $end
$var wire 1 /2 in1 $end
$var wire 1 q1 in2 $end
$var wire 1 7. out $end
$upscope $end
$scope module nandMod1 $end
$var wire 1 /2 in1 $end
$var wire 1 q1 in2 $end
$var wire 1 02 out $end
$upscope $end
$scope module notMod1 $end
$var wire 1 02 in1 $end
$var wire 1 12 out $end
$upscope $end
$scope module nandMod2 $end
$var wire 1 x/ in1 $end
$var wire 1 *0 in2 $end
$var wire 1 22 out $end
$upscope $end
$scope module notMod2 $end
$var wire 1 22 in1 $end
$var wire 1 52 out $end
$upscope $end
$scope module norMod1 $end
$var wire 1 12 in1 $end
$var wire 1 52 in2 $end
$var wire 1 42 out $end
$upscope $end
$scope module notMod3 $end
$var wire 1 42 in1 $end
$var wire 1 .2 out $end
$upscope $end
>>>>>>> 2e640e2555e217a06b6c352cc5c5f6091e568d2d
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope module data_memory $end
$var wire 1 "" data_out [15] $end
$var wire 1 #" data_out [14] $end
$var wire 1 $" data_out [13] $end
$var wire 1 %" data_out [12] $end
$var wire 1 &" data_out [11] $end
$var wire 1 '" data_out [10] $end
$var wire 1 (" data_out [9] $end
$var wire 1 )" data_out [8] $end
$var wire 1 *" data_out [7] $end
$var wire 1 +" data_out [6] $end
$var wire 1 ," data_out [5] $end
$var wire 1 -" data_out [4] $end
$var wire 1 ." data_out [3] $end
$var wire 1 /" data_out [2] $end
$var wire 1 0" data_out [1] $end
$var wire 1 1" data_out [0] $end
$var wire 1 p! data_in [15] $end
$var wire 1 q! data_in [14] $end
$var wire 1 r! data_in [13] $end
$var wire 1 s! data_in [12] $end
$var wire 1 t! data_in [11] $end
$var wire 1 u! data_in [10] $end
$var wire 1 v! data_in [9] $end
$var wire 1 w! data_in [8] $end
$var wire 1 x! data_in [7] $end
$var wire 1 y! data_in [6] $end
$var wire 1 z! data_in [5] $end
$var wire 1 {! data_in [4] $end
$var wire 1 |! data_in [3] $end
$var wire 1 }! data_in [2] $end
$var wire 1 ~! data_in [1] $end
$var wire 1 !" data_in [0] $end
$var wire 1 '! addr [15] $end
$var wire 1 (! addr [14] $end
$var wire 1 )! addr [13] $end
$var wire 1 *! addr [12] $end
$var wire 1 +! addr [11] $end
$var wire 1 ,! addr [10] $end
$var wire 1 -! addr [9] $end
$var wire 1 .! addr [8] $end
$var wire 1 /! addr [7] $end
$var wire 1 0! addr [6] $end
$var wire 1 1! addr [5] $end
$var wire 1 2! addr [4] $end
$var wire 1 3! addr [3] $end
$var wire 1 4! addr [2] $end
$var wire 1 5! addr [1] $end
$var wire 1 6! addr [0] $end
$var wire 1 2" enable $end
$var wire 1 3" wr $end
$var wire 1 m# createdump $end
$var wire 1 { clk $end
$var wire 1 } rst $end
<<<<<<< HEAD
$var reg 1 0. loaded $end
$var reg 17 1. largest [16:0] $end
$var integer 32 2. mcd $end
$var integer 32 3. i $end
=======
$var reg 1 62 loaded $end
$var reg 17 72 largest [16:0] $end
$var integer 32 82 mcd $end
$var integer 32 92 i $end
>>>>>>> 2e640e2555e217a06b6c352cc5c5f6091e568d2d
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
<<<<<<< HEAD
b10000 b&
b10000 l&
b10000 >'
b10000 o'
b10000 B(
b10000 s(
b10000 F)
b10000 w)
b10000 J*
b0 x
b10 y
b100 z
10.
b0 1.
bx 2.
b10000000000000000 3.
bx {*
bx |*
bx }*
x~*
x!+
=======
b10000 G)
b10000 Q)
b10000 #*
b10000 T*
b10000 '+
b10000 X+
b10000 +,
b10000 \,
b10000 /-
b0 x
b10 y
b100 z
162
b0 72
bx 82
b10000000000000000 92
bx `-
bx a-
bx b-
xc-
xd-
0_-
0^-
0]-
0\-
0[-
0Z-
0Y-
0X-
0W-
0V-
0U-
0T-
0S-
0R-
0Q-
0P-
0.-
0--
0,-
0+-
0*-
0)-
0(-
0'-
0&-
0%-
0$-
0#-
0"-
0!-
0~,
0},
0[,
0Z,
0Y,
0X,
0W,
0V,
0U,
0T,
0S,
0R,
0Q,
0P,
0O,
0N,
0M,
0L,
0*,
0),
0(,
0',
0&,
0%,
0$,
0#,
0",
0!,
0~+
0}+
0|+
0{+
0z+
0y+
0W+
0V+
0U+
0T+
0S+
0R+
0Q+
0P+
0O+
0N+
0M+
0L+
0K+
0J+
0I+
0H+
0&+
0%+
0$+
0#+
0"+
0!+
0~*
0}*
0|*
0{*
>>>>>>> 2e640e2555e217a06b6c352cc5c5f6091e568d2d
0z*
0y*
0x*
0w*
0v*
0u*
<<<<<<< HEAD
0t*
0s*
0r*
0q*
0p*
0o*
0n*
0m*
0l*
0k*
=======
0S*
0R*
0Q*
0P*
0O*
0N*
0M*
0L*
0K*
0J*
>>>>>>> 2e640e2555e217a06b6c352cc5c5f6091e568d2d
0I*
0H*
0G*
0F*
0E*
0D*
<<<<<<< HEAD
0C*
0B*
0A*
0@*
0?*
0>*
0=*
0<*
0;*
0:*
=======
0"*
0!*
0~)
0})
0|)
0{)
0z)
0y)
0x)
0w)
>>>>>>> 2e640e2555e217a06b6c352cc5c5f6091e568d2d
0v)
0u)
0t)
0s)
0r)
0q)
<<<<<<< HEAD
0p)
0o)
0n)
0m)
0l)
0k)
0j)
0i)
0h)
0g)
0E)
0D)
0C)
0B)
0A)
0@)
0?)
0>)
0=)
0<)
0;)
0:)
09)
08)
07)
06)
0r(
0q(
0p(
0o(
0n(
0m(
0l(
0k(
0j(
0i(
0h(
0g(
0f(
0e(
0d(
0c(
0A(
0@(
0?(
0>(
0=(
0<(
0;(
0:(
09(
08(
07(
06(
05(
04(
03(
02(
0n'
0m'
0l'
0k'
0j'
0i'
0h'
0g'
0f'
0e'
0d'
0c'
0b'
0a'
0`'
0_'
0='
0<'
0;'
0:'
09'
08'
07'
06'
05'
04'
03'
02'
01'
00'
0/'
0.'
bx a&
1]&
b0 ^&
bx _&
b10000000000000000 `&
0J&
0I&
0H&
0G&
0F&
0E&
0D&
0C&
0B&
0A&
0@&
0?&
0>&
0=&
0<&
0;&
bx }#
bx ~#
x!$
bx 2$
xp#
bx q#
bx r#
xs#
xt#
xu#
bx v#
xw#
xx#
bx y#
xz#
x{#
x|#
=======
bx F)
1B)
b0 C)
bx D)
b10000000000000000 E)
0/)
0.)
0-)
0,)
0+)
0*)
0))
0()
0')
0&)
0%)
0$)
0#)
0")
0!)
0~(
bx ~#
bx !$
x"$
bx 3$
xq#
bx r#
bx s#
xt#
xu#
xv#
bx w#
xx#
xy#
bx z#
x{#
x|#
x}#
>>>>>>> 2e640e2555e217a06b6c352cc5c5f6091e568d2d
1~
1!!
b1 "!
x0
x/
x.
x-
x,
x+
x*
x)
x(
x'
x&
x%
x$
x#
x"
x!
x@
x?
x>
x=
x<
x;
x:
x9
x8
x7
x6
x5
x4
x3
x2
x1
xA
xD
xC
xB
xT
xS
xR
xQ
xP
xO
xN
xM
xL
xK
xJ
xI
xH
xG
xF
xE
xU
xV
xf
xe
xd
xc
xb
xa
x`
x_
x^
x]
x\
x[
xZ
xY
xX
xW
xv
xu
xt
xs
xr
xq
xp
xo
xn
xm
xl
xk
xj
xi
xh
xg
xw
1{
z|
1}
x&!
x%!
x$!
x#!
x6!
x5!
x4!
x3!
x2!
x1!
x0!
x/!
x.!
x-!
x,!
x+!
x*!
x)!
x(!
x'!
zF!
zE!
zD!
zC!
zB!
zA!
z@!
z?!
z>!
z=!
z<!
z;!
z:!
z9!
z8!
z7!
xV!
xU!
xT!
xS!
xR!
xQ!
xP!
xO!
xN!
xM!
xL!
xK!
xJ!
xI!
xH!
xG!
xW!
xX!
<<<<<<< HEAD
xY!
xZ!
x]!
=======
zY!
xZ!
>>>>>>> 2e640e2555e217a06b6c352cc5c5f6091e568d2d
x\!
x[!
x_!
x^!
<<<<<<< HEAD
=======
x]!
>>>>>>> 2e640e2555e217a06b6c352cc5c5f6091e568d2d
xo!
xn!
xm!
xl!
xk!
xj!
xi!
xh!
xg!
xf!
xe!
xd!
xc!
xb!
xa!
x`!
x!"
x~!
x}!
x|!
x{!
xz!
xy!
xx!
xw!
xv!
xu!
xt!
xs!
xr!
xq!
xp!
x1"
x0"
x/"
x."
x-"
x,"
x+"
x*"
x)"
x("
x'"
x&"
x%"
x$"
x#"
x""
x2"
x3"
x6"
x5"
x4"
x7"
xG"
xF"
xE"
xD"
xC"
xB"
xA"
x@"
x?"
x>"
x="
x<"
x;"
x:"
x9"
x8"
xW"
xV"
xU"
xT"
xS"
xR"
xQ"
xP"
xO"
xN"
xM"
xL"
xK"
xJ"
xI"
xH"
xY"
xX"
xi"
xh"
xg"
xf"
xe"
xd"
xc"
xb"
xa"
x`"
x_"
x^"
x]"
x\"
x["
xZ"
xy"
xx"
xw"
xv"
xu"
xt"
xs"
xr"
xq"
xp"
xo"
xn"
xm"
xl"
xk"
xj"
x+#
x*#
x)#
x(#
x'#
0&#
0%#
0$#
0##
0"#
0!#
0~"
0}"
0|"
0{"
0z"
x;#
x:#
x9#
x8#
x7#
x6#
x5#
x4#
x3#
x2#
x1#
x0#
x/#
x.#
x-#
x,#
xK#
xJ#
xI#
xH#
xG#
xF#
xE#
xD#
xC#
xB#
xA#
x@#
x?#
x>#
x=#
x<#
x[#
xZ#
xY#
xX#
xW#
xV#
xU#
xT#
xS#
xR#
xQ#
xP#
xO#
xN#
xM#
xL#
xk#
xj#
xi#
xh#
xg#
xf#
xe#
xd#
xc#
xb#
xa#
x`#
x_#
x^#
x]#
x\#
xl#
xm#
xn#
xo#
<<<<<<< HEAD
=======
xp#
xt-
xs-
xr-
xq-
xp-
xo-
xn-
xm-
xl-
xk-
xj-
xi-
xh-
xg-
xf-
xe-
x&.
x%.
x$.
x#.
x".
x!.
x~-
x}-
x|-
x{-
xz-
xy-
xx-
xw-
xv-
xu-
x6.
x5.
x4.
x3.
x2.
x1.
x0.
x/.
x..
x-.
x,.
x+.
x*.
x).
x(.
x'.
xF.
xE.
xD.
xC.
xB.
xA.
x@.
x?.
x>.
x=.
x<.
x;.
x:.
x9.
x8.
x7.
xG.
x;0
x<0
x=0
x>0
x?0
x@0
xA0
xB0
xC0
xD0
xE0
xi1
xj1
xk1
xl1
xm1
xn1
xo1
xp1
xq1
xr1
xs1
x/2
x02
x12
x22
z32
x42
x52
x'2
x(2
x)2
x*2
z+2
x,2
x-2
x}1
x~1
x!2
x"2
z#2
x$2
x%2
xu1
xv1
xw1
xx1
zy1
xz1
x{1
x>1
x?1
x@1
xA1
xB1
xC1
xD1
xE1
xF1
xG1
xH1
xb1
xc1
xd1
xe1
zf1
xg1
xh1
xZ1
x[1
x\1
x]1
z^1
x_1
x`1
xR1
xS1
xT1
xU1
zV1
xW1
xX1
xJ1
xK1
xL1
xM1
zN1
xO1
xP1
xq0
xr0
xs0
xt0
xu0
xv0
xw0
xx0
xy0
xz0
x{0
x71
x81
x91
x:1
z;1
x<1
x=1
x/1
x01
x11
x21
z31
x41
x51
x'1
x(1
x)1
x*1
z+1
x,1
x-1
x}0
x~0
x!1
x"1
z#1
x$1
x%1
xF0
xG0
xH0
xI0
xJ0
xK0
xL0
xM0
xN0
xO0
xP0
xj0
xk0
xl0
xm0
zn0
xo0
xp0
xb0
xc0
xd0
xe0
zf0
xg0
xh0
xZ0
x[0
x\0
x]0
z^0
x_0
x`0
xR0
xS0
xT0
xU0
zV0
xW0
xX0
xW.
xV.
xU.
xT.
xS.
xR.
xQ.
xP.
xO.
xN.
xM.
xL.
xK.
xJ.
xI.
xH.
xg.
xf.
xe.
xd.
xc.
xb.
xa.
x`.
x_.
x^.
x].
x\.
x[.
xZ.
xY.
xX.
xw.
xv.
xu.
xt.
xs.
xr.
xq.
xp.
xo.
xn.
xm.
xl.
xk.
xj.
xi.
xh.
xg/
xf/
xe/
xd/
xc/
xb/
xa/
x`/
x_/
x^/
x]/
x\/
x[/
xZ/
xY/
xX/
xO/
xN/
xM/
xL/
xK/
xJ/
xI/
xH/
xG/
xF/
xE/
xD/
xC/
xB/
xA/
x@/
x;/
x:/
x9/
x8/
x7/
x6/
x5/
x4/
x3/
x2/
x1/
x0/
x//
x./
x-/
x,/
x)/
x(/
x'/
x&/
x%/
x$/
x#/
x"/
x!/
x~.
x}.
x|.
x{.
xz.
xy.
xx.
xO)
xN)
xM)
xL)
xK)
xJ)
xI)
xH)
xP)
x`)
x_)
x^)
x])
x\)
x[)
xZ)
xY)
xX)
xW)
xV)
xU)
xT)
xS)
xR)
x3*
x2*
x1*
x0*
x/*
x.*
x-*
x,*
x+*
x**
x)*
x(*
x'*
x&*
x%*
x$*
xd*
xc*
xb*
xa*
x`*
x_*
x^*
x]*
x\*
x[*
xZ*
xY*
xX*
xW*
xV*
xU*
x7+
x6+
x5+
x4+
x3+
x2+
>>>>>>> 2e640e2555e217a06b6c352cc5c5f6091e568d2d
x1+
x0+
x/+
x.+
x-+
x,+
x++
x*+
x)+
x(+
<<<<<<< HEAD
x'+
x&+
x%+
x$+
x#+
x"+
xA+
x@+
x?+
x>+
x=+
x<+
x;+
x:+
x9+
x8+
x7+
x6+
x5+
x4+
x3+
x2+
xQ+
xP+
xO+
xN+
xM+
xL+
xK+
xJ+
xI+
xH+
xG+
xF+
xE+
xD+
xC+
xB+
=======
xh+
xg+
xf+
xe+
xd+
xc+
xb+
>>>>>>> 2e640e2555e217a06b6c352cc5c5f6091e568d2d
xa+
x`+
x_+
x^+
x]+
x\+
x[+
xZ+
xY+
<<<<<<< HEAD
xX+
xW+
xV+
xU+
xT+
xS+
xR+
xb+
xY-
xX-
xW-
xV-
x]-
x\-
x[-
xZ-
x^-
x_-
x`-
za-
x(.
x'.
x&.
x%.
x,.
x+.
x*.
x).
x-.
x..
x/.
x{-
xz-
xy-
xx-
x!.
x~-
x}-
x|-
x".
x#.
x$.
xp-
xo-
xn-
xm-
xt-
xs-
xr-
xq-
xu-
xv-
xw-
xe-
xd-
xc-
xb-
xi-
xh-
xg-
xf-
xj-
xk-
xl-
xr+
xq+
xp+
xo+
xn+
xm+
xl+
xk+
xj+
xi+
xh+
xg+
xf+
xe+
xd+
xc+
x$,
x#,
x",
x!,
x~+
x}+
x|+
x{+
xz+
xy+
xx+
xw+
xv+
xu+
xt+
xs+
=======
x;,
x:,
x9,
x8,
x7,
x6,
x5,
>>>>>>> 2e640e2555e217a06b6c352cc5c5f6091e568d2d
x4,
x3,
x2,
x1,
x0,
x/,
x.,
x-,
x,,
<<<<<<< HEAD
x+,
x*,
x),
x(,
x',
x&,
x%,
x$-
x#-
x"-
x!-
x~,
x},
x|,
x{,
xz,
xy,
xx,
xw,
xv,
xu,
xt,
xs,
=======
xl,
xk,
>>>>>>> 2e640e2555e217a06b6c352cc5c5f6091e568d2d
xj,
xi,
xh,
xg,
xf,
xe,
xd,
xc,
xb,
xa,
x`,
x_,
x^,
x],
<<<<<<< HEAD
x\,
x[,
xV,
xU,
xT,
xS,
xR,
xQ,
xP,
xO,
xN,
xM,
xL,
xK,
xJ,
xI,
xH,
xG,
=======
x?-
x>-
x=-
x<-
x;-
x:-
x9-
x8-
x7-
x6-
x5-
x4-
x3-
x2-
x1-
x0-
xO-
xN-
xM-
xL-
xK-
xJ-
xI-
xH-
xG-
xF-
xE-
xD-
xC-
xB-
xA-
x@-
x|,
x{,
xz,
xy,
xx,
xw,
xv,
xu,
xt,
xs,
xr,
xq,
xp,
xo,
xn,
xm,
xK,
xJ,
xI,
xH,
xG,
xF,
xE,
>>>>>>> 2e640e2555e217a06b6c352cc5c5f6091e568d2d
xD,
xC,
xB,
xA,
x@,
x?,
x>,
x=,
x<,
<<<<<<< HEAD
x;,
x:,
x9,
x8,
x7,
x6,
x5,
xj&
xi&
xh&
xg&
xf&
xe&
xd&
xc&
xk&
x{&
xz&
xy&
xx&
xw&
xv&
xu&
xt&
xs&
xr&
xq&
xp&
xo&
xn&
xm&
xN'
xM'
xL'
xK'
xJ'
xI'
xH'
xG'
xF'
xE'
xD'
xC'
xB'
xA'
x@'
x?'
x!(
x~'
x}'
x|'
x{'
xz'
xy'
xx'
xw'
xv'
xu'
xt'
xs'
xr'
xq'
xp'
xR(
xQ(
xP(
xO(
xN(
xM(
xL(
xK(
xJ(
xI(
xH(
xG(
xF(
xE(
xD(
xC(
x%)
x$)
x#)
x")
x!)
x~(
x}(
x|(
x{(
xz(
xy(
xx(
xw(
xv(
xu(
xt(
xV)
xU)
xT)
xS)
xR)
xQ)
xP)
xO)
xN)
xM)
xL)
xK)
xJ)
xI)
xH)
xG)
x)*
x(*
x'*
x&*
x%*
x$*
x#*
x"*
x!*
x~)
x})
x|)
x{)
xz)
xy)
xx)
xZ*
xY*
xX*
xW*
xV*
xU*
xT*
xS*
xR*
xQ*
xP*
xO*
xN*
xM*
xL*
xK*
=======
xx+
xw+
xv+
xu+
xt+
xs+
xr+
xq+
xp+
xo+
xn+
xm+
xl+
xk+
xj+
xi+
xG+
xF+
xE+
xD+
xC+
xB+
xA+
x@+
x?+
x>+
x=+
x<+
x;+
x:+
x9+
x8+
xt*
xs*
xr*
xq*
xp*
xo*
xn*
xm*
xl*
xk*
>>>>>>> 2e640e2555e217a06b6c352cc5c5f6091e568d2d
xj*
xi*
xh*
xg*
xf*
xe*
<<<<<<< HEAD
xd*
xc*
xb*
xa*
x`*
x_*
x^*
x]*
x\*
x[*
=======
xC*
xB*
xA*
x@*
x?*
x>*
x=*
x<*
x;*
x:*
>>>>>>> 2e640e2555e217a06b6c352cc5c5f6091e568d2d
x9*
x8*
x7*
x6*
x5*
x4*
<<<<<<< HEAD
x3*
x2*
x1*
x0*
x/*
x.*
x-*
x,*
x+*
x**
=======
xp)
xo)
xn)
xm)
xl)
xk)
xj)
xi)
xh)
xg)
>>>>>>> 2e640e2555e217a06b6c352cc5c5f6091e568d2d
xf)
xe)
xd)
xc)
xb)
xa)
<<<<<<< HEAD
x`)
x_)
x^)
x])
x\)
x[)
xZ)
xY)
xX)
xW)
x5)
x4)
x3)
x2)
x1)
x0)
x/)
x.)
x-)
x,)
x+)
x*)
x))
x()
x')
x&)
=======
xm(
xl(
xk(
xj(
xi(
xh(
xg(
xf(
xe(
xd(
xc(
>>>>>>> 2e640e2555e217a06b6c352cc5c5f6091e568d2d
xb(
xa(
x`(
x_(
x^(
<<<<<<< HEAD
x](
x\(
x[(
xZ(
xY(
xX(
xW(
xV(
xU(
xT(
xS(
x1(
x0(
x/(
x.(
x-(
x,(
x+(
x*(
x)(
x((
x'(
x&(
x%(
x$(
x#(
x"(
x^'
x]'
x\'
x['
xZ'
xY'
xX'
xW'
xV'
xU'
xT'
xS'
xR'
xQ'
xP'
xO'
x-'
x,'
x+'
x*'
x)'
x('
x''
x&'
x%'
x$'
x#'
x"'
x!'
x~&
x}&
x|&
x*&
x)&
x(&
x'&
x&&
x%&
x$&
x#&
x"&
x!&
x~%
x}%
x|%
x{%
xz%
xy%
x:&
x9&
x8&
x7&
x6&
x5&
x4&
x3&
x2&
x1&
x0&
x/&
x.&
x-&
x,&
x+&
x1$
x0$
x/$
x.$
x-$
x,$
x+$
x*$
x)$
x($
x'$
x&$
x%$
x$$
x#$
x"$
xD%
xC%
xB%
xA%
xH%
0G%
0F%
0E%
xI%
xJ%
xK%
zL%
xq%
xp%
xo%
xn%
0u%
0t%
0s%
0r%
xv%
xw%
xx%
xf%
xe%
xd%
xc%
0j%
0i%
0h%
0g%
xk%
xl%
xm%
x[%
xZ%
xY%
xX%
0_%
0^%
0]%
0\%
x`%
xa%
xb%
xP%
xO%
xN%
xM%
0T%
xS%
0R%
0Q%
0U%
xV%
xW%
xX$
xW$
xV$
xU$
x\$
x[$
xZ$
xY$
x]$
x^$
x_$
z`$
x'%
x&%
x%%
x$%
x+%
x*%
x)%
x(%
x,%
x-%
x.%
xz$
xy$
xx$
xw$
x~$
x}$
x|$
x{$
x!%
x"%
x#%
xo$
xn$
xm$
xl$
xs$
xr$
xq$
xp$
xt$
xu$
xv$
xd$
xc$
xb$
xa$
xh$
xg$
xf$
xe$
xi$
xj$
xk$
0\&
1[&
0S$
=======
x}(
x|(
x{(
xz(
xy(
xx(
xw(
xv(
xu(
xt(
xs(
xr(
xq(
xp(
xo(
xn(
x2$
x1$
x0$
x/$
x.$
x-$
x,$
x+$
x*$
x)$
x($
x'$
x&$
x%$
x$$
x#$
xc&
xd&
xe&
xf&
xg&
xh&
xi&
xj&
xk&
xl&
xm&
03(
04(
05(
06(
x7(
x8(
x9(
x:(
x;(
x<(
x=(
xW(
xX(
xY(
1Z(
z[(
x\(
0](
xO(
xP(
xQ(
1R(
zS(
xT(
0U(
xG(
xH(
xI(
1J(
zK(
xL(
0M(
x?(
x@(
xA(
1B(
zC(
xD(
0E(
0f'
0g'
0h'
0i'
xj'
xk'
xl'
xm'
xn'
xo'
xp'
x,(
x-(
x.(
1/(
z0(
x1(
02(
x$(
x%(
x&(
1'(
z((
x)(
0*(
xz'
x{'
x|'
1}'
z~'
x!(
0"(
xr'
xs'
xt'
1u'
zv'
xw'
0x'
0;'
0<'
0='
0>'
x?'
x@'
xA'
xB'
xC'
xD'
xE'
x_'
x`'
xa'
1b'
zc'
xd'
0e'
xW'
xX'
xY'
1Z'
z['
x\'
0]'
xO'
xP'
xQ'
1R'
zS'
xT'
0U'
xG'
xH'
xI'
1J'
zK'
xL'
0M'
0n&
xo&
0p&
0q&
1r&
xs&
xt&
xu&
xv&
xw&
0x&
x4'
x5'
x6'
17'
z8'
x9'
0:'
x,'
x-'
x.'
1/'
z0'
x1'
02'
x$'
1%'
0&'
x''
z('
x)'
x*'
xz&
1{&
0|&
1}&
z~&
1!'
0"'
xV$
xW$
xX$
xY$
xZ$
x[$
x\$
x]$
x^$
x_$
x`$
x&&
x'&
x(&
x)&
x*&
x+&
x,&
x-&
x.&
x/&
x0&
xJ&
xK&
xL&
xM&
zN&
xO&
xP&
xB&
xC&
xD&
xE&
zF&
xG&
xH&
x:&
x;&
x<&
x=&
z>&
x?&
x@&
x2&
x3&
x4&
x5&
z6&
x7&
x8&
xY%
xZ%
x[%
x\%
x]%
x^%
x_%
x`%
xa%
xb%
xc%
x}%
x~%
x!&
x"&
z#&
x$&
x%&
xu%
xv%
xw%
xx%
zy%
xz%
x{%
xm%
xn%
xo%
xp%
zq%
xr%
xs%
xe%
xf%
xg%
xh%
zi%
xj%
xk%
x.%
x/%
x0%
x1%
x2%
x3%
x4%
x5%
x6%
x7%
x8%
xR%
xS%
xT%
xU%
zV%
xW%
xX%
xJ%
xK%
xL%
xM%
zN%
xO%
xP%
xB%
xC%
xD%
xE%
zF%
xG%
xH%
x:%
x;%
x<%
x=%
z>%
x?%
x@%
xa$
xb$
xc$
xd$
xe$
xf$
xg$
xh$
xi$
xj$
xk$
x'%
x(%
x)%
x*%
z+%
x,%
x-%
x}$
x~$
x!%
x"%
z#%
x$%
x%%
xu$
xv$
xw$
xx$
zy$
xz$
x{$
xm$
1n$
0o$
xp$
zq$
xr$
xs$
0A)
1@)
0T$
xS$
>>>>>>> 2e640e2555e217a06b6c352cc5c5f6091e568d2d
xR$
xQ$
xP$
xO$
xN$
xM$
xL$
xK$
xJ$
xI$
xH$
xG$
xF$
xE$
xD$
xC$
xB$
xA$
x@$
x?$
x>$
x=$
x<$
x;$
x:$
x9$
x8$
x7$
x6$
x5$
x4$
<<<<<<< HEAD
x3$
xT$
0?%
0>%
1=%
0<%
0;%
0:%
09%
08%
07%
06%
05%
04%
03%
02%
01%
00%
0/%
x@%
zZ&
zY&
zX&
zW&
zV&
zU&
zT&
zS&
zR&
zQ&
zP&
zO&
zN&
zM&
zL&
zK&
xU-
xT-
xS-
xR-
xQ-
xP-
xO-
xN-
xM-
xL-
xK-
xJ-
xI-
xH-
xG-
xF-
xE-
xD-
xC-
xB-
xA-
x@-
x?-
x>-
x=-
x<-
x;-
x:-
x9-
x8-
x7-
x6-
x5-
0F,
0E,
0Z,
0Y,
0X,
0W,
0r,
0q,
0p,
0o,
0n,
0m,
0l,
0k,
04-
03-
02-
01-
00-
0/-
0.-
0--
0,-
0+-
0*-
0)-
0(-
0'-
0&-
0%-
$end
#1
0K*
0L*
0M*
0N*
0O*
0P*
0Q*
0R*
0S*
0T*
=======
xU$
xl$
xt$
x|$
x&%
x9%
xA%
xI%
xQ%
xd%
xl%
xt%
x|%
x1&
x9&
xA&
xI&
0a&
0`&
1_&
0^&
0]&
0\&
0[&
0Z&
0Y&
0X&
0W&
0V&
0U&
0T&
0S&
0R&
0Q&
xb&
0y&
x#'
x+'
x3'
xF'
xN'
xV'
x^'
xq'
xy'
x#(
x+(
x>(
xF(
xN(
xV(
z?)
z>)
z=)
z<)
z;)
z:)
z9)
z8)
z7)
z6)
z5)
z4)
z3)
z2)
z1)
z0)
x:0
x90
x80
x70
x60
x50
x40
x30
x20
x10
x00
x/0
x.0
x-0
x,0
x+0
x*0
x)0
x(0
x'0
x&0
x%0
x$0
x#0
x"0
x!0
x~/
x}/
x|/
x{/
xz/
xy/
xx/
0+/
0*/
0?/
0>/
0=/
0</
0W/
0V/
0U/
0T/
0S/
0R/
0Q/
0P/
0w/
0v/
0u/
0t/
0s/
0r/
0q/
0p/
0o/
0n/
0m/
0l/
0k/
0j/
0i/
0h/
xQ0
xY0
xa0
xi0
x|0
x&1
x.1
x61
xI1
xQ1
xY1
xa1
xt1
x|1
x&2
x.2
$end
#1
00-
01-
02-
03-
04-
05-
06-
07-
08-
09-
0:-
0;-
0<-
0=-
0>-
0?-
0],
0^,
0_,
0`,
0a,
0b,
0c,
0d,
0e,
0f,
0g,
0h,
0i,
0j,
0k,
0l,
0,,
0-,
0.,
0/,
00,
01,
02,
03,
04,
05,
06,
07,
08,
09,
0:,
0;,
0Y+
0Z+
0[+
0\+
0]+
0^+
0_+
0`+
0a+
0b+
0c+
0d+
0e+
0f+
0g+
0h+
0(+
0)+
0*+
0++
0,+
0-+
0.+
0/+
00+
01+
02+
03+
04+
05+
06+
07+
>>>>>>> 2e640e2555e217a06b6c352cc5c5f6091e568d2d
0U*
0V*
0W*
0X*
0Y*
0Z*
<<<<<<< HEAD
0x)
0y)
0z)
0{)
0|)
0})
0~)
0!*
0"*
0#*
=======
0[*
0\*
0]*
0^*
0_*
0`*
0a*
0b*
0c*
0d*
>>>>>>> 2e640e2555e217a06b6c352cc5c5f6091e568d2d
0$*
0%*
0&*
0'*
0(*
0)*
<<<<<<< HEAD
0G)
0H)
0I)
0J)
0K)
0L)
0M)
0N)
0O)
0P)
0Q)
=======
0**
0+*
0,*
0-*
0.*
0/*
00*
01*
02*
03*
>>>>>>> 2e640e2555e217a06b6c352cc5c5f6091e568d2d
0R)
0S)
0T)
0U)
0V)
<<<<<<< HEAD
0t(
0u(
0v(
0w(
0x(
0y(
0z(
0{(
0|(
0}(
0~(
0!)
0")
0#)
0$)
0%)
0C(
0D(
0E(
0F(
0G(
0H(
0I(
0J(
0K(
0L(
0M(
0N(
0O(
0P(
0Q(
0R(
0p'
0q'
0r'
0s'
0t'
0u'
0v'
0w'
0x'
0y'
0z'
0{'
0|'
0}'
0~'
0!(
0?'
0@'
0A'
0B'
0C'
0D'
0E'
0F'
0G'
0H'
0I'
0J'
0K'
0L'
0M'
0N'
0m&
0n&
0o&
0p&
0q&
0r&
0s&
0t&
0u&
0v&
0w&
0x&
0y&
0z&
0{&
0k&
0y%
0z%
0{%
0|%
0}%
0~%
0!&
0"&
0#&
0$&
0%&
0&&
0'&
0(&
0)&
0*&
0W"
0V"
0S%
0U"
0T"
0S"
0R"
0Q"
0P"
0O"
0N"
0M"
0L"
0K"
0J"
0I"
0H"
0o!
0A+
0n!
0@+
0m!
0C,
0q+
0?+
0l!
0B,
0p+
0>+
0k!
0A,
0o+
0=+
0j!
0@,
0n+
0<+
0i!
0?,
0m+
0S,
0!,
0;+
0h!
0>,
0l+
0R,
0~+
0:+
0g!
0=,
0k+
0Q,
0}+
09+
0f!
0<,
0j+
0P,
0|+
08+
0e!
0;,
0i+
0O,
0{+
07+
0d!
0:,
0h+
0N,
0z+
06+
0c!
09,
0g+
0M,
0y+
05+
0b!
08,
0f+
0L,
0x+
04+
0a!
05,
07,
0e+
0G,
0K,
0w+
0[,
0c,
0-,
0s,
03+
0`!
0c+
0s+
0%,
0B+
0{,
0J+
0_,
0),
0!-
0g,
01,
0N+
0w,
0F+
0I,
0u+
0a,
0+,
0#-
0i,
0U,
0#,
03,
0P+
0y,
0H+
0],
0',
0},
0e,
0/,
0L+
0u,
0D+
06,
0d+
0J,
0v+
0b,
0,,
0$-
0j,
0V,
0D,
0r+
0$,
04,
0Q+
0z,
0I+
0^,
0(,
0~,
0f,
00,
0M+
0v,
0E+
0H,
0t+
0`,
0*,
0"-
0h,
0T,
0",
02,
0O+
0x,
0G+
0\,
0&,
0|,
0d,
0.,
0K+
0t,
0C+
02+
=======
0W)
0X)
0Y)
0Z)
0[)
0\)
0])
0^)
0_)
0`)
0P)
0^(
0_(
0`(
0a(
0b(
0c(
0d(
0e(
0f(
0g(
0h(
0i(
0j(
0k(
0l(
0m(
0W"
0w&
0V"
1''
0*'
1)'
0#'
0o&
0U"
0s&
0T"
0t&
0S"
0D'
0R"
0?'
0Q"
0@'
0P"
0A'
0O"
0o'
0N"
0j'
0M"
0k'
0L"
0l'
0K"
0<(
0J"
07(
0I"
08(
0H"
09(
0o!
0&.
0n!
0%.
0m!
0(/
0V.
0$.
0l!
0'/
0U.
0#.
0k!
0&/
0T.
0".
0j!
0%/
0S.
0!.
0i!
0$/
0R.
08/
0d.
0~-
0h!
0#/
0Q.
07/
0c.
0}-
0g!
0"/
0P.
06/
0b.
0|-
0f!
0!/
0O.
05/
0a.
0{-
0e!
0~.
0N.
04/
0`.
0z-
0d!
0}.
0M.
03/
0_.
0y-
0c!
0|.
0L.
02/
0^.
0x-
0b!
0{.
0K.
01/
0].
0w-
0a!
0x.
0z.
0J.
0,/
00/
0\.
0@/
0H/
0p.
0X/
0v-
0`!
0H.
0X.
0h.
0'.
0`/
0/.
0D/
0l.
0d/
0L/
0t.
03.
0\/
0+.
0./
0Z.
0F/
0n.
0f/
0N/
0:/
0f.
0v.
05.
0^/
0-.
0B/
0j.
0b/
0J/
0r.
01.
0Z/
0).
0y.
0I.
0//
0[.
0G/
0o.
0g/
0O/
0;/
0)/
0W.
0g.
0w.
06.
0_/
0..
0C/
0k.
0c/
0K/
0s.
02.
0[/
0*.
0-/
0Y.
0E/
0m.
0e/
0M/
09/
0e.
0u.
04.
0]/
0,.
0A/
0i.
0a/
0I/
0q.
00.
0Y/
0(.
0u-
>>>>>>> 2e640e2555e217a06b6c352cc5c5f6091e568d2d
0!"
0~!
0}!
0|!
0{!
0z!
0y!
0x!
0w!
0v!
0u!
0t!
0s!
0r!
0q!
0p!
<<<<<<< HEAD
0n%
0o%
0p%
0q%
0c%
0d%
0e%
0f%
0X%
0Y%
0Z%
0[%
0M%
0N%
1O%
0V%
1h"
0P%
0i"
0g"
0`%
0a%
0k%
0l%
0v%
0w%
0["
0\"
0_"
0`"
0c"
0d"
=======
0f&
0W(
1X(
0Y(
1\(
0V(
0;(
0O(
1P(
0Q(
1T(
0N(
0:(
0G(
1H(
0I(
1L(
0F(
0=(
0j&
0?(
1@(
0A(
1D(
0>(
0e&
0,(
1-(
0.(
11(
0+(
0n'
0$(
1%(
0&(
1)(
0#(
0m'
0z'
1{'
0|'
1!(
0y'
0p'
0i&
0r'
1s'
0t'
1w'
0q'
0d&
0_'
1`'
0a'
1d'
0^'
0C'
0W'
1X'
0Y'
1\'
0V'
0B'
0O'
1P'
0Q'
1T'
0N'
0E'
0h&
0G'
1H'
0I'
1L'
0F'
0c&
04'
15'
06'
19'
03'
0v&
0,'
1-'
0.'
11'
0+'
0u&
1$'
0g&
0z&
0i"
1h"
0g"
0f"
0k&
0l&
0d"
0c"
0b"
0m&
0`"
0_"
0^"
0b&
0\"
0["
0Z"
0]"
0a"
0e"
>>>>>>> 2e640e2555e217a06b6c352cc5c5f6091e568d2d
